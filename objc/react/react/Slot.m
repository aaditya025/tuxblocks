//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/Slot.java
//
//  Created by Thomas on 7/1/13.
//

#import "react/ValueView.h"

@implementation ReactSlot

- (void)onEmitWithId:(id)event {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (ReactSlot *)atPriorityWithInt:(int)priority {
  ReactSlot *outer = self;
  return [[[ReactSlot_$1 alloc] initWithReactSlot:outer withInt:priority] autorelease];
}

- (ReactSlot *)andThenWithReactSlot:(ReactSlot *)after {
  ReactSlot *before = self;
  return [[[ReactSlot_$2 alloc] initWithReactSlot:before withReactSlot:after] autorelease];
}

- (void)onChangeWithId:(id)value
                withId:(id)oldValue {
  [self onEmitWithId:value];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactSlot_$1

- (ReactSlot *)val$outer {
  return val$outer_;
}
- (void)setVal$outer:(ReactSlot *)val$outer {
  JreOperatorRetainedAssign(&val$outer_, self, val$outer);
}
@synthesize val$outer = val$outer_;
@synthesize val$priority = val$priority_;

- (void)onEmitWithId:(id)event {
  [((ReactSlot *) NIL_CHK(val$outer_)) onEmitWithId:event];
}

- (int)priority {
  return val$priority_;
}

- (id)initWithReactSlot:(ReactSlot *)capture$0
                withInt:(int)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$outer_, self, capture$0);
    val$priority_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$outer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactSlot_$1 *typedCopy = (ReactSlot_$1 *) copy;
  typedCopy.val$outer = val$outer_;
  typedCopy.val$priority = val$priority_;
}

@end
@implementation ReactSlot_$2

- (ReactSlot *)val$before {
  return val$before_;
}
- (void)setVal$before:(ReactSlot *)val$before {
  JreOperatorRetainedAssign(&val$before_, self, val$before);
}
@synthesize val$before = val$before_;
- (ReactSlot *)val$after {
  return val$after_;
}
- (void)setVal$after:(ReactSlot *)val$after {
  JreOperatorRetainedAssign(&val$after_, self, val$after);
}
@synthesize val$after = val$after_;

- (void)onEmitWithId:(id)event {
  [((ReactSlot *) NIL_CHK(val$before_)) onEmitWithId:event];
  [((ReactSlot *) NIL_CHK(val$after_)) onEmitWithId:event];
}

- (id)initWithReactSlot:(ReactSlot *)capture$0
          withReactSlot:(ReactSlot *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$before_, self, capture$0);
    JreOperatorRetainedAssign(&val$after_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$after_, self, nil);
  JreOperatorRetainedAssign(&val$before_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactSlot_$2 *typedCopy = (ReactSlot_$2 *) copy;
  typedCopy.val$before = val$before_;
  typedCopy.val$after = val$after_;
}

@end
