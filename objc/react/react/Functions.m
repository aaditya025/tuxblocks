//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/Functions.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/Boolean.h"
#import "java/lang/Float.h"
#import "java/lang/Integer.h"
#import "java/util/Map.h"
#import "react/Function.h"

@implementation ReactFunctions

static id<ReactFunction> ReactFunctions_NOT_;
static id<ReactFunction> ReactFunctions_TO_STRING_;
static id<ReactFunction> ReactFunctions_FLOAT_VALUE_;
static id<ReactFunction> ReactFunctions_INT_VALUE_;
static id<ReactFunction> ReactFunctions_IDENT_;

+ (id<ReactFunction>)NOT {
  return ReactFunctions_NOT_;
}

+ (void)setNOT:(id<ReactFunction>)NOT {
  JreOperatorRetainedAssign(&ReactFunctions_NOT_, self, NOT);
}

+ (id<ReactFunction>)TO_STRING {
  return ReactFunctions_TO_STRING_;
}

+ (void)setTO_STRING:(id<ReactFunction>)TO_STRING {
  JreOperatorRetainedAssign(&ReactFunctions_TO_STRING_, self, TO_STRING);
}

+ (id<ReactFunction>)FLOAT_VALUE {
  return ReactFunctions_FLOAT_VALUE_;
}

+ (void)setFLOAT_VALUE:(id<ReactFunction>)FLOAT_VALUE {
  JreOperatorRetainedAssign(&ReactFunctions_FLOAT_VALUE_, self, FLOAT_VALUE);
}

+ (id<ReactFunction>)INT_VALUE {
  return ReactFunctions_INT_VALUE_;
}

+ (void)setINT_VALUE:(id<ReactFunction>)INT_VALUE {
  JreOperatorRetainedAssign(&ReactFunctions_INT_VALUE_, self, INT_VALUE);
}

+ (id<ReactFunction>)IDENT {
  return ReactFunctions_IDENT_;
}

+ (id<ReactFunction>)constantWithId:(id)constant {
  return [[[ReactFunctions_$5 alloc] initWithId:constant] autorelease];
}

+ (id<ReactFunction>)greaterThanWithInt:(int)target {
  return [[[ReactFunctions_$6 alloc] initWithInt:target] autorelease];
}

+ (id<ReactFunction>)greaterThanEqualWithInt:(int)target {
  return [[[ReactFunctions_$7 alloc] initWithInt:target] autorelease];
}

+ (id<ReactFunction>)lessThanWithInt:(int)target {
  return [[[ReactFunctions_$8 alloc] initWithInt:target] autorelease];
}

+ (id<ReactFunction>)lessThanEqualWithInt:(int)target {
  return [[[ReactFunctions_$9 alloc] initWithInt:target] autorelease];
}

+ (id<ReactFunction>)forMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)defaultValue {
  return [[[ReactFunctions_$10 alloc] initWithJavaUtilMap:map withId:defaultValue] autorelease];
}

+ (id<ReactFunction>)identity {
  id<ReactFunction> ident = (id<ReactFunction>) ReactFunctions_IDENT_;
  return ident;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ReactFunctions class]) {
    JreOperatorRetainedAssign(&ReactFunctions_NOT_, self, [[[ReactFunctions_$1 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&ReactFunctions_TO_STRING_, self, [[[ReactFunctions_$2 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&ReactFunctions_FLOAT_VALUE_, self, [[[ReactFunctions_$3 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&ReactFunctions_INT_VALUE_, self, [[[ReactFunctions_$4 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&ReactFunctions_IDENT_, self, [[[ReactFunctions_$11 alloc] init] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactFunctions_$1

- (JavaLangBoolean *)applyWithId:(JavaLangBoolean *)value {
  return [JavaLangBoolean valueOfWithBOOL:![((JavaLangBoolean *) NIL_CHK(value)) booleanValue]];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactFunctions_$2

- (NSString *)applyWithId:(id)value {
  return [NSString valueOf:value];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactFunctions_$3

- (JavaLangFloat *)applyWithId:(NSNumber *)value {
  return [JavaLangFloat valueOfWithFloat:[((NSNumber *) NIL_CHK(value)) floatValue]];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactFunctions_$4

- (JavaLangInteger *)applyWithId:(NSNumber *)value {
  return [JavaLangInteger valueOfWithInt:[((NSNumber *) NIL_CHK(value)) intValue]];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactFunctions_$5

- (id)val$constant {
  return val$constant_;
}
- (void)setVal$constant:(id)val$constant {
  JreOperatorRetainedAssign(&val$constant_, self, val$constant);
}
@synthesize val$constant = val$constant_;

- (id)applyWithId:(id)value {
  return val$constant_;
}

- (id)initWithId:(id)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$constant_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$constant_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$5 *typedCopy = (ReactFunctions_$5 *) copy;
  typedCopy.val$constant = val$constant_;
}

@end
@implementation ReactFunctions_$6

@synthesize val$target = val$target_;

- (JavaLangBoolean *)applyWithId:(JavaLangInteger *)value {
  return [JavaLangBoolean valueOfWithBOOL:[((JavaLangInteger *) NIL_CHK(value)) intValue] > val$target_];
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$target_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$6 *typedCopy = (ReactFunctions_$6 *) copy;
  typedCopy.val$target = val$target_;
}

@end
@implementation ReactFunctions_$7

@synthesize val$target = val$target_;

- (JavaLangBoolean *)applyWithId:(JavaLangInteger *)value {
  return [JavaLangBoolean valueOfWithBOOL:[((JavaLangInteger *) NIL_CHK(value)) intValue] >= val$target_];
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$target_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$7 *typedCopy = (ReactFunctions_$7 *) copy;
  typedCopy.val$target = val$target_;
}

@end
@implementation ReactFunctions_$8

@synthesize val$target = val$target_;

- (JavaLangBoolean *)applyWithId:(JavaLangInteger *)value {
  return [JavaLangBoolean valueOfWithBOOL:[((JavaLangInteger *) NIL_CHK(value)) intValue] < val$target_];
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$target_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$8 *typedCopy = (ReactFunctions_$8 *) copy;
  typedCopy.val$target = val$target_;
}

@end
@implementation ReactFunctions_$9

@synthesize val$target = val$target_;

- (JavaLangBoolean *)applyWithId:(JavaLangInteger *)value {
  return [JavaLangBoolean valueOfWithBOOL:[((JavaLangInteger *) NIL_CHK(value)) intValue] <= val$target_];
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$target_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$9 *typedCopy = (ReactFunctions_$9 *) copy;
  typedCopy.val$target = val$target_;
}

@end
@implementation ReactFunctions_$10

- (id<JavaUtilMap>)val$map {
  return val$map_;
}
- (void)setVal$map:(id<JavaUtilMap>)val$map {
  JreOperatorRetainedAssign(&val$map_, self, val$map);
}
@synthesize val$map = val$map_;
- (id)val$defaultValue {
  return val$defaultValue_;
}
- (void)setVal$defaultValue:(id)val$defaultValue {
  JreOperatorRetainedAssign(&val$defaultValue_, self, val$defaultValue);
}
@synthesize val$defaultValue = val$defaultValue_;

- (id)applyWithId:(id)key {
  id value = [((id<JavaUtilMap>) NIL_CHK(val$map_)) getWithId:key];
  return (value != nil || [((id<JavaUtilMap>) NIL_CHK(val$map_)) containsKeyWithId:key]) ? value : val$defaultValue_;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)capture$0
                   withId:(id)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$map_, self, capture$0);
    JreOperatorRetainedAssign(&val$defaultValue_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$defaultValue_, self, nil);
  JreOperatorRetainedAssign(&val$map_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactFunctions_$10 *typedCopy = (ReactFunctions_$10 *) copy;
  typedCopy.val$map = val$map_;
  typedCopy.val$defaultValue = val$defaultValue_;
}

@end
@implementation ReactFunctions_$11

- (id)applyWithId:(id)value {
  return value;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
