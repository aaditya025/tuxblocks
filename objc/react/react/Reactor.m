//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/Reactor.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/NullPointerException.h"
#import "react/Cons.h"

@implementation ReactReactor

static ReactCons * ReactReactor_DISPATCHING_;

- (ReactCons *)_listeners {
  return _listeners_;
}
- (void)set_listeners:(ReactCons *)_listeners {
  JreOperatorRetainedAssign(&_listeners_, self, _listeners);
}
@synthesize _listeners = _listeners_;
- (ReactReactor_Runs *)_pendingRuns {
  return _pendingRuns_;
}
- (void)set_pendingRuns:(ReactReactor_Runs *)_pendingRuns {
  JreOperatorRetainedAssign(&_pendingRuns_, self, _pendingRuns);
}
@synthesize _pendingRuns = _pendingRuns_;

+ (ReactCons *)DISPATCHING {
  return ReactReactor_DISPATCHING_;
}

- (BOOL)hasConnections {
  return _listeners_ != nil;
}

- (ReactCons *)addConnectionWithId:(ReactReactor_RListener *)listener {
  @synchronized(self) {
    {
      if (listener == nil) @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Null listener"] autorelease];
      return [self addConsWithReactCons:[[[ReactCons alloc] initWithReactReactor:self withId:listener] autorelease]];
    }
  }
}

- (ReactCons *)addConsWithReactCons:(ReactCons *)cons {
  @synchronized(self) {
    {
      if ([self isDispatching]) {
        JreOperatorRetainedAssign(&_pendingRuns_, self, [ReactReactor insertWithReactReactor_Runs:_pendingRuns_ withReactReactor_Runs:[[[ReactReactor_$1 alloc] initWithReactReactor:self withReactCons:cons] autorelease]]);
      }
      else {
        JreOperatorRetainedAssign(&_listeners_, self, ((ReactCons *) [ReactCons insertWithReactCons:_listeners_ withReactCons:cons]));
        [self connectionAdded];
      }
      return cons;
    }
  }
}

- (ReactCons *)prepareNotify {
  @synchronized(self) {
    {
      if (_listeners_ == ReactReactor_DISPATCHING_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Initiated notify while notifying"] autorelease];
      ReactCons *lners = _listeners_;
      ReactCons *sentinel = (ReactCons *) ReactReactor_DISPATCHING_;
      JreOperatorRetainedAssign(&_listeners_, self, sentinel);
      return lners;
    }
  }
}

- (void)finishNotifyWithReactCons:(ReactCons *)lners {
  @synchronized(self) {
    {
      JreOperatorRetainedAssign(&_listeners_, self, lners);
      for (; _pendingRuns_ != nil; JreOperatorRetainedAssign(&_pendingRuns_, self, ((ReactReactor_Runs *) NIL_CHK(_pendingRuns_)).next)) {
        [((ReactReactor_Runs *) NIL_CHK(_pendingRuns_)) run];
      }
    }
  }
}

- (void)disconnectWithReactCons:(ReactCons *)cons {
  @synchronized(self) {
    {
      if ([self isDispatching]) {
        JreOperatorRetainedAssign(&_pendingRuns_, self, [ReactReactor insertWithReactReactor_Runs:_pendingRuns_ withReactReactor_Runs:[[[ReactReactor_$2 alloc] initWithReactReactor:self withReactCons:cons] autorelease]]);
      }
      else {
        JreOperatorRetainedAssign(&_listeners_, self, ((ReactCons *) [ReactCons removeWithReactCons:_listeners_ withReactCons:cons]));
        [self connectionRemoved];
      }
    }
  }
}

- (void)removeConnectionWithId:(id)listener {
  @synchronized(self) {
    {
      if ([self isDispatching]) {
        JreOperatorRetainedAssign(&_pendingRuns_, self, [ReactReactor insertWithReactReactor_Runs:_pendingRuns_ withReactReactor_Runs:[[[ReactReactor_$3 alloc] initWithReactReactor:self withId:listener] autorelease]]);
      }
      else {
        JreOperatorRetainedAssign(&_listeners_, self, ((ReactCons *) [ReactCons removeAllWithReactCons:_listeners_ withId:listener]));
        [self connectionRemoved];
      }
    }
  }
}

+ (BOOL)areEqualWithId:(id)o1
                withId:(id)o2 {
  return (o1 == o2 || (o1 != nil && [NIL_CHK(o1) isEqual:o2]));
}

- (void)checkMutate {
}

- (void)connectionAdded {
}

- (void)connectionRemoved {
}

+ (ReactReactor_Runs *)insertWithReactReactor_Runs:(ReactReactor_Runs *)head
                             withReactReactor_Runs:(ReactReactor_Runs *)action {
  if (head == nil) return action;
  ((ReactReactor_Runs *) NIL_CHK(head)).next = [ReactReactor insertWithReactReactor_Runs:((ReactReactor_Runs *) NIL_CHK(head)).next withReactReactor_Runs:action];
  return head;
}

- (BOOL)isDispatching {
  return _listeners_ == ReactReactor_DISPATCHING_;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ReactReactor class]) {
    JreOperatorRetainedAssign(&ReactReactor_DISPATCHING_, self, [[[ReactCons alloc] initWithReactReactor:nil withId:nil] autorelease]);
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_pendingRuns_, self, nil);
  JreOperatorRetainedAssign(&_listeners_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactReactor *typedCopy = (ReactReactor *) copy;
  typedCopy._listeners = _listeners_;
  typedCopy._pendingRuns = _pendingRuns_;
}

@end
@implementation ReactReactor_RListener

- (int)priority {
  return 0;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactReactor_Runs

- (ReactReactor_Runs *)next {
  return next_;
}
- (void)setNext:(ReactReactor_Runs *)next {
  JreOperatorRetainedAssign(&next_, self, next);
}
@synthesize next = next_;

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&next_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactReactor_Runs *typedCopy = (ReactReactor_Runs *) copy;
  typedCopy.next = next_;
}

@end
@implementation ReactReactor_$1

- (ReactReactor *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactReactor *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (ReactCons *)val$cons {
  return val$cons_;
}
- (void)setVal$cons:(ReactCons *)val$cons {
  JreOperatorRetainedAssign(&val$cons_, self, val$cons);
}
@synthesize val$cons = val$cons_;

- (void)run {
  this$0_._listeners = ((ReactCons *) [ReactCons insertWithReactCons:this$0_._listeners withReactCons:val$cons_]);
  [this$0_ connectionAdded];
}

- (id)initWithReactReactor:(ReactReactor *)outer$
             withReactCons:(ReactCons *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$cons_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$cons_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactReactor_$1 *typedCopy = (ReactReactor_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$cons = val$cons_;
}

@end
@implementation ReactReactor_$2

- (ReactReactor *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactReactor *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (ReactCons *)val$cons {
  return val$cons_;
}
- (void)setVal$cons:(ReactCons *)val$cons {
  JreOperatorRetainedAssign(&val$cons_, self, val$cons);
}
@synthesize val$cons = val$cons_;

- (void)run {
  this$0_._listeners = ((ReactCons *) [ReactCons removeWithReactCons:this$0_._listeners withReactCons:val$cons_]);
  [this$0_ connectionRemoved];
}

- (id)initWithReactReactor:(ReactReactor *)outer$
             withReactCons:(ReactCons *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$cons_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$cons_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactReactor_$2 *typedCopy = (ReactReactor_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$cons = val$cons_;
}

@end
@implementation ReactReactor_$3

- (ReactReactor *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactReactor *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id)val$listener {
  return val$listener_;
}
- (void)setVal$listener:(id)val$listener {
  JreOperatorRetainedAssign(&val$listener_, self, val$listener);
}
@synthesize val$listener = val$listener_;

- (void)run {
  this$0_._listeners = ((ReactCons *) [ReactCons removeAllWithReactCons:this$0_._listeners withId:val$listener_]);
  [this$0_ connectionRemoved];
}

- (id)initWithReactReactor:(ReactReactor *)outer$
                    withId:(id)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$listener_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$listener_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactReactor_$3 *typedCopy = (ReactReactor_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$listener = val$listener_;
}

@end
