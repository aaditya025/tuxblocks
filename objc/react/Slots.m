//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/Slots.java
//
//  Created by Thomas on 7/1/13.
//

#import "Slot.h"
#import "UnitSlot.h"
#import "java/io/PrintStream.h"
#import "java/lang/System.h"

@implementation ReactSlots

static ReactUnitSlot * ReactSlots_NOOP_;

+ (ReactUnitSlot *)NOOP {
  return ReactSlots_NOOP_;
}

+ (void)setNOOP:(ReactUnitSlot *)NOOP {
  JreOperatorRetainedAssign(&ReactSlots_NOOP_, self, NOOP);
}

+ (ReactSlot *)traceWithNSString:(NSString *)message
                   withReactSlot:(ReactSlot *)slot {
  return [[[ReactSlots_$2 alloc] initWithNSString:message withReactSlot:slot] autorelease];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ReactSlots class]) {
    JreOperatorRetainedAssign(&ReactSlots_NOOP_, self, [[[ReactSlots_$1 alloc] init] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactSlots_$1

- (void)onEmit {
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactSlots_$2

- (NSString *)val$message {
  return val$message_;
}
- (void)setVal$message:(NSString *)val$message {
  JreOperatorRetainedAssign(&val$message_, self, val$message);
}
@synthesize val$message = val$message_;
- (ReactSlot *)val$slot {
  return val$slot_;
}
- (void)setVal$slot:(ReactSlot *)val$slot {
  JreOperatorRetainedAssign(&val$slot_, self, val$slot);
}
@synthesize val$slot = val$slot_;

- (void)onEmitWithId:(id)value {
  [((JavaIoPrintStream *) NIL_CHK([JavaLangSystem err])) printlnWithNSString:[NSString stringWithFormat:@"%@%@", val$message_, value]];
  [((ReactSlot *) NIL_CHK(val$slot_)) onEmitWithId:value];
}

- (id)initWithNSString:(NSString *)capture$0
         withReactSlot:(ReactSlot *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$message_, self, capture$0);
    JreOperatorRetainedAssign(&val$slot_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$slot_, self, nil);
  JreOperatorRetainedAssign(&val$message_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactSlots_$2 *typedCopy = (ReactSlots_$2 *) copy;
  typedCopy.val$message = val$message_;
  typedCopy.val$slot = val$slot_;
}

@end
