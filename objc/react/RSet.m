//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: react/RSet.java
//
//  Created by Thomas on 7/1/13.
//

#import "Connection.h"
#import "Cons.h"
#import "IOSObjectArray.h"
#import "MultiFailureException.h"
#import "Reactor.h"
#import "Value.h"
#import "ValueView.h"
#import "java/lang/Boolean.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/Throwable.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Set.h"

@implementation ReactRSet

- (id<JavaUtilSet>)_impl {
  return _impl_;
}
- (void)set_impl:(id<JavaUtilSet>)_impl {
  JreOperatorRetainedAssign(&_impl_, self, _impl);
}
@synthesize _impl = _impl_;
- (ReactValue *)_sizeView {
  return _sizeView_;
}
- (void)set_sizeView:(ReactValue *)_sizeView {
  JreOperatorRetainedAssign(&_sizeView_, self, _sizeView);
}
@synthesize _sizeView = _sizeView_;

+ (ReactRSet *)create {
  return ((ReactRSet *) [ReactRSet createWithJavaUtilSet:[[[JavaUtilHashSet alloc] init] autorelease]]);
}

+ (ReactRSet *)createWithJavaUtilSet:(id<JavaUtilSet>)impl {
  return [[[ReactRSet alloc] initWithJavaUtilSet:impl] autorelease];
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)impl {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_impl_, self, impl);
  }
  return self;
}

- (id<ReactConnection>)connectWithReactRSet_Listener:(ReactRSet_Listener *)listener {
  ReactRSet_Listener *casted = (ReactRSet_Listener *) listener;
  return ((ReactCons *) [self addConnectionWithId:casted]);
}

- (void)disconnectWithReactRSet_Listener:(ReactRSet_Listener *)listener {
  ReactRSet_Listener *casted = (ReactRSet_Listener *) listener;
  [self removeConnectionWithId:casted];
}

- (BOOL)addForceWithId:(id)elem {
  [self checkMutate];
  BOOL added = [((id<JavaUtilSet>) NIL_CHK(_impl_)) addWithId:elem];
  [self emitAddWithId:elem];
  return added;
}

- (BOOL)removeForceWithId:(id)elem {
  [self checkMutate];
  BOOL removed = [((id<JavaUtilSet>) NIL_CHK(_impl_)) removeWithId:elem];
  [self emitRemoveWithId:elem];
  return removed;
}

- (id<ReactValueView>)containsViewWithId:(id)elem {
  if (elem == nil) @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Must supply non-null 'elem'."] autorelease];
  return [[[ReactRSet_$1 alloc] initWithReactRSet:self withId:elem] autorelease];
}

- (id<ReactValueView>)sizeView {
  @synchronized(self) {
    {
      if (_sizeView_ == nil) {
        JreOperatorRetainedAssign(&_sizeView_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:[self size]]]));
        (void) [self connectWithReactRSet_Listener:[[[ReactRSet_$2 alloc] initWithReactRSet:self] autorelease]];
      }
      return _sizeView_;
    }
  }
}

- (int)size {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) isEmpty];
}

- (BOOL)containsWithId:(id)key {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) containsWithId:key];
}

- (BOOL)addWithId:(id)elem {
  [self checkMutate];
  if (![((id<JavaUtilSet>) NIL_CHK(_impl_)) addWithId:elem]) return NO;
  [self emitAddWithId:elem];
  return YES;
}

- (BOOL)removeWithId:(id)rawElem {
  [self checkMutate];
  if (![((id<JavaUtilSet>) NIL_CHK(_impl_)) removeWithId:rawElem]) return NO;
  id elem = (id) rawElem;
  [self emitRemoveWithId:elem];
  return YES;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) containsAllWithJavaUtilCollection:coll];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  BOOL modified = NO;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(coll)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id elem = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      modified |= [self addWithId:elem];
    }
  }
  return modified;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  BOOL modified = NO;
  for (id<JavaUtilIterator> iter = [self iterator]; [((id<JavaUtilIterator>) NIL_CHK(iter)) hasNext]; ) {
    if (![((id<JavaUtilCollection>) NIL_CHK(coll)) containsWithId:[((id<JavaUtilIterator>) NIL_CHK(iter)) next]]) {
      [((id<JavaUtilIterator>) NIL_CHK(iter)) remove];
      modified = YES;
    }
  }
  return modified;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  BOOL modified = NO;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) NIL_CHK(coll)) iterator]; [((id<JavaUtilIterator>) NIL_CHK(iter)) hasNext]; ) {
    modified |= [self removeWithId:[((id<JavaUtilIterator>) NIL_CHK(iter)) next]];
  }
  return modified;
}

- (void)clear {
  [self checkMutate];
  id<JavaUtilList> elems = [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:_impl_] autorelease];
  [((id<JavaUtilSet>) NIL_CHK(_impl_)) clear];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(elems)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id elem = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      [self emitRemoveWithId:elem];
    }
  }
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> iiter = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(_impl_)) iterator]);
  return [[[ReactRSet_$3 alloc] initWithReactRSet:self withJavaUtilIterator:iiter] autorelease];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) toArrayWithNSObjectArray:array];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) NIL_CHK(_impl_)) hash];
}

- (BOOL)isEqual:(id)other {
  return ([other conformsToProtocol: @protocol(JavaUtilSet)]) ? [((id<JavaUtilSet>) NIL_CHK(_impl_)) isEqual:other] : NO;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"RSet%@", _impl_];
}

- (void)emitAddWithId:(id)elem {
  [self notifyAddWithId:elem];
}

- (void)notifyAddWithId:(id)elem {
  ReactCons *lners = ((ReactCons *) [self prepareNotify]);
  ReactMultiFailureException *error = nil;
  @try {
    for (ReactCons * cons = lners; cons != nil; cons = ((ReactCons *) NIL_CHK(cons)).next) {
      @try {
        [((ReactRSet_Listener *) NIL_CHK(cons.listener)) onAddWithId:elem];
      }
      @catch (JavaLangThrowable *t) {
        if (error == nil) error = [[[ReactMultiFailureException alloc] init] autorelease];
        [((ReactMultiFailureException *) NIL_CHK(error)) addFailureWithJavaLangThrowable:t];
      }
      if (((ReactCons *) NIL_CHK(cons)).oneShot) [((ReactCons *) NIL_CHK(cons)) disconnect];
    }
  }
  @finally {
    [self finishNotifyWithReactCons:lners];
  }
  if (error != nil) [error trigger];
}

- (void)emitRemoveWithId:(id)elem {
  [self notifyRemoveWithId:elem];
}

- (void)notifyRemoveWithId:(id)elem {
  ReactCons *lners = ((ReactCons *) [self prepareNotify]);
  ReactMultiFailureException *error = nil;
  @try {
    for (ReactCons * cons = lners; cons != nil; cons = ((ReactCons *) NIL_CHK(cons)).next) {
      @try {
        [((ReactRSet_Listener *) NIL_CHK(cons.listener)) onRemoveWithId:elem];
      }
      @catch (JavaLangThrowable *t) {
        if (error == nil) error = [[[ReactMultiFailureException alloc] init] autorelease];
        [((ReactMultiFailureException *) NIL_CHK(error)) addFailureWithJavaLangThrowable:t];
      }
      if (((ReactCons *) NIL_CHK(cons)).oneShot) [((ReactCons *) NIL_CHK(cons)) disconnect];
    }
  }
  @finally {
    [self finishNotifyWithReactCons:lners];
  }
  if (error != nil) [error trigger];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_sizeView_, self, nil);
  JreOperatorRetainedAssign(&_impl_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRSet *typedCopy = (ReactRSet *) copy;
  typedCopy._impl = _impl_;
  typedCopy._sizeView = _sizeView_;
}

@end
@implementation ReactRSet_$1

- (ReactRSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactRSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id)val$elem {
  return val$elem_;
}
- (void)setVal$elem:(id)val$elem {
  JreOperatorRetainedAssign(&val$elem_, self, val$elem);
}
@synthesize val$elem = val$elem_;

- (JavaLangBoolean *)get {
  return [JavaLangBoolean valueOfWithBOOL:[this$0_ containsWithId:val$elem_]];
}

- (id<ReactConnection>)connect {
  return [this$0_ connectWithReactRSet_Listener:[[[ReactRSet_$1_$1 alloc] initWithReactRSet_$1:self] autorelease]];
}

- (id)initWithReactRSet:(ReactRSet *)outer$
                 withId:(id)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$elem_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$elem_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRSet_$1 *typedCopy = (ReactRSet_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$elem = val$elem_;
}

@end
@implementation ReactRSet_Listener

- (void)onAddWithId:(id)elem {
}

- (void)onRemoveWithId:(id)elem {
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ReactRSet_$1_$1

- (ReactRSet_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactRSet_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onAddWithId:(id)aelem {
  if ([NIL_CHK(this$0_.val$elem) isEqual:aelem]) [this$0_ notifyChangeWithId:[JavaLangBoolean valueOfWithBOOL:YES] withId:[JavaLangBoolean valueOfWithBOOL:NO]];
}

- (void)onRemoveWithId:(id)relem {
  if ([NIL_CHK(this$0_.val$elem) isEqual:relem]) [this$0_ notifyChangeWithId:[JavaLangBoolean valueOfWithBOOL:NO] withId:[JavaLangBoolean valueOfWithBOOL:YES]];
}

- (id)initWithReactRSet_$1:(ReactRSet_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRSet_$1_$1 *typedCopy = (ReactRSet_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation ReactRSet_$2

- (ReactRSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactRSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onAddWithId:(id)elem {
  (void) [((ReactValue *) NIL_CHK(this$0_._sizeView)) updateWithId:[JavaLangInteger valueOfWithInt:[this$0_ size]]];
}

- (void)onRemoveWithId:(id)elem {
  (void) [((ReactValue *) NIL_CHK(this$0_._sizeView)) updateWithId:[JavaLangInteger valueOfWithInt:[this$0_ size]]];
}

- (id)initWithReactRSet:(ReactRSet *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRSet_$2 *typedCopy = (ReactRSet_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation ReactRSet_$3

- (ReactRSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ReactRSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id)_current {
  return _current_;
}
- (void)set_current:(id)_current {
  JreOperatorRetainedAssign(&_current_, self, _current);
}
@synthesize _current = _current_;
- (id<JavaUtilIterator>)val$iiter {
  return val$iiter_;
}
- (void)setVal$iiter:(id<JavaUtilIterator>)val$iiter {
  JreOperatorRetainedAssign(&val$iiter_, self, val$iiter);
}
@synthesize val$iiter = val$iiter_;

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) NIL_CHK(val$iiter_)) hasNext];
}

- (id)next {
  return (JreOperatorRetainedAssign(&_current_, self, [((id<JavaUtilIterator>) NIL_CHK(val$iiter_)) next]));
}

- (void)remove {
  [this$0_ checkMutate];
  [((id<JavaUtilIterator>) NIL_CHK(val$iiter_)) remove];
  [this$0_ emitRemoveWithId:_current_];
}

- (id)initWithReactRSet:(ReactRSet *)outer$
   withJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$iiter_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$iiter_, self, nil);
  JreOperatorRetainedAssign(&_current_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ReactRSet_$3 *typedCopy = (ReactRSet_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._current = _current_;
  typedCopy.val$iiter = val$iiter_;
}

@end
