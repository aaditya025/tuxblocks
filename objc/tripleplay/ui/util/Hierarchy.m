//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/util/Hierarchy.java
//
//  Created by Thomas on 7/1/13.
//

#import "Element.h"
#import "ElementOp.h"
#import "Elements.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/Iterable.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/Iterator.h"

@implementation TripleplayUiUtilHierarchy

- (TripleplayUiElement *)elem {
  return elem_;
}
- (void)setElem:(TripleplayUiElement *)elem {
  JreOperatorRetainedAssign(&elem_, self, elem);
}
@synthesize elem = elem_;

+ (TripleplayUiUtilHierarchy *)ofWithTripleplayUiElement:(TripleplayUiElement *)elem {
  return [[[TripleplayUiUtilHierarchy alloc] initWithTripleplayUiElement:elem] autorelease];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)elem {
  if ((self = [super init])) {
    self.elem = elem;
  }
  return self;
}

- (BOOL)hasDescendantWithTripleplayUiElement:(TripleplayUiElement *)descendant {
  if (descendant == elem_) return YES;
  if (descendant == nil) return NO;
  return [self hasDescendantWithTripleplayUiElement:[((TripleplayUiElement *) NIL_CHK(descendant)) parent]];
}

- (id<JavaLangIterable>)ancestors {
  return [[[TripleplayUiUtilHierarchy_$1 alloc] initWithTripleplayUiUtilHierarchy:self] autorelease];
}

- (TripleplayUiUtilHierarchy *)applyWithTripleplayUiUtilElementOp:(TripleplayUiUtilElementOp *)op {
  [TripleplayUiUtilHierarchy forEachDescendantWithTripleplayUiElement:elem_ withTripleplayUiUtilElementOp:op];
  return self;
}

+ (void)forEachDescendantWithTripleplayUiElement:(TripleplayUiElement *)root
                   withTripleplayUiUtilElementOp:(TripleplayUiUtilElementOp *)op {
  [((TripleplayUiUtilElementOp *) NIL_CHK(op)) applyWithId:root];
  if ([root isKindOfClass:[TripleplayUiElements class]]) {
    TripleplayUiElements *es = (TripleplayUiElements *) root;
    for (int ii = 0, ll = [((TripleplayUiElements *) NIL_CHK(es)) childCount]; ii < ll; ++ii) {
      [TripleplayUiUtilHierarchy forEachDescendantWithTripleplayUiElement:[((TripleplayUiElements *) NIL_CHK(es)) childAtWithInt:ii] withTripleplayUiUtilElementOp:op];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&elem_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy *typedCopy = (TripleplayUiUtilHierarchy *) copy;
  typedCopy.elem = elem_;
}

@end
@implementation TripleplayUiUtilHierarchy_Ancestors

- (TripleplayUiElement *)current {
  return current_;
}
- (void)setCurrent:(TripleplayUiElement *)current {
  JreOperatorRetainedAssign(&current_, self, current);
}
@synthesize current = current_;

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)elem {
  if ((self = [super init])) {
    if (elem == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    JreOperatorRetainedAssign(&current_, self, elem);
  }
  return self;
}

- (BOOL)hasNext {
  return current_ != nil;
}

- (TripleplayUiElement *)next {
  TripleplayUiElement *next = current_;
  if (![self hasNext]) {
    @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  }
  JreOperatorRetainedAssign(&current_, self, [((TripleplayUiElement *) NIL_CHK(current_)) parent]);
  return next;
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&current_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy_Ancestors *typedCopy = (TripleplayUiUtilHierarchy_Ancestors *) copy;
  typedCopy.current = current_;
}

@end
@implementation TripleplayUiUtilHierarchy_$1

- (TripleplayUiUtilHierarchy *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiUtilHierarchy *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (id<JavaUtilIterator>)iterator {
  return [[[TripleplayUiUtilHierarchy_Ancestors alloc] initWithTripleplayUiElement:this$0_.elem] autorelease];
}

- (id)initWithTripleplayUiUtilHierarchy:(TripleplayUiUtilHierarchy *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiUtilHierarchy_$1 *typedCopy = (TripleplayUiUtilHierarchy_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
