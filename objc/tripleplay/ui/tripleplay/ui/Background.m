//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Background.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Float.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "pythagoras/f/Dimension.h"
#import "pythagoras/f/IDimension.h"
#import "pythagoras/f/Transform.h"
#import "tripleplay/ui/bgs/BeveledBackground.h"
#import "tripleplay/ui/bgs/BlankBackground.h"
#import "tripleplay/ui/bgs/BorderedBackground.h"
#import "tripleplay/ui/bgs/CenteredImageBackground.h"
#import "tripleplay/ui/bgs/CompositeBackground.h"
#import "tripleplay/ui/bgs/ImageBackground.h"
#import "tripleplay/ui/bgs/RoundRectBackground.h"
#import "tripleplay/ui/bgs/Scale9Background.h"
#import "tripleplay/ui/bgs/SolidBackground.h"

@implementation TripleplayUiBackground

@synthesize top = top_;
@synthesize right = right_;
@synthesize bottom = bottom_;
@synthesize left = left_;
- (JavaLangFloat *)alpha_ {
  return alpha__;
}
- (void)setAlpha_:(JavaLangFloat *)alpha_ {
  JreOperatorRetainedAssign(&alpha__, self, alpha_);
}
@synthesize alpha_ = alpha__;

+ (float)BACKGROUND_DEPTH {
  return TripleplayUiBackground_BACKGROUND_DEPTH;
}

+ (TripleplayUiBackground *)blank {
  return [[[TripleplayUiBgsBlankBackground alloc] init] autorelease];
}

+ (TripleplayUiBackground *)solidWithInt:(int)color {
  return [[[TripleplayUiBgsSolidBackground alloc] initWithInt:color] autorelease];
}

+ (TripleplayUiBackground *)beveledWithInt:(int)bgColor
                                   withInt:(int)ulColor
                                   withInt:(int)brColor {
  return [[[TripleplayUiBgsBeveledBackground alloc] initWithInt:bgColor withInt:ulColor withInt:brColor] autorelease];
}

+ (TripleplayUiBackground *)borderedWithInt:(int)bgColor
                                    withInt:(int)color
                                  withFloat:(float)thickness {
  return [[[TripleplayUiBgsBorderedBackground alloc] initWithInt:bgColor withInt:color withFloat:thickness] autorelease];
}

+ (TripleplayUiBackground *)roundRectWithInt:(int)bgColor
                                   withFloat:(float)cornerRadius {
  return [[[TripleplayUiBgsRoundRectBackground alloc] initWithInt:bgColor withFloat:cornerRadius] autorelease];
}

+ (TripleplayUiBackground *)roundRectWithInt:(int)bgColor
                                   withFloat:(float)cornerRadius
                                     withInt:(int)borderColor
                                   withFloat:(float)borderWidth {
  return [[[TripleplayUiBgsRoundRectBackground alloc] initWithInt:bgColor withFloat:cornerRadius withInt:borderColor withFloat:borderWidth] autorelease];
}

+ (TripleplayUiBackground *)imageWithPlaynCoreImage:(id<PlaynCoreImage>)bgimage {
  return [[[TripleplayUiBgsImageBackground alloc] initWithPlaynCoreImage:bgimage] autorelease];
}

+ (TripleplayUiBackground *)centeredImageWithPlaynCoreImage:(id<PlaynCoreImage>)bgimage {
  return [[[TripleplayUiBgsCenteredImageBackground alloc] initWithPlaynCoreImage:bgimage] autorelease];
}

+ (TripleplayUiBackground *)scale9WithPlaynCoreImage:(id<PlaynCoreImage>)scale9Image {
  return [[[TripleplayUiBgsScale9Background alloc] initWithPlaynCoreImage:scale9Image] autorelease];
}

+ (TripleplayUiBackground *)compositeWithTripleplayUiBackgroundArray:(IOSObjectArray *)constituents {
  return [[[TripleplayUiBgsCompositeBackground alloc] initWithTripleplayUiBackgroundArray:constituents] autorelease];
}

+ (TripleplayUiBackground_Instance *)instantiateWithTripleplayUiBackground:(TripleplayUiBackground *)delegate
                                                 withPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  return [((TripleplayUiBackground *) NIL_CHK(delegate)) instantiateWithPythagorasFIDimension:size];
}

- (float)width {
  return left_ + right_;
}

- (float)height {
  return top_ + bottom_;
}

- (TripleplayUiBackground *)insetWithFloat:(float)uniformInset {
  self.top = uniformInset;
  self.right = uniformInset;
  self.bottom = uniformInset;
  self.left = uniformInset;
  return self;
}

- (TripleplayUiBackground *)insetWithFloat:(float)horiz
                                 withFloat:(float)vert {
  self.top = vert;
  self.right = horiz;
  self.bottom = vert;
  self.left = horiz;
  return self;
}

- (TripleplayUiBackground *)insetWithFloat:(float)top
                                 withFloat:(float)right
                                 withFloat:(float)bottom
                                 withFloat:(float)left {
  self.top = top;
  self.right = right;
  self.bottom = bottom;
  self.left = left;
  return self;
}

- (TripleplayUiBackground *)insetLeftWithFloat:(float)left {
  self.left = left;
  return self;
}

- (TripleplayUiBackground *)insetRightWithFloat:(float)right {
  self.right = right;
  return self;
}

- (TripleplayUiBackground *)insetTopWithFloat:(float)top {
  self.top = top;
  return self;
}

- (TripleplayUiBackground *)insetBottomWithFloat:(float)bottom {
  self.bottom = bottom;
  return self;
}

- (TripleplayUiBackground *)alphaWithFloat:(float)alpha {
  self.alpha_ = [JavaLangFloat valueOfWithFloat:alpha];
  return self;
}

- (PythagorasFDimension *)addInsetsWithPythagorasFDimension:(PythagorasFDimension *)size {
  ((PythagorasFDimension *) NIL_CHK(size)).width_ += [self width];
  ((PythagorasFDimension *) NIL_CHK(size)).height_ += [self height];
  return size;
}

- (TripleplayUiBackground_Instance *)instantiateWithPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<PlaynCoreLayer>)createSolidLayerWithInt:(int)color
                                    withFloat:(float)width
                                    withFloat:(float)height {
  return [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[[TripleplayUiBackground_$1 alloc] initWithTripleplayUiBackground:self withInt:color withFloat:width withFloat:height] autorelease]];
}

- (id<PlaynCoreLayer>)createTiledLayerWithPlaynCoreImage:(id<PlaynCoreImage>)image
                                               withFloat:(float)width
                                               withFloat:(float)height {
  [((id<PlaynCoreImage>) NIL_CHK(image)) setRepeatWithBOOL:YES withBOOL:YES];
  id<PlaynCoreImageLayer> layer = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:image];
  if (alpha__ != nil) (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setAlphaWithFloat:[alpha__ floatValue]];
  return layer;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&alpha__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBackground *typedCopy = (TripleplayUiBackground *) copy;
  typedCopy.top = top_;
  typedCopy.right = right_;
  typedCopy.bottom = bottom_;
  typedCopy.left = left_;
  typedCopy.alpha_ = alpha__;
}

@end
@implementation TripleplayUiBackground_Instance

- (TripleplayUiBackground *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiBackground *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PythagorasFIDimension>)size {
  return size_;
}
- (void)setSize:(id<PythagorasFIDimension>)size {
  JreOperatorRetainedAssign(&size_, self, size);
}
@synthesize size = size_;

- (TripleplayUiBackground *)owner {
  return this$0_;
}

- (void)addToWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent
                           withFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)depthAdjust {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)destroy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)initWithTripleplayUiBackground:(TripleplayUiBackground *)outer$
           withPythagorasFIDimension:(id<PythagorasFIDimension>)size {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    self.size = [[[PythagorasFDimension alloc] initWithPythagorasFIDimension:size] autorelease];
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&size_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBackground_Instance *typedCopy = (TripleplayUiBackground_Instance *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.size = size_;
}

@end
@implementation TripleplayUiBackground_LayerInstance

- (IOSObjectArray *)_layers {
  return _layers_;
}
- (void)set_layers:(IOSObjectArray *)_layers {
  JreOperatorRetainedAssign(&_layers_, self, _layers);
}
@synthesize _layers = _layers_;

- (id)initTripleplayUiBackground_LayerInstanceWithTripleplayUiBackground:(TripleplayUiBackground *)outer$
                                               withPythagorasFIDimension:(id<PythagorasFIDimension>)size
                                                 withPlaynCoreLayerArray:(IOSObjectArray *)layers {
  if ((self = [super initWithTripleplayUiBackground:outer$ withPythagorasFIDimension:size])) {
    JreOperatorRetainedAssign(&_layers_, self, layers);
  }
  return self;
}

- (id)initWithTripleplayUiBackground:(TripleplayUiBackground *)outer$
           withPythagorasFIDimension:(id<PythagorasFIDimension>)size
             withPlaynCoreLayerArray:(IOSObjectArray *)layers {
  return [self initTripleplayUiBackground_LayerInstanceWithTripleplayUiBackground:outer$ withPythagorasFIDimension:size withPlaynCoreLayerArray:layers];
}

- (id)initWithTripleplayUiBackground:(TripleplayUiBackground *)outer$
           withPythagorasFIDimension:(id<PythagorasFIDimension>)size
withPlaynCoreImmediateLayer_Renderer:(id<PlaynCoreImmediateLayer_Renderer>)renderer {
  return [self initTripleplayUiBackground_LayerInstanceWithTripleplayUiBackground:outer$ withPythagorasFIDimension:size withPlaynCoreLayerArray:[IOSObjectArray arrayWithType:[IOSClass classWithProtocol:@protocol(PlaynCoreLayer)] count:1, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:renderer] ]];
}

- (void)addToWithPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent
                           withFloat:(float)x
                           withFloat:(float)y
                           withFloat:(float)depthAdjust {
  {
    IOSObjectArray *a__ = _layers_;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id<PlaynCoreLayer> layer = ((id<PlaynCoreLayer>) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      (void) [((id<PlaynCoreLayer>) NIL_CHK(layer)) setDepthWithFloat:TripleplayUiBackground_BACKGROUND_DEPTH + depthAdjust];
      (void) [((id<PythagorasFTransform>) [((id<PlaynCoreLayer>) NIL_CHK(layer)) transform]) translateWithFloat:x withFloat:y];
      [((id<PlaynCoreGroupLayer>) NIL_CHK(parent)) addWithPlaynCoreLayer:layer];
    }
  }
}

- (void)destroy {
  {
    IOSObjectArray *a__ = _layers_;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id<PlaynCoreLayer> layer = ((id<PlaynCoreLayer>) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [((id<PlaynCoreLayer>) NIL_CHK(layer)) destroy];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_layers_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBackground_LayerInstance *typedCopy = (TripleplayUiBackground_LayerInstance *) copy;
  typedCopy._layers = _layers_;
}

@end
@implementation TripleplayUiBackground_$1

- (TripleplayUiBackground *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiBackground *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$color = val$color_;
@synthesize val$width = val$width_;
@synthesize val$height = val$height_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surf {
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:[this$0_.alpha_ floatValue]];
  (void) [((id<PlaynCoreSurface>) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setFillColorWithInt:val$color_]) fillRectWithFloat:0 withFloat:0 withFloat:val$width_ withFloat:val$height_];
  if (this$0_.alpha_ != nil) (void) [((id<PlaynCoreSurface>) NIL_CHK(surf)) setAlphaWithFloat:1];
}

- (id)initWithTripleplayUiBackground:(TripleplayUiBackground *)outer$
                             withInt:(int)capture$0
                           withFloat:(float)capture$1
                           withFloat:(float)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$color_ = capture$0;
    val$width_ = capture$1;
    val$height_ = capture$2;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiBackground_$1 *typedCopy = (TripleplayUiBackground_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$color = val$color_;
  typedCopy.val$width = val$width_;
  typedCopy.val$height = val$height_;
}

@end
