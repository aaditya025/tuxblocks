//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Element.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Math.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "pythagoras/f/Dimension.h"
#import "pythagoras/f/IDimension.h"
#import "pythagoras/f/MathUtil.h"
#import "pythagoras/f/Point.h"
#import "pythagoras/f/Rectangle.h"
#import "react/Signal.h"
#import "react/SignalView.h"
#import "react/Slot.h"
#import "react/UnitSlot.h"
#import "tripleplay/ui/Background.h"
#import "tripleplay/ui/Elements.h"
#import "tripleplay/ui/Layout.h"
#import "tripleplay/ui/Root.h"
#import "tripleplay/ui/Style.h"
#import "tripleplay/ui/Styles.h"
#import "tripleplay/util/Ref.h"

@implementation TripleplayUiElement

- (id<PlaynCoreGroupLayer>)layer {
  return layer_;
}
- (void)setLayer:(id<PlaynCoreGroupLayer>)layer {
  JreOperatorRetainedAssign(&layer_, self, layer);
}
@synthesize layer = layer_;
@synthesize _flags = _flags_;
- (TripleplayUiElements *)_parent {
  return _parent_;
}
- (void)set_parent:(TripleplayUiElements *)_parent {
  JreOperatorRetainedAssign(&_parent_, self, _parent);
}
@synthesize _parent = _parent_;
- (PythagorasFDimension *)_preferredSize {
  return _preferredSize_;
}
- (void)set_preferredSize:(PythagorasFDimension *)_preferredSize {
  JreOperatorRetainedAssign(&_preferredSize_, self, _preferredSize);
}
@synthesize _preferredSize = _preferredSize_;
- (PythagorasFDimension *)_size {
  return _size_;
}
- (void)set_size:(PythagorasFDimension *)_size {
  JreOperatorRetainedAssign(&_size_, self, _size);
}
@synthesize _size = _size_;
- (TripleplayUiStyles *)_styles {
  return _styles_;
}
- (void)set_styles:(TripleplayUiStyles *)_styles {
  JreOperatorRetainedAssign(&_styles_, self, _styles);
}
@synthesize _styles = _styles_;
- (TripleplayUiLayout_Constraint *)_constraint {
  return _constraint_;
}
- (void)set_constraint:(TripleplayUiLayout_Constraint *)_constraint {
  JreOperatorRetainedAssign(&_constraint_, self, _constraint);
}
@synthesize _constraint = _constraint_;
- (ReactSignal *)_hierarchyChanged {
  return _hierarchyChanged_;
}
- (void)set_hierarchyChanged:(ReactSignal *)_hierarchyChanged {
  JreOperatorRetainedAssign(&_hierarchyChanged_, self, _hierarchyChanged);
}
@synthesize _hierarchyChanged = _hierarchyChanged_;
- (TripleplayUiElement_LayoutData *)_ldata {
  return _ldata_;
}
- (void)set_ldata:(TripleplayUiElement_LayoutData *)_ldata {
  JreOperatorRetainedAssign(&_ldata_, self, _ldata);
}
@synthesize _ldata = _ldata_;
- (TripleplayUtilRef *)_bginst {
  return _bginst_;
}
- (void)set_bginst:(TripleplayUtilRef *)_bginst {
  JreOperatorRetainedAssign(&_bginst_, self, _bginst);
}
@synthesize _bginst = _bginst_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&layer_, self, [self createLayer]);
    _flags_ = ((TripleplayUiElement_FlagEnum *) NIL_CHK([TripleplayUiElement_FlagEnum VISIBLE])).mask | ((TripleplayUiElement_FlagEnum *) NIL_CHK([TripleplayUiElement_FlagEnum ENABLED])).mask;
    JreOperatorRetainedAssign(&_size_, self, [[[PythagorasFDimension alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_styles_, self, [TripleplayUiStyles none]);
    JreOperatorRetainedAssign(&_bginst_, self, ((TripleplayUtilRef *) [TripleplayUtilRef createWithId:nil]));
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) setHitTesterWithPlaynCoreLayer_HitTester:[[[TripleplayUiElement_$1 alloc] initWithTripleplayUiElement:self] autorelease]];
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum HIT_DESCEND] withBOOL:YES];
  }
  return self;
}

- (float)x {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) tx];
}

- (float)y {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) ty];
}

- (id<PythagorasFIDimension>)size {
  return _size_;
}

- (PythagorasFPoint *)locationWithPythagorasFPoint:(PythagorasFPoint *)loc {
  return [((PythagorasFPoint *) NIL_CHK(loc)) setWithFloat:[self x] withFloat:[self y]];
}

- (PythagorasFRectangle *)boundsWithPythagorasFRectangle:(PythagorasFRectangle *)bounds {
  [((PythagorasFRectangle *) NIL_CHK(bounds)) setBoundsWithFloat:[self x] withFloat:[self y] withFloat:((PythagorasFDimension *) NIL_CHK(_size_)).width_ withFloat:((PythagorasFDimension *) NIL_CHK(_size_)).height_];
  return bounds;
}

- (TripleplayUiElements *)parent {
  return _parent_;
}

- (id<ReactSignalView>)hierarchyChanged {
  if (_hierarchyChanged_ == nil) JreOperatorRetainedAssign(&_hierarchyChanged_, self, ((ReactSignal *) [ReactSignal create]));
  return _hierarchyChanged_;
}

- (TripleplayUiStyles *)styles {
  return _styles_;
}

- (id)setStylesWithTripleplayUiStyles:(TripleplayUiStyles *)styles {
  JreOperatorRetainedAssign(&_styles_, self, styles);
  [self clearLayoutData];
  [self invalidate];
  return [self asT];
}

- (id)setStylesWithTripleplayUiStyle_BindingArray:(IOSObjectArray *)styles {
  return [self setStylesWithTripleplayUiStyles:[TripleplayUiStyles makeWithTripleplayUiStyle_BindingArray:styles]];
}

- (id)addStylesWithTripleplayUiStyles:(TripleplayUiStyles *)styles {
  JreOperatorRetainedAssign(&_styles_, self, [((TripleplayUiStyles *) NIL_CHK(_styles_)) mergeWithTripleplayUiStyles:styles]);
  [self clearLayoutData];
  [self invalidate];
  return [self asT];
}

- (id)addStylesWithTripleplayUiStyle_BindingArray:(IOSObjectArray *)styles {
  return [self addStylesWithTripleplayUiStyles:[TripleplayUiStyles makeWithTripleplayUiStyle_BindingArray:styles]];
}

- (id)asT {
  return (TripleplayUiElement *) self;
}

- (BOOL)isEnabled {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum ENABLED]];
}

- (id)setEnabledWithBOOL:(BOOL)enabled {
  if (enabled != [self isEnabled]) {
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum ENABLED] withBOOL:enabled];
    [self clearLayoutData];
    [self invalidate];
  }
  return [self asT];
}

- (ReactSlot *)enabledSlot {
  return [[[TripleplayUiElement_$2 alloc] initWithTripleplayUiElement:self] autorelease];
}

- (BOOL)isVisible {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VISIBLE]];
}

- (id)setVisibleWithBOOL:(BOOL)visible {
  if (visible != [self isVisible]) {
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VISIBLE] withBOOL:visible];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) setVisibleWithBOOL:visible];
    [self invalidate];
  }
  return [self asT];
}

- (ReactSlot *)visibleSlot {
  return [[[TripleplayUiElement_$3 alloc] initWithTripleplayUiElement:self] autorelease];
}

- (BOOL)isShowing {
  TripleplayUiElements *parent;
  return [self isVisible] && ((parent = [self parent]) != nil) && [((TripleplayUiElements *) NIL_CHK(parent)) isShowing];
}

- (TripleplayUiLayout_Constraint *)constraint {
  return _constraint_;
}

- (id)setConstraintWithTripleplayUiLayout_Constraint:(TripleplayUiLayout_Constraint *)constraint {
  if (constraint != nil) [constraint setElementWithTripleplayUiElement:self];
  JreOperatorRetainedAssign(&_constraint_, self, constraint);
  [self invalidate];
  return [self asT];
}

- (BOOL)isAdded {
  return [self root] != nil;
}

- (IOSClass *)getStyleClass {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)wasParentedWithTripleplayUiElements:(TripleplayUiElements *)parent {
  JreOperatorRetainedAssign(&_parent_, self, parent);
}

- (void)wasUnparented {
  JreOperatorRetainedAssign(&_parent_, self, nil);
}

- (void)wasAdded {
  if (_hierarchyChanged_ != nil) [_hierarchyChanged_ emitWithId:[JavaLangBoolean getTRUE]];
  [self invalidate];
  [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_ADDING] withBOOL:NO];
}

- (void)wasRemoved {
  [((TripleplayUtilRef *) NIL_CHK(_bginst_)) clear];
  if (_hierarchyChanged_ != nil) [_hierarchyChanged_ emitWithId:[JavaLangBoolean getFALSE]];
  [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_REMOVING] withBOOL:NO];
}

- (BOOL)containsWithFloat:(float)x
                withFloat:(float)y {
  return !(x < 0 || x > ((PythagorasFDimension *) NIL_CHK(_size_)).width_ || y < 0 || y > ((PythagorasFDimension *) NIL_CHK(_size_)).height_);
}

- (BOOL)isSelected {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum SELECTED]];
}

- (void)invalidate {
  JreOperatorRetainedAssign(&_preferredSize_, self, nil);
  if ([self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VALID]]) {
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VALID] withBOOL:NO];
    if (_parent_ != nil) {
      [_parent_ invalidate];
    }
  }
}

- (ReactUnitSlot *)invalidateSlot {
  return [self invalidateSlotWithBOOL:NO];
}

- (ReactUnitSlot *)invalidateSlotWithBOOL:(BOOL)styles {
  return [[[TripleplayUiElement_$4 alloc] initWithTripleplayUiElement:self withBOOL:styles] autorelease];
}

- (void)validate {
  if (![self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VALID]]) {
    [self layout];
    [self setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum VALID] withBOOL:YES];
  }
}

- (TripleplayUiRoot *)root {
  return (_parent_ == nil) ? nil : [((TripleplayUiElements *) NIL_CHK(_parent_)) root];
}

- (BOOL)isSetWithTripleplayUiElement_FlagEnum:(TripleplayUiElement_FlagEnum *)flag {
  return (((TripleplayUiElement_FlagEnum *) NIL_CHK(flag)).mask & _flags_) != 0;
}

- (void)setWithTripleplayUiElement_FlagEnum:(TripleplayUiElement_FlagEnum *)flag
                                   withBOOL:(BOOL)on {
  if (on) {
    _flags_ |= ((TripleplayUiElement_FlagEnum *) NIL_CHK(flag)).mask;
  }
  else {
    _flags_ &= ~((TripleplayUiElement_FlagEnum *) NIL_CHK(flag)).mask;
  }
}

- (id<PythagorasFIDimension>)preferredSizeWithFloat:(float)hintX
                                          withFloat:(float)hintY {
  if (_preferredSize_ == nil) {
    PythagorasFDimension *psize = [self computeSizeWithFloat:hintX withFloat:hintY];
    if (_constraint_ != nil) [_constraint_ adjustPreferredSizeWithPythagorasFDimension:psize withFloat:hintX withFloat:hintY];
    ((PythagorasFDimension *) NIL_CHK(psize)).width_ = [PythagorasFMathUtil iceilWithFloat:((PythagorasFDimension *) NIL_CHK(psize)).width_];
    ((PythagorasFDimension *) NIL_CHK(psize)).height_ = [PythagorasFMathUtil iceilWithFloat:((PythagorasFDimension *) NIL_CHK(psize)).height_];
    JreOperatorRetainedAssign(&_preferredSize_, self, psize);
  }
  return _preferredSize_;
}

- (void)setLocationWithFloat:(float)x
                   withFloat:(float)y {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) setTranslationWithFloat:[PythagorasFMathUtil ifloorWithFloat:x] withFloat:[PythagorasFMathUtil ifloorWithFloat:y]];
}

- (id)setSizeWithFloat:(float)width
             withFloat:(float)height {
  BOOL changed = ((PythagorasFDimension *) NIL_CHK(_size_)).width_ != width || ((PythagorasFDimension *) NIL_CHK(_size_)).height_ != height;
  [((PythagorasFDimension *) NIL_CHK(_size_)) setSizeWithFloat:width withFloat:height];
  if (_preferredSize_ != nil && ![((PythagorasFDimension *) NIL_CHK(_size_)) isEqual:_preferredSize_]) [self clearLayoutData];
  if (changed) [self invalidate];
  return [self asT];
}

- (id)resolveStyleWithTripleplayUiStyle:(TripleplayUiStyle *)style {
  return [TripleplayUiStyles resolveStyleWithTripleplayUiElement:self withTripleplayUiStyle:style];
}

- (PythagorasFDimension *)computeSizeWithFloat:(float)hintX
                                     withFloat:(float)hintY {
  TripleplayUiElement_LayoutData *ldata = JreOperatorRetainedAssign(&_ldata_, self, [self createLayoutDataWithFloat:hintX withFloat:hintY]);
  PythagorasFDimension *size = [((TripleplayUiElement_LayoutData *) NIL_CHK(ldata)) computeSizeWithFloat:hintX - [((TripleplayUiBackground *) NIL_CHK(ldata.bg)) width] withFloat:hintY - [((TripleplayUiBackground *) NIL_CHK(ldata.bg)) height]];
  return [((TripleplayUiBackground *) NIL_CHK(ldata.bg)) addInsetsWithPythagorasFDimension:size];
}

- (void)layout {
  if (![self isVisible]) return;
  float width = ((PythagorasFDimension *) NIL_CHK(_size_)).width_, height = ((PythagorasFDimension *) NIL_CHK(_size_)).height_;
  TripleplayUiElement_LayoutData *ldata = (_ldata_ != nil) ? _ldata_ : [self createLayoutDataWithFloat:width withFloat:height];
  TripleplayUiBackground_Instance *bginst = ((TripleplayUiBackground_Instance *) [((TripleplayUtilRef *) NIL_CHK(_bginst_)) get]);
  BOOL bgok = (bginst != nil && [((TripleplayUiBackground_Instance *) NIL_CHK(bginst)) owner] == ((TripleplayUiElement_LayoutData *) NIL_CHK(ldata)).bg && [((id<PythagorasFIDimension>) NIL_CHK(bginst.size)) isEqual:_size_]);
  if (!bgok) [((TripleplayUtilRef *) NIL_CHK(_bginst_)) clear];
  if (width > 0 && height > 0 && !bgok) {
    bginst = ((TripleplayUiBackground_Instance *) [((TripleplayUtilRef *) NIL_CHK(_bginst_)) setWithId:[((TripleplayUiBackground *) NIL_CHK(ldata.bg)) instantiateWithPythagorasFIDimension:_size_]]);
    [((TripleplayUiBackground_Instance *) NIL_CHK(bginst)) addToWithPlaynCoreGroupLayer:layer_ withFloat:0 withFloat:0 withFloat:0];
  }
  [((TripleplayUiElement_LayoutData *) NIL_CHK(ldata)) layoutWithFloat:((TripleplayUiBackground *) NIL_CHK(ldata.bg)).left withFloat:((TripleplayUiBackground *) NIL_CHK(ldata.bg)).top withFloat:width - [((TripleplayUiBackground *) NIL_CHK(ldata.bg)) width] withFloat:height - [((TripleplayUiBackground *) NIL_CHK(ldata.bg)) height]];
  [self clearLayoutData];
}

- (TripleplayUiElement_LayoutData *)createLayoutDataWithFloat:(float)hintX
                                                    withFloat:(float)hintY {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)clearLayoutData {
  JreOperatorRetainedAssign(&_ldata_, self, nil);
}

- (id<PlaynCoreGroupLayer>)createLayer {
  return [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer];
}

- (BOOL)willDestroy {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY]];
}

- (BOOL)willRemove {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_REMOVING]] || (_parent_ != nil && [((TripleplayUiElements *) NIL_CHK(_parent_)) willRemove]);
}

- (BOOL)willAdd {
  return [self isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum IS_ADDING]] || (_parent_ != nil && [((TripleplayUiElements *) NIL_CHK(_parent_)) willAdd]);
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_bginst_, self, nil);
  JreOperatorRetainedAssign(&_ldata_, self, nil);
  JreOperatorRetainedAssign(&_hierarchyChanged_, self, nil);
  JreOperatorRetainedAssign(&_constraint_, self, nil);
  JreOperatorRetainedAssign(&_styles_, self, nil);
  JreOperatorRetainedAssign(&_size_, self, nil);
  JreOperatorRetainedAssign(&_preferredSize_, self, nil);
  JreOperatorRetainedAssign(&_parent_, self, nil);
  JreOperatorRetainedAssign(&layer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement *typedCopy = (TripleplayUiElement *) copy;
  typedCopy.layer = layer_;
  typedCopy._flags = _flags_;
  typedCopy._parent = _parent_;
  typedCopy._preferredSize = _preferredSize_;
  typedCopy._size = _size_;
  typedCopy._styles = _styles_;
  typedCopy._constraint = _constraint_;
  typedCopy._hierarchyChanged = _hierarchyChanged_;
  typedCopy._ldata = _ldata_;
  typedCopy._bginst = _bginst_;
}

@end

static TripleplayUiElement_TakeEnum *TripleplayUiElement_TakeEnum_MAX;
static TripleplayUiElement_TakeEnum *TripleplayUiElement_TakeEnum_MIN;
static TripleplayUiElement_TakeEnum *TripleplayUiElement_TakeEnum_PREFERRED_IF_SET;
IOSObjectArray *TripleplayUiElement_TakeEnum_values;

@implementation TripleplayUiElement_TakeEnum

+ (TripleplayUiElement_TakeEnum *)MAX {
  return TripleplayUiElement_TakeEnum_MAX;
}
+ (TripleplayUiElement_TakeEnum *)MIN {
  return TripleplayUiElement_TakeEnum_MIN;
}
+ (TripleplayUiElement_TakeEnum *)PREFERRED_IF_SET {
  return TripleplayUiElement_TakeEnum_PREFERRED_IF_SET;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (float)applyWithFloat:(float)preferred
              withFloat:(float)original {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayUiElement_TakeEnum class]) {
    TripleplayUiElement_TakeEnum_MAX = [[TripleplayUiElement_TakeEnum_$1 alloc] initWithNSString:@"TripleplayUiElement_Take_MAX" withInt:0];
    TripleplayUiElement_TakeEnum_MIN = [[TripleplayUiElement_TakeEnum_$2 alloc] initWithNSString:@"TripleplayUiElement_Take_MIN" withInt:1];
    TripleplayUiElement_TakeEnum_PREFERRED_IF_SET = [[TripleplayUiElement_TakeEnum_$3 alloc] initWithNSString:@"TripleplayUiElement_Take_PREFERRED_IF_SET" withInt:2];
    TripleplayUiElement_TakeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayUiElement_TakeEnum_MAX, TripleplayUiElement_TakeEnum_MIN, TripleplayUiElement_TakeEnum_PREFERRED_IF_SET, nil } count:3 type:[IOSClass classWithClass:[TripleplayUiElement_TakeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayUiElement_TakeEnum_values];
}

+ (TripleplayUiElement_TakeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayUiElement_TakeEnum_values count]; i++) {
    TripleplayUiElement_TakeEnum *e = [TripleplayUiElement_TakeEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
@implementation TripleplayUiElement_TakeEnum_$1

- (float)applyWithFloat:(float)preferred
              withFloat:(float)original {
  return [JavaLangMath maxWithFloat:preferred withFloat:original];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUiElement_TakeEnum_$2

- (float)applyWithFloat:(float)preferred
              withFloat:(float)original {
  return [JavaLangMath minWithFloat:preferred withFloat:original];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUiElement_TakeEnum_$3

- (float)applyWithFloat:(float)preferred
              withFloat:(float)original {
  return preferred == 0 ? original : preferred;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUiElement_BaseLayoutData

- (void)layoutWithFloat:(float)left
              withFloat:(float)top
              withFloat:(float)width
              withFloat:(float)height {
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$ {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUiElement_LayoutData

- (TripleplayUiBackground *)bg {
  return bg_;
}
- (void)setBg:(TripleplayUiBackground *)bg {
  JreOperatorRetainedAssign(&bg_, self, bg);
}
@synthesize bg = bg_;

- (PythagorasFDimension *)computeSizeWithFloat:(float)hintX
                                     withFloat:(float)hintY {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$ {
  if ((self = [super initWithTripleplayUiElement:outer$])) {
    JreOperatorRetainedAssign(&bg_, self, ((TripleplayUiBackground *) [outer$ resolveStyleWithTripleplayUiStyle:[TripleplayUiStyle BACKGROUND]]));
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&bg_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_LayoutData *typedCopy = (TripleplayUiElement_LayoutData *) copy;
  typedCopy.bg = bg_;
}

@end
@implementation TripleplayUiElement_SizableLayoutData

- (TripleplayUiElement_BaseLayoutData *)layoutDelegate {
  return layoutDelegate_;
}
- (void)setLayoutDelegate:(TripleplayUiElement_BaseLayoutData *)layoutDelegate {
  JreOperatorRetainedAssign(&layoutDelegate_, self, layoutDelegate);
}
@synthesize layoutDelegate = layoutDelegate_;
- (TripleplayUiElement_LayoutData *)sizeDelegate {
  return sizeDelegate_;
}
- (void)setSizeDelegate:(TripleplayUiElement_LayoutData *)sizeDelegate {
  JreOperatorRetainedAssign(&sizeDelegate_, self, sizeDelegate);
}
@synthesize sizeDelegate = sizeDelegate_;
@synthesize prefWidth = prefWidth_;
@synthesize prefHeight = prefHeight_;
- (TripleplayUiElement_TakeEnum *)widthFn {
  return widthFn_;
}
- (void)setWidthFn:(TripleplayUiElement_TakeEnum *)widthFn {
  JreOperatorRetainedAssign(&widthFn_, self, widthFn);
}
@synthesize widthFn = widthFn_;
- (TripleplayUiElement_TakeEnum *)heightFn {
  return heightFn_;
}
- (void)setHeightFn:(TripleplayUiElement_TakeEnum *)heightFn {
  JreOperatorRetainedAssign(&heightFn_, self, heightFn);
}
@synthesize heightFn = heightFn_;

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$
withTripleplayUiElement_BaseLayoutData:(TripleplayUiElement_BaseLayoutData *)layoutDelegate
withTripleplayUiElement_LayoutData:(TripleplayUiElement_LayoutData *)sizeDelegate
        withPythagorasFIDimension:(id<PythagorasFIDimension>)prefSize {
  if ((self = [super initWithTripleplayUiElement:outer$])) {
    JreOperatorRetainedAssign(&widthFn_, self, [TripleplayUiElement_TakeEnum PREFERRED_IF_SET]);
    JreOperatorRetainedAssign(&heightFn_, self, [TripleplayUiElement_TakeEnum PREFERRED_IF_SET]);
    self.layoutDelegate = layoutDelegate;
    self.sizeDelegate = sizeDelegate;
    if (prefSize != nil) {
      prefWidth_ = [prefSize width];
      prefHeight_ = [prefSize height];
    }
    else {
      prefWidth_ = prefHeight_ = 0;
    }
  }
  return self;
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$
withTripleplayUiElement_LayoutData:(TripleplayUiElement_LayoutData *)delegate
        withPythagorasFIDimension:(id<PythagorasFIDimension>)prefSize {
  if ((self = [super initWithTripleplayUiElement:outer$])) {
    JreOperatorRetainedAssign(&widthFn_, self, [TripleplayUiElement_TakeEnum PREFERRED_IF_SET]);
    JreOperatorRetainedAssign(&heightFn_, self, [TripleplayUiElement_TakeEnum PREFERRED_IF_SET]);
    self.layoutDelegate = delegate;
    self.sizeDelegate = delegate;
    if (prefSize != nil) {
      prefWidth_ = [prefSize width];
      prefHeight_ = [prefSize height];
    }
    else {
      prefWidth_ = prefHeight_ = 0;
    }
  }
  return self;
}

- (TripleplayUiElement_SizableLayoutData *)forWidthWithTripleplayUiElement_TakeEnum:(TripleplayUiElement_TakeEnum *)fn {
  JreOperatorRetainedAssign(&widthFn_, self, fn);
  return self;
}

- (TripleplayUiElement_SizableLayoutData *)forWidthWithTripleplayUiElement_TakeEnum:(TripleplayUiElement_TakeEnum *)fn
                                                                          withFloat:(float)pref {
  JreOperatorRetainedAssign(&widthFn_, self, fn);
  prefWidth_ = pref;
  return self;
}

- (TripleplayUiElement_SizableLayoutData *)forHeightWithTripleplayUiElement_TakeEnum:(TripleplayUiElement_TakeEnum *)fn {
  JreOperatorRetainedAssign(&heightFn_, self, fn);
  return self;
}

- (TripleplayUiElement_SizableLayoutData *)forHeightWithTripleplayUiElement_TakeEnum:(TripleplayUiElement_TakeEnum *)fn
                                                                           withFloat:(float)pref {
  JreOperatorRetainedAssign(&heightFn_, self, fn);
  prefHeight_ = pref;
  return self;
}

- (PythagorasFDimension *)computeSizeWithFloat:(float)hintX
                                     withFloat:(float)hintY {
  hintX = [self selectWithFloat:prefWidth_ withFloat:hintX];
  hintY = [self selectWithFloat:prefHeight_ withFloat:hintY];
  PythagorasFDimension *dim = sizeDelegate_ == nil ? [[[PythagorasFDimension alloc] initWithFloat:prefWidth_ withFloat:prefHeight_] autorelease] : [((TripleplayUiElement_LayoutData *) NIL_CHK(sizeDelegate_)) computeSizeWithFloat:hintX withFloat:hintY];
  ((PythagorasFDimension *) NIL_CHK(dim)).width_ = [((TripleplayUiElement_TakeEnum *) NIL_CHK(widthFn_)) applyWithFloat:prefWidth_ withFloat:((PythagorasFDimension *) NIL_CHK(dim)).width_];
  ((PythagorasFDimension *) NIL_CHK(dim)).height_ = [((TripleplayUiElement_TakeEnum *) NIL_CHK(heightFn_)) applyWithFloat:prefHeight_ withFloat:((PythagorasFDimension *) NIL_CHK(dim)).height_];
  return dim;
}

- (void)layoutWithFloat:(float)left
              withFloat:(float)top
              withFloat:(float)width
              withFloat:(float)height {
  if (layoutDelegate_ != nil) [layoutDelegate_ layoutWithFloat:left withFloat:top withFloat:width withFloat:height];
}

- (float)selectWithFloat:(float)pref
               withFloat:(float)base {
  return pref == 0 ? base : pref;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&heightFn_, self, nil);
  JreOperatorRetainedAssign(&widthFn_, self, nil);
  JreOperatorRetainedAssign(&sizeDelegate_, self, nil);
  JreOperatorRetainedAssign(&layoutDelegate_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_SizableLayoutData *typedCopy = (TripleplayUiElement_SizableLayoutData *) copy;
  typedCopy.layoutDelegate = layoutDelegate_;
  typedCopy.sizeDelegate = sizeDelegate_;
  typedCopy.prefWidth = prefWidth_;
  typedCopy.prefHeight = prefHeight_;
  typedCopy.widthFn = widthFn_;
  typedCopy.heightFn = heightFn_;
}

@end

static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_VALID;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_ENABLED;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_VISIBLE;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_SELECTED;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_WILL_DESTROY;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_HIT_DESCEND;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_HIT_ABSORB;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_IS_REMOVING;
static TripleplayUiElement_FlagEnum *TripleplayUiElement_FlagEnum_IS_ADDING;
IOSObjectArray *TripleplayUiElement_FlagEnum_values;

@implementation TripleplayUiElement_FlagEnum

+ (TripleplayUiElement_FlagEnum *)VALID {
  return TripleplayUiElement_FlagEnum_VALID;
}
+ (TripleplayUiElement_FlagEnum *)ENABLED {
  return TripleplayUiElement_FlagEnum_ENABLED;
}
+ (TripleplayUiElement_FlagEnum *)VISIBLE {
  return TripleplayUiElement_FlagEnum_VISIBLE;
}
+ (TripleplayUiElement_FlagEnum *)SELECTED {
  return TripleplayUiElement_FlagEnum_SELECTED;
}
+ (TripleplayUiElement_FlagEnum *)WILL_DESTROY {
  return TripleplayUiElement_FlagEnum_WILL_DESTROY;
}
+ (TripleplayUiElement_FlagEnum *)HIT_DESCEND {
  return TripleplayUiElement_FlagEnum_HIT_DESCEND;
}
+ (TripleplayUiElement_FlagEnum *)HIT_ABSORB {
  return TripleplayUiElement_FlagEnum_HIT_ABSORB;
}
+ (TripleplayUiElement_FlagEnum *)IS_REMOVING {
  return TripleplayUiElement_FlagEnum_IS_REMOVING;
}
+ (TripleplayUiElement_FlagEnum *)IS_ADDING {
  return TripleplayUiElement_FlagEnum_IS_ADDING;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

@synthesize mask = mask_;

- (id)initWithInt:(int)mask
     withNSString:(NSString *)name
          withInt:(int)ordinal {
  if ((self = [super initWithNSString:name withInt:ordinal])) {
    self.mask = mask;
  }
  return self;
}

+ (void)initialize {
  if (self == [TripleplayUiElement_FlagEnum class]) {
    TripleplayUiElement_FlagEnum_VALID = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 0 withNSString:@"TripleplayUiElement_Flag_VALID" withInt:0];
    TripleplayUiElement_FlagEnum_ENABLED = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 1 withNSString:@"TripleplayUiElement_Flag_ENABLED" withInt:1];
    TripleplayUiElement_FlagEnum_VISIBLE = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 2 withNSString:@"TripleplayUiElement_Flag_VISIBLE" withInt:2];
    TripleplayUiElement_FlagEnum_SELECTED = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 3 withNSString:@"TripleplayUiElement_Flag_SELECTED" withInt:3];
    TripleplayUiElement_FlagEnum_WILL_DESTROY = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 4 withNSString:@"TripleplayUiElement_Flag_WILL_DESTROY" withInt:4];
    TripleplayUiElement_FlagEnum_HIT_DESCEND = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 5 withNSString:@"TripleplayUiElement_Flag_HIT_DESCEND" withInt:5];
    TripleplayUiElement_FlagEnum_HIT_ABSORB = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 6 withNSString:@"TripleplayUiElement_Flag_HIT_ABSORB" withInt:6];
    TripleplayUiElement_FlagEnum_IS_REMOVING = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 7 withNSString:@"TripleplayUiElement_Flag_IS_REMOVING" withInt:7];
    TripleplayUiElement_FlagEnum_IS_ADDING = [[TripleplayUiElement_FlagEnum alloc] initWithInt:1 << 8 withNSString:@"TripleplayUiElement_Flag_IS_ADDING" withInt:8];
    TripleplayUiElement_FlagEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayUiElement_FlagEnum_VALID, TripleplayUiElement_FlagEnum_ENABLED, TripleplayUiElement_FlagEnum_VISIBLE, TripleplayUiElement_FlagEnum_SELECTED, TripleplayUiElement_FlagEnum_WILL_DESTROY, TripleplayUiElement_FlagEnum_HIT_DESCEND, TripleplayUiElement_FlagEnum_HIT_ABSORB, TripleplayUiElement_FlagEnum_IS_REMOVING, TripleplayUiElement_FlagEnum_IS_ADDING, nil } count:9 type:[IOSClass classWithClass:[TripleplayUiElement_FlagEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayUiElement_FlagEnum_values];
}

+ (TripleplayUiElement_FlagEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayUiElement_FlagEnum_values count]; i++) {
    TripleplayUiElement_FlagEnum *e = [TripleplayUiElement_FlagEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
@implementation TripleplayUiElement_$1

- (TripleplayUiElement *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiElement *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withPythagorasFPoint:(PythagorasFPoint *)p {
  id<PlaynCoreLayer> hit = nil;
  if ([this$0_ isVisible] && [this$0_ containsWithFloat:((PythagorasFPoint *) NIL_CHK(p)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(p)).y_]) {
    if ([this$0_ isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum HIT_DESCEND]]) hit = [((id<PlaynCoreLayer>) NIL_CHK(layer)) hitTestDefaultWithPythagorasFPoint:p];
    if (hit == nil && [this$0_ isSetWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum HIT_ABSORB]]) hit = layer;
  }
  return hit;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"HitTester for %@", this$0_];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_$1 *typedCopy = (TripleplayUiElement_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiElement_$2

- (TripleplayUiElement *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiElement *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangBoolean *)value {
  (void) [this$0_ setEnabledWithBOOL:[((JavaLangBoolean *) NIL_CHK(value)) booleanValue]];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_$2 *typedCopy = (TripleplayUiElement_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiElement_$3

- (TripleplayUiElement *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiElement *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangBoolean *)value {
  (void) [this$0_ setVisibleWithBOOL:[((JavaLangBoolean *) NIL_CHK(value)) booleanValue]];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_$3 *typedCopy = (TripleplayUiElement_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiElement_$4

- (TripleplayUiElement *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiElement *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$styles = val$styles_;

- (void)onEmit {
  [this$0_ invalidate];
  if (val$styles_) [this$0_ clearLayoutData];
}

- (id)initWithTripleplayUiElement:(TripleplayUiElement *)outer$
                         withBOOL:(BOOL)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$styles_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiElement_$4 *typedCopy = (TripleplayUiElement_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$styles = val$styles_;
}

@end
