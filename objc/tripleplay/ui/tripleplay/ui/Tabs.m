//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Tabs.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Asserts.h"
#import "playn/core/GroupLayer.h"
#import "react/Connection.h"
#import "react/Value.h"
#import "tripleplay/ui/Element.h"
#import "tripleplay/ui/Elements.h"
#import "tripleplay/ui/Group.h"
#import "tripleplay/ui/Icon.h"
#import "tripleplay/ui/Selector.h"
#import "tripleplay/ui/Style.h"
#import "tripleplay/ui/ToggleButton.h"
#import "tripleplay/ui/layout/AxisLayout.h"
#import "tripleplay/ui/util/Supplier.h"

@implementation TripleplayUiTabs

static id<TripleplayUiTabs_Highlighter> TripleplayUiTabs_NOOP_HIGHLIGHTER_;
static TripleplayUiStyle * TripleplayUiTabs_HIGHLIGHTER_;

- (TripleplayUiGroup *)buttons {
  return buttons_;
}
- (void)setButtons:(TripleplayUiGroup *)buttons {
  JreOperatorRetainedAssign(&buttons_, self, buttons);
}
@synthesize buttons = buttons_;
- (TripleplayUiGroup *)contentArea {
  return contentArea_;
}
- (void)setContentArea:(TripleplayUiGroup *)contentArea {
  JreOperatorRetainedAssign(&contentArea_, self, contentArea);
}
@synthesize contentArea = contentArea_;
- (ReactValue *)selected {
  return selected_;
}
- (void)setSelected:(ReactValue *)selected {
  JreOperatorRetainedAssign(&selected_, self, selected);
}
@synthesize selected = selected_;
- (id<JavaUtilList>)_tabs {
  return _tabs_;
}
- (void)set_tabs:(id<JavaUtilList>)_tabs {
  JreOperatorRetainedAssign(&_tabs_, self, _tabs);
}
@synthesize _tabs = _tabs_;
- (id<TripleplayUiTabs_Highlighter>)_highlighter {
  return _highlighter_;
}
- (void)set_highlighter:(id<TripleplayUiTabs_Highlighter>)_highlighter {
  JreOperatorRetainedAssign(&_highlighter_, self, _highlighter);
}
@synthesize _highlighter = _highlighter_;

+ (id<TripleplayUiTabs_Highlighter>)NOOP_HIGHLIGHTER {
  return TripleplayUiTabs_NOOP_HIGHLIGHTER_;
}

+ (void)setNOOP_HIGHLIGHTER:(id<TripleplayUiTabs_Highlighter>)NOOP_HIGHLIGHTER {
  JreOperatorRetainedAssign(&TripleplayUiTabs_NOOP_HIGHLIGHTER_, self, NOOP_HIGHLIGHTER);
}

+ (TripleplayUiStyle *)HIGHLIGHTER {
  return TripleplayUiTabs_HIGHLIGHTER_;
}

+ (void)setHIGHLIGHTER:(TripleplayUiStyle *)HIGHLIGHTER {
  JreOperatorRetainedAssign(&TripleplayUiTabs_HIGHLIGHTER_, self, HIGHLIGHTER);
}

+ (id<TripleplayUiTabs_Highlighter>)textColorHighlighterWithInt:(int)originalColor
                                                        withInt:(int)highlightColor {
  return [[[TripleplayUiTabs_$2 alloc] initWithInt:highlightColor withInt:originalColor] autorelease];
}

- (id)init {
  if ((self = [super initWithTripleplayUiLayout:[[[TripleplayUiLayoutAxisLayout vertical] gapWithInt:0] offStretch]])) {
    JreOperatorRetainedAssign(&buttons_, self, [[[TripleplayUiGroup alloc] initWithTripleplayUiLayout:[[TripleplayUiLayoutAxisLayout horizontal] gapWithInt:3]] autorelease]);
    JreOperatorRetainedAssign(&contentArea_, self, [[[TripleplayUiGroup alloc] initWithTripleplayUiLayout:[[[TripleplayUiLayoutAxisLayout horizontal] stretchByDefault] offStretch]] autorelease]);
    JreOperatorRetainedAssign(&selected_, self, ((ReactValue *) [ReactValue createWithId:nil]));
    JreOperatorRetainedAssign(&_tabs_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    (void) [self addWithTripleplayUiElementArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiElement class]] count:2, buttons_, ((TripleplayUiGroup *) [((TripleplayUiGroup *) NIL_CHK(contentArea_)) setConstraintWithTripleplayUiLayout_Constraint:[TripleplayUiLayoutAxisLayout stretched]]) ]];
    TripleplayUiSelector *tabButtonSelector = [[[TripleplayUiSelector alloc] initWithTripleplayUiElements:buttons_ withTripleplayUiElement:nil] autorelease];
    (void) [((ReactValue *) NIL_CHK(tabButtonSelector.selected)) connectWithReactValueView_Listener:[[[TripleplayUiTabs_$3 alloc] initWithTripleplayUiTabs:self] autorelease]];
    (void) [((ReactValue *) NIL_CHK(selected_)) connectWithReactValueView_Listener:[[[TripleplayUiTabs_$4 alloc] initWithTripleplayUiTabs:self withTripleplayUiSelector:tabButtonSelector] autorelease]];
  }
  return self;
}

- (int)tabCount {
  return [((id<JavaUtilList>) NIL_CHK(_tabs_)) size];
}

- (TripleplayUiTabs_Tab *)tabAtWithInt:(int)index {
  return index >= 0 && index <= [((id<JavaUtilList>) NIL_CHK(_tabs_)) size] ? ((TripleplayUiTabs_Tab *) [((id<JavaUtilList>) NIL_CHK(_tabs_)) getWithInt:index]) : nil;
}

- (TripleplayUiTabs_Tab *)addWithNSString:(NSString *)label
             withTripleplayUiUtilSupplier:(TripleplayUiUtilSupplier *)supplier {
  return [self addWithNSString:label withTripleplayUiIcon:nil withTripleplayUiUtilSupplier:supplier];
}

- (TripleplayUiTabs_Tab *)addWithNSString:(NSString *)label
                  withTripleplayUiElement:(TripleplayUiElement *)panel {
  return [self addWithNSString:label withTripleplayUiUtilSupplier:[TripleplayUiUtilSupplier auto__WithTripleplayUiElement:panel]];
}

- (TripleplayUiTabs_Tab *)addWithNSString:(NSString *)label
                     withTripleplayUiIcon:(id<TripleplayUiIcon>)icon
             withTripleplayUiUtilSupplier:(TripleplayUiUtilSupplier *)supplier {
  TripleplayUiTabs_Tab *tab = [[[TripleplayUiTabs_Tab alloc] initWithTripleplayUiTabs:self withTripleplayUiToggleButton:[[[TripleplayUiToggleButton alloc] initWithNSString:label withTripleplayUiIcon:icon] autorelease] withTripleplayUiUtilSupplier:supplier] autorelease];
  ((TripleplayUiTabs_Tab *) NIL_CHK(tab))._index = [((id<JavaUtilList>) NIL_CHK(_tabs_)) size];
  [((id<JavaUtilList>) NIL_CHK(_tabs_)) addWithId:tab];
  (void) [((TripleplayUiGroup *) NIL_CHK(buttons_)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiElement class]] count:1, ((TripleplayUiTabs_Tab *) NIL_CHK(tab)).button ]];
  return tab;
}

- (TripleplayUiTabs_Tab *)addWithNSString:(NSString *)label
                     withTripleplayUiIcon:(id<TripleplayUiIcon>)icon
                  withTripleplayUiElement:(TripleplayUiElement *)panel {
  return [self addWithNSString:label withTripleplayUiIcon:icon withTripleplayUiUtilSupplier:[TripleplayUiUtilSupplier auto__WithTripleplayUiElement:panel]];
}

- (void)repositionTabWithTripleplayUiTabs_Tab:(TripleplayUiTabs_Tab *)tab
                                      withInt:(int)position {
  int prev = [((TripleplayUiTabs_Tab *) NIL_CHK(tab)) index];
  [PlaynCoreAsserts checkArgumentWithBOOL:prev != -1];
  [PlaynCoreAsserts checkArgumentWithBOOL:position >= 0 && position < [((id<JavaUtilList>) NIL_CHK(_tabs_)) size]];
  if (prev == position) return;
  (void) [((id<JavaUtilList>) NIL_CHK(_tabs_)) removeWithInt:prev];
  [((TripleplayUiGroup *) NIL_CHK(buttons_)) removeWithTripleplayUiElement:((TripleplayUiTabs_Tab *) NIL_CHK(tab)).button];
  [((id<JavaUtilList>) NIL_CHK(_tabs_)) addWithInt:position withId:tab];
  (void) [((TripleplayUiGroup *) NIL_CHK(buttons_)) addWithInt:position withTripleplayUiElement:((TripleplayUiTabs_Tab *) NIL_CHK(tab)).button];
  [self resetIndices];
}

- (void)destroyTabWithTripleplayUiTabs_Tab:(TripleplayUiTabs_Tab *)tab {
  [PlaynCoreAsserts checkArgumentWithBOOL:[((id<JavaUtilList>) NIL_CHK(_tabs_)) containsWithId:tab] withId:@"Tab isn't ours"];
  if (tab == ((TripleplayUiTabs_Tab *) [((ReactValue *) NIL_CHK(selected_)) get])) (void) [((ReactValue *) NIL_CHK(selected_)) updateWithId:nil];
  (void) [((id<JavaUtilList>) NIL_CHK(_tabs_)) removeWithInt:[((TripleplayUiTabs_Tab *) NIL_CHK(tab)) index]];
  [((TripleplayUiGroup *) NIL_CHK(buttons_)) destroyWithTripleplayUiElement:((TripleplayUiTabs_Tab *) NIL_CHK(tab)).button];
  if (((TripleplayUiTabs_Tab *) NIL_CHK(tab))._content != nil) [((TripleplayUiGroup *) NIL_CHK(contentArea_)) destroyWithTripleplayUiElement:((TripleplayUiTabs_Tab *) NIL_CHK(tab))._content];
  [((TripleplayUiUtilSupplier *) NIL_CHK(tab._generator)) destroy];
  ((TripleplayUiTabs_Tab *) NIL_CHK(tab))._index = -1;
  [self resetIndices];
  return;
}

- (id<TripleplayUiTabs_Highlighter>)highlighter {
  if (_highlighter_ == nil) JreOperatorRetainedAssign(&_highlighter_, self, ((id<TripleplayUiTabs_Highlighter>) [self resolveStyleWithTripleplayUiStyle:TripleplayUiTabs_HIGHLIGHTER_]));
  return _highlighter_;
}

- (void)clearLayoutData {
  [super clearLayoutData];
  JreOperatorRetainedAssign(&_highlighter_, self, nil);
}

- (IOSClass *)getStyleClass {
  return [IOSClass classWithClass:[TripleplayUiTabs class]];
}

- (void)wasAdded {
  [super wasAdded];
  if (((TripleplayUiTabs_Tab *) [((ReactValue *) NIL_CHK(selected_)) get]) == nil && [self tabCount] > 0) {
    (void) [((ReactValue *) NIL_CHK(selected_)) updateWithId:[self tabAtWithInt:0]];
  }
}

- (void)wasRemoved {
  if ([self willDestroy]) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_tabs_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TripleplayUiTabs_Tab *tab = ((TripleplayUiTabs_Tab *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((TripleplayUiUtilSupplier *) NIL_CHK(tab._generator)) destroy];
      }
    }
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_tabs_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TripleplayUiTabs_Tab *tab = ((TripleplayUiTabs_Tab *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        if (((TripleplayUiTabs_Tab *) NIL_CHK(tab))._content != nil && [((TripleplayUiElement *) NIL_CHK(tab._content)) parent] == nil) {
          [((id<PlaynCoreGroupLayer>) NIL_CHK(tab._content.layer)) destroy];
          ((TripleplayUiTabs_Tab *) NIL_CHK(tab))._content = nil;
        }
      }
    }
  }
  [super wasRemoved];
}

- (void)resetIndices {
  for (int ii = 0; ii < [((id<JavaUtilList>) NIL_CHK(_tabs_)) size]; ++ii) {
    ((TripleplayUiTabs_Tab *) [((id<JavaUtilList>) NIL_CHK(_tabs_)) getWithInt:ii])._index = ii;
  }
}

- (TripleplayUiTabs_Tab *)forWidgetWithTripleplayUiElement:(TripleplayUiElement *)widget {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_tabs_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplayUiTabs_Tab *tab = ((TripleplayUiTabs_Tab *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if (((TripleplayUiTabs_Tab *) NIL_CHK(tab)).button == widget) {
        return tab;
      }
    }
  }
  return nil;
}

+ (void)initialize {
  if (self == [TripleplayUiTabs class]) {
    JreOperatorRetainedAssign(&TripleplayUiTabs_NOOP_HIGHLIGHTER_, self, [[[TripleplayUiTabs_$1 alloc] init] autorelease]);
    JreOperatorRetainedAssign(&TripleplayUiTabs_HIGHLIGHTER_, self, ((TripleplayUiStyle *) [TripleplayUiStyle newStyleWithBOOL:YES withId:TripleplayUiTabs_NOOP_HIGHLIGHTER_]));
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_highlighter_, self, nil);
  JreOperatorRetainedAssign(&_tabs_, self, nil);
  JreOperatorRetainedAssign(&selected_, self, nil);
  JreOperatorRetainedAssign(&contentArea_, self, nil);
  JreOperatorRetainedAssign(&buttons_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiTabs *typedCopy = (TripleplayUiTabs *) copy;
  typedCopy.buttons = buttons_;
  typedCopy.contentArea = contentArea_;
  typedCopy.selected = selected_;
  typedCopy._tabs = _tabs_;
  typedCopy._highlighter = _highlighter_;
}

@end
@implementation TripleplayUiTabs_Tab

- (TripleplayUiTabs *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiTabs *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (TripleplayUiToggleButton *)button {
  return button_;
}
- (void)setButton:(TripleplayUiToggleButton *)button {
  JreOperatorRetainedAssign(&button_, self, button);
}
@synthesize button = button_;
@synthesize _index = _index_;
- (TripleplayUiUtilSupplier *)_generator {
  return _generator_;
}
- (void)set_generator:(TripleplayUiUtilSupplier *)_generator {
  JreOperatorRetainedAssign(&_generator_, self, _generator);
}
@synthesize _generator = _generator_;
- (TripleplayUiElement *)_content {
  return _content_;
}
- (void)set_content:(TripleplayUiElement *)_content {
  JreOperatorRetainedAssign(&_content_, self, _content);
}
@synthesize _content = _content_;

- (id)initWithTripleplayUiTabs:(TripleplayUiTabs *)outer$
  withTripleplayUiToggleButton:(TripleplayUiToggleButton *)button
  withTripleplayUiUtilSupplier:(TripleplayUiUtilSupplier *)generator {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    _index_ = -1;
    self.button = button;
    JreOperatorRetainedAssign(&_generator_, self, generator);
  }
  return self;
}

- (void)select {
  (void) [((ReactValue *) NIL_CHK(this$0_.selected)) updateWithId:self];
}

- (TripleplayUiElement *)content {
  if (_content_ == nil) JreOperatorRetainedAssign(&_content_, self, [((TripleplayUiUtilSupplier *) NIL_CHK(_generator_)) get]);
  return _content_;
}

- (int)index {
  return _index_;
}

- (void)setVisibleWithBOOL:(BOOL)visible {
  if (!visible && ((TripleplayUiTabs_Tab *) [((ReactValue *) NIL_CHK(this$0_.selected)) get]) == self) (void) [((ReactValue *) NIL_CHK(this$0_.selected)) updateWithId:nil];
  (void) [((TripleplayUiToggleButton *) NIL_CHK(button_)) setVisibleWithBOOL:visible];
}

- (TripleplayUiTabs *)parent {
  return this$0_;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_content_, self, nil);
  JreOperatorRetainedAssign(&_generator_, self, nil);
  JreOperatorRetainedAssign(&button_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiTabs_Tab *typedCopy = (TripleplayUiTabs_Tab *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.button = button_;
  typedCopy._index = _index_;
  typedCopy._generator = _generator_;
  typedCopy._content = _content_;
}

@end
@implementation TripleplayUiTabs_$1

- (void)highlightWithTripleplayUiTabs_Tab:(TripleplayUiTabs_Tab *)tab
                                 withBOOL:(BOOL)highlight {
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUiTabs_$2

@synthesize val$highlightColor = val$highlightColor_;
@synthesize val$originalColor = val$originalColor_;

- (void)highlightWithTripleplayUiTabs_Tab:(TripleplayUiTabs_Tab *)tab
                                 withBOOL:(BOOL)highlight {
  if ([((TripleplayUiToggleButton *) NIL_CHK(tab.button)) isSelected] && highlight) return;
  (void) [((TripleplayUiToggleButton *) NIL_CHK(tab.button)) addStylesWithTripleplayUiStyle_BindingArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiStyle_Binding class]] count:1, ((TripleplayUiStyle_Binding *) [((TripleplayUiStyle *) NIL_CHK([TripleplayUiStyle COLOR])) isWithId:[JavaLangInteger valueOfWithInt:highlight ? val$highlightColor_ : val$originalColor_]]) ]];
}

- (id)initWithInt:(int)capture$0
          withInt:(int)capture$1 {
  if ((self = [super init])) {
    val$highlightColor_ = capture$0;
    val$originalColor_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiTabs_$2 *typedCopy = (TripleplayUiTabs_$2 *) copy;
  typedCopy.val$highlightColor = val$highlightColor_;
  typedCopy.val$originalColor = val$originalColor_;
}

@end
@implementation TripleplayUiTabs_$3

- (TripleplayUiTabs *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiTabs *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)button {
  (void) [((ReactValue *) NIL_CHK(this$0_.selected)) updateWithId:[this$0_ forWidgetWithTripleplayUiElement:button]];
}

- (id)initWithTripleplayUiTabs:(TripleplayUiTabs *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiTabs_$3 *typedCopy = (TripleplayUiTabs_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiTabs_$4

- (TripleplayUiTabs *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiTabs *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (TripleplayUiSelector *)val$tabButtonSelector {
  return val$tabButtonSelector_;
}
- (void)setVal$tabButtonSelector:(TripleplayUiSelector *)val$tabButtonSelector {
  JreOperatorRetainedAssign(&val$tabButtonSelector_, self, val$tabButtonSelector);
}
@synthesize val$tabButtonSelector = val$tabButtonSelector_;

- (void)onChangeWithId:(TripleplayUiTabs_Tab *)selected
                withId:(TripleplayUiTabs_Tab *)deselected {
  if (deselected != nil) [((TripleplayUiGroup *) NIL_CHK(this$0_.contentArea)) removeWithTripleplayUiElement:[deselected content]];
  if (selected != nil) {
    if ([[selected content] parent] != this$0_.contentArea) (void) [((TripleplayUiGroup *) NIL_CHK(this$0_.contentArea)) addWithTripleplayUiElementArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[TripleplayUiElement class]] count:1, [selected content] ]];
    [((id<TripleplayUiTabs_Highlighter>) [this$0_ highlighter]) highlightWithTripleplayUiTabs_Tab:selected withBOOL:NO];
  }
  (void) [((ReactValue *) NIL_CHK(val$tabButtonSelector_.selected)) updateWithId:selected != nil ? ((TripleplayUiTabs_Tab *) NIL_CHK(selected)).button : nil];
}

- (id)initWithTripleplayUiTabs:(TripleplayUiTabs *)outer$
      withTripleplayUiSelector:(TripleplayUiSelector *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$tabButtonSelector_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$tabButtonSelector_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiTabs_$4 *typedCopy = (TripleplayUiTabs_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$tabButtonSelector = val$tabButtonSelector_;
}

@end
