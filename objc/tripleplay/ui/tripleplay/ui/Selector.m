//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Selector.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Boolean.h"
#import "java/util/Iterator.h"
#import "react/Connection.h"
#import "react/SignalView.h"
#import "react/Slot.h"
#import "react/Value.h"
#import "tripleplay/ui/Element.h"
#import "tripleplay/ui/Elements.h"
#import "tripleplay/ui/Togglable.h"

@implementation TripleplayUiSelector

- (ReactValue *)selected {
  return selected_;
}
- (void)setSelected:(ReactValue *)selected {
  JreOperatorRetainedAssign(&selected_, self, selected);
}
@synthesize selected = selected_;
- (ReactSlot *)_addSlot {
  return _addSlot_;
}
- (void)set_addSlot:(ReactSlot *)_addSlot {
  JreOperatorRetainedAssign(&_addSlot_, self, _addSlot);
}
@synthesize _addSlot = _addSlot_;
- (ReactSlot *)_removeSlot {
  return _removeSlot_;
}
- (void)set_removeSlot:(ReactSlot *)_removeSlot {
  JreOperatorRetainedAssign(&_removeSlot_, self, _removeSlot);
}
@synthesize _removeSlot = _removeSlot_;
- (ReactSlot *)_clickSlot {
  return _clickSlot_;
}
- (void)set_clickSlot:(ReactSlot *)_clickSlot {
  JreOperatorRetainedAssign(&_clickSlot_, self, _clickSlot);
}
@synthesize _clickSlot = _clickSlot_;

- (id)initTripleplayUiSelector {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&selected_, self, ((ReactValue *) [ReactValue createWithId:nil]));
    JreOperatorRetainedAssign(&_addSlot_, self, [[[TripleplayUiSelector_$2 alloc] initWithTripleplayUiSelector:self] autorelease]);
    JreOperatorRetainedAssign(&_removeSlot_, self, [[[TripleplayUiSelector_$3 alloc] initWithTripleplayUiSelector:self] autorelease]);
    JreOperatorRetainedAssign(&_clickSlot_, self, [[[TripleplayUiSelector_$4 alloc] initWithTripleplayUiSelector:self] autorelease]);
    (void) [((ReactValue *) NIL_CHK(selected_)) connectWithReactValueView_Listener:[[[TripleplayUiSelector_$1 alloc] initWithTripleplayUiSelector:self] autorelease]];
  }
  return self;
}

- (id)init {
  return [self initTripleplayUiSelector];
}

- (id)initWithTripleplayUiElements:(TripleplayUiElements *)elements
           withTripleplayUiElement:(TripleplayUiElement *)initialSelection {
  if ((self = [self initTripleplayUiSelector])) {
    (void) [self addWithTripleplayUiElements:elements];
    if ([initialSelection conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
      (void) [((ReactValue *) NIL_CHK(selected_)) updateWithId:initialSelection];
    }
  }
  return self;
}

- (TripleplayUiSelector *)addWithTripleplayUiElements:(TripleplayUiElements *)elements {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((TripleplayUiElements *) NIL_CHK(elements)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplayUiElement *child = ((TripleplayUiElement *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((ReactSlot *) NIL_CHK(_addSlot_)) onEmitWithId:child];
    }
  }
  (void) [((id<ReactSignalView>) [((TripleplayUiElements *) NIL_CHK(elements)) childAdded]) connectWithReactSlot:_addSlot_];
  (void) [((id<ReactSignalView>) [((TripleplayUiElements *) NIL_CHK(elements)) childRemoved]) connectWithReactSlot:_removeSlot_];
  return self;
}

- (TripleplayUiSelector *)removeWithTripleplayUiElements:(TripleplayUiElements *)elements {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((TripleplayUiElements *) NIL_CHK(elements)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplayUiElement *child = ((TripleplayUiElement *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((ReactSlot *) NIL_CHK(_removeSlot_)) onEmitWithId:child];
    }
  }
  [((id<ReactSignalView>) [((TripleplayUiElements *) NIL_CHK(elements)) childAdded]) disconnectWithReactSlot:_addSlot_];
  [((id<ReactSignalView>) [((TripleplayUiElements *) NIL_CHK(elements)) childRemoved]) disconnectWithReactSlot:_removeSlot_];
  return self;
}

- (TripleplayUiSelector *)addWithTripleplayUiElement:(TripleplayUiElement *)elem
                        withTripleplayUiElementArray:(IOSObjectArray *)more {
  [((ReactSlot *) NIL_CHK(_addSlot_)) onEmitWithId:elem];
  {
    IOSObjectArray *a__ = more;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *e = ((TripleplayUiElement *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [((ReactSlot *) NIL_CHK(_addSlot_)) onEmitWithId:e];
    }
  }
  return self;
}

- (TripleplayUiSelector *)removeWithTripleplayUiElement:(TripleplayUiElement *)elem
                           withTripleplayUiElementArray:(IOSObjectArray *)more {
  [((ReactSlot *) NIL_CHK(_removeSlot_)) onEmitWithId:elem];
  {
    IOSObjectArray *a__ = more;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      TripleplayUiElement *e = ((TripleplayUiElement *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [((ReactSlot *) NIL_CHK(_removeSlot_)) onEmitWithId:e];
    }
  }
  return self;
}

- (ReactValue *)getWithTripleplayUiElement:(TripleplayUiElement *)elem {
  return [((id<TripleplayUiTogglable>) elem) selected];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_clickSlot_, self, nil);
  JreOperatorRetainedAssign(&_removeSlot_, self, nil);
  JreOperatorRetainedAssign(&_addSlot_, self, nil);
  JreOperatorRetainedAssign(&selected_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector *typedCopy = (TripleplayUiSelector *) copy;
  typedCopy.selected = selected_;
  typedCopy._addSlot = _addSlot_;
  typedCopy._removeSlot = _removeSlot_;
  typedCopy._clickSlot = _clickSlot_;
}

@end
@implementation TripleplayUiSelector_$1

- (TripleplayUiSelector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiSelector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onChangeWithId:(TripleplayUiElement *)selected
                withId:(TripleplayUiElement *)deselected {
  if (deselected != nil) (void) [[this$0_ getWithTripleplayUiElement:deselected] updateWithId:[JavaLangBoolean valueOfWithBOOL:NO]];
  if (selected != nil) (void) [[this$0_ getWithTripleplayUiElement:selected] updateWithId:[JavaLangBoolean valueOfWithBOOL:YES]];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$1 *typedCopy = (TripleplayUiSelector_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$2

- (TripleplayUiSelector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiSelector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)child {
  if ([child conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
    (void) [((id<ReactSignalView>) ((id<ReactSignalView>) [((id<TripleplayUiTogglable>) child) clicked])) connectWithReactSlot:this$0_._clickSlot];
  }
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$2 *typedCopy = (TripleplayUiSelector_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$3

- (TripleplayUiSelector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiSelector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)removed {
  if ([removed conformsToProtocol: @protocol(TripleplayUiTogglable)]) {
    [((id<ReactSignalView>) ((id<ReactSignalView>) [((id<TripleplayUiTogglable>) removed) clicked])) disconnectWithReactSlot:this$0_._clickSlot];
  }
  if (((TripleplayUiElement *) [((ReactValue *) NIL_CHK(this$0_.selected)) get]) == removed) (void) [((ReactValue *) NIL_CHK(this$0_.selected)) updateWithId:nil];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$3 *typedCopy = (TripleplayUiSelector_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplayUiSelector_$4

- (TripleplayUiSelector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiSelector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(TripleplayUiElement *)clicked {
  (void) [((ReactValue *) NIL_CHK(this$0_.selected)) updateWithId:((JavaLangBoolean *) [[this$0_ getWithTripleplayUiElement:clicked] get]) ? clicked : nil];
}

- (id)initWithTripleplayUiSelector:(TripleplayUiSelector *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiSelector_$4 *typedCopy = (TripleplayUiSelector_$4 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
