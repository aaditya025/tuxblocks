//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/ui/Interface.java
//
//  Created by Thomas on 7/1/13.
//

#import "Animator.h"
#import "Clock.h"
#import "Element.h"
#import "GroupLayer.h"
#import "IOSObjectArray.h"
#import "Layout.h"
#import "Log.h"
#import "Logger.h"
#import "Root.h"
#import "Stylesheet.h"
#import "java/lang/Exception.h"
#import "java/lang/Iterable.h"
#import "java/lang/Runnable.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation TripleplayUiInterface

- (id<JavaUtilList>)_roots {
  return _roots_;
}
- (void)set_roots:(id<JavaUtilList>)_roots {
  JreOperatorRetainedAssign(&_roots_, self, _roots);
}
@synthesize _roots = _roots_;
- (id<JavaUtilList>)_actions {
  return _actions_;
}
- (void)set_actions:(id<JavaUtilList>)_actions {
  JreOperatorRetainedAssign(&_actions_, self, _actions);
}
@synthesize _actions = _actions_;
- (TripleplayAnimAnimator *)_animator {
  return _animator_;
}
- (void)set_animator:(TripleplayAnimAnimator *)_animator {
  JreOperatorRetainedAssign(&_animator_, self, _animator);
}
@synthesize _animator = _animator_;
- (id<JavaUtilList>)_tasks {
  return _tasks_;
}
- (void)set_tasks:(id<JavaUtilList>)_tasks {
  JreOperatorRetainedAssign(&_tasks_, self, _tasks);
}
@synthesize _tasks = _tasks_;
@synthesize _currentTask = _currentTask_;
@synthesize _currentTaskCount = _currentTaskCount_;

- (void)deferActionWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  [((id<JavaUtilList>) NIL_CHK(_actions_)) addWithId:action];
}

- (id<TripleplayUiInterface_TaskHandle>)addTaskWithTripleplayUiInterface_Task:(id<TripleplayUiInterface_Task>)task {
  [((id<JavaUtilList>) NIL_CHK(_tasks_)) addWithId:task];
  return [[[TripleplayUiInterface_$1 alloc] initWithTripleplayUiInterface:self withTripleplayUiInterface_Task:task] autorelease];
}

- (void)updateWithInt:(int)delta {
  for (_currentTask_ = 0, _currentTaskCount_ = [((id<JavaUtilList>) NIL_CHK(_tasks_)) size]; _currentTask_ < _currentTaskCount_; _currentTask_++) {
    id<TripleplayUiInterface_Task> task = ((id<TripleplayUiInterface_Task>) [((id<JavaUtilList>) NIL_CHK(_tasks_)) getWithInt:_currentTask_]);
    @try {
      [((id<TripleplayUiInterface_Task>) NIL_CHK(task)) updateWithInt:delta];
    }
    @catch (JavaLangException *e) {
      [((TripleplayUtilLogger *) NIL_CHK([TripleplayUiLog log])) warningWithNSString:[NSString stringWithFormat:@"Interface task failed: %@", task] withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, e ]];
    }
  }
  _currentTask_ = -1;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [((TripleplayAnimAnimator *) NIL_CHK(_animator_)) paintWithPlaynCoreUtilClock:clock];
  for (int ii = 0, ll = [((id<JavaUtilList>) NIL_CHK(_roots_)) size]; ii < ll; ii++) {
    [((TripleplayUiRoot *) [((id<JavaUtilList>) NIL_CHK(_roots_)) getWithInt:ii]) validate];
  }
  if (![((id<JavaUtilList>) NIL_CHK(_actions_)) isEmpty]) {
    id<JavaUtilList> actions = [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:_actions_] autorelease];
    [((id<JavaUtilList>) NIL_CHK(_actions_)) clear];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(actions)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<JavaLangRunnable> action = ((id<JavaLangRunnable>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        @try {
          [((id<JavaLangRunnable>) NIL_CHK(action)) run];
        }
        @catch (JavaLangException *e) {
          [((TripleplayUtilLogger *) NIL_CHK([TripleplayUiLog log])) warningWithNSString:[NSString stringWithFormat:@"Interface action failed: %@", action] withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, e ]];
        }
      }
    }
  }
}

- (id<JavaLangIterable>)roots {
  return _roots_;
}

- (TripleplayAnimAnimator *)animator {
  return _animator_;
}

- (TripleplayUiRoot *)createRootWithTripleplayUiLayout:(TripleplayUiLayout *)layout
                            withTripleplayUiStylesheet:(TripleplayUiStylesheet *)sheet {
  return [self addRootWithTripleplayUiRoot:[[[TripleplayUiRoot alloc] initWithTripleplayUiInterface:self withTripleplayUiLayout:layout withTripleplayUiStylesheet:sheet] autorelease]];
}

- (TripleplayUiRoot *)createRootWithTripleplayUiLayout:(TripleplayUiLayout *)layout
                            withTripleplayUiStylesheet:(TripleplayUiStylesheet *)sheet
                               withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)parent {
  TripleplayUiRoot *root = [self createRootWithTripleplayUiLayout:layout withTripleplayUiStylesheet:sheet];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(parent)) addWithPlaynCoreLayer:((TripleplayUiRoot *) NIL_CHK(root)).layer];
  return root;
}

- (TripleplayUiRoot *)addRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) NIL_CHK(_roots_)) addWithId:root];
  return root;
}

- (void)removeRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) NIL_CHK(_roots_)) removeWithId:root];
  [((TripleplayUiRoot *) NIL_CHK(root)) wasRemoved];
  if ([((id<PlaynCoreGroupLayer>) NIL_CHK(root.layer)) parent] != nil) [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreGroupLayer>) NIL_CHK(root.layer)) parent]) removeWithPlaynCoreLayer:((TripleplayUiRoot *) NIL_CHK(root)).layer];
}

- (void)destroyRootWithTripleplayUiRoot:(TripleplayUiRoot *)root {
  [((id<JavaUtilList>) NIL_CHK(_roots_)) removeWithId:root];
  [((TripleplayUiRoot *) NIL_CHK(root)) setWithTripleplayUiElement_FlagEnum:[TripleplayUiElement_FlagEnum WILL_DESTROY] withBOOL:YES];
  [((TripleplayUiRoot *) NIL_CHK(root)) wasRemoved];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(root.layer)) destroy];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_roots_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_actions_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_animator_, self, [[[TripleplayAnimAnimator alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_tasks_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_tasks_, self, nil);
  JreOperatorRetainedAssign(&_animator_, self, nil);
  JreOperatorRetainedAssign(&_actions_, self, nil);
  JreOperatorRetainedAssign(&_roots_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiInterface *typedCopy = (TripleplayUiInterface *) copy;
  typedCopy._roots = _roots_;
  typedCopy._actions = _actions_;
  typedCopy._animator = _animator_;
  typedCopy._tasks = _tasks_;
  typedCopy._currentTask = _currentTask_;
  typedCopy._currentTaskCount = _currentTaskCount_;
}

@end
@implementation TripleplayUiInterface_$1

- (TripleplayUiInterface *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUiInterface *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<TripleplayUiInterface_Task>)target {
  return target_;
}
- (void)setTarget:(id<TripleplayUiInterface_Task>)target {
  JreOperatorRetainedAssign(&target_, self, target);
}
@synthesize target = target_;
- (id<TripleplayUiInterface_Task>)val$task {
  return val$task_;
}
- (void)setVal$task:(id<TripleplayUiInterface_Task>)val$task {
  JreOperatorRetainedAssign(&val$task_, self, val$task);
}
@synthesize val$task = val$task_;

- (void)remove {
  if (target_ == nil) return;
  int idx = [((id<JavaUtilList>) NIL_CHK(this$0_._tasks)) indexOfWithId:target_];
  if (idx == -1) return;
  (void) [((id<JavaUtilList>) NIL_CHK(this$0_._tasks)) removeWithInt:idx];
  if (this$0_._currentTask >= idx) this$0_._currentTask--;
  this$0_._currentTaskCount--;
  JreOperatorRetainedAssign(&target_, self, nil);
}

- (id)initWithTripleplayUiInterface:(TripleplayUiInterface *)outer$
     withTripleplayUiInterface_Task:(id<TripleplayUiInterface_Task>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$task_, self, capture$0);
    JreOperatorRetainedAssign(&target_, self, val$task_);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$task_, self, nil);
  JreOperatorRetainedAssign(&target_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUiInterface_$1 *typedCopy = (TripleplayUiInterface_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.target = target_;
  typedCopy.val$task = val$task_;
}

@end
