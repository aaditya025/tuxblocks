//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/GestureDirector.java
//
//  Created by Thomas on 7/1/13.
//

#import "Gesture.h"
#import "GestureNode.h"
#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "IRectangle.h"
#import "Log.h"
#import "Logger.h"
#import "Timer.h"
#import "Touch.h"
#import "Value.h"
#import "ValueView.h"
#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/HashMap.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Set.h"

@implementation TripleplayGestureGestureDirector

- (id<PythagorasFIRectangle>)bounds {
  return bounds_;
}
- (void)setBounds:(id<PythagorasFIRectangle>)bounds {
  JreOperatorRetainedAssign(&bounds_, self, bounds);
}
@synthesize bounds = bounds_;
- (TripleplayUtilTimer *)_timer {
  return _timer_;
}
- (void)set_timer:(TripleplayUtilTimer *)_timer {
  JreOperatorRetainedAssign(&_timer_, self, _timer);
}
@synthesize _timer = _timer_;
- (id<JavaUtilMap>)_currentTouches {
  return _currentTouches_;
}
- (void)set_currentTouches:(id<JavaUtilMap>)_currentTouches {
  JreOperatorRetainedAssign(&_currentTouches_, self, _currentTouches);
}
@synthesize _currentTouches = _currentTouches_;
- (id<JavaUtilMap>)_currentMoves {
  return _currentMoves_;
}
- (void)set_currentMoves:(id<JavaUtilMap>)_currentMoves {
  JreOperatorRetainedAssign(&_currentMoves_, self, _currentMoves);
}
@synthesize _currentMoves = _currentMoves_;
- (id<JavaUtilSet>)_gestures {
  return _gestures_;
}
- (void)set_gestures:(id<JavaUtilSet>)_gestures {
  JreOperatorRetainedAssign(&_gestures_, self, _gestures);
}
@synthesize _gestures = _gestures_;
- (ReactValue *)_greedy {
  return _greedy_;
}
- (void)set_greedy:(ReactValue *)_greedy {
  JreOperatorRetainedAssign(&_greedy_, self, _greedy);
}
@synthesize _greedy = _greedy_;

+ (int)PAUSE_DELAY {
  return TripleplayGestureGestureDirector_PAUSE_DELAY;
}

- (id)initWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds
            withTripleplayUtilTimer:(TripleplayUtilTimer *)timer {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_currentTouches_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_currentMoves_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_gestures_, self, [[[JavaUtilHashSet alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_greedy_, self, ((ReactValue *) [ReactValue createWithId:nil]));
    self.bounds = bounds;
    JreOperatorRetainedAssign(&_timer_, self, timer);
  }
  return self;
}

- (TripleplayGestureGestureDirector *)addWithTripleplayGestureGesture:(id<TripleplayGestureGesture>)gesture {
  [((id<JavaUtilSet>) NIL_CHK(_gestures_)) addWithId:gesture];
  return self;
}

- (BOOL)removeWithTripleplayGestureGesture:(id<TripleplayGestureGesture>)gesture {
  return [((id<JavaUtilSet>) NIL_CHK(_gestures_)) removeWithId:gesture];
}

- (BOOL)touchInBoundsWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  return [((id<PythagorasFIRectangle>) NIL_CHK(bounds_)) containsWithFloat:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) localX] withFloat:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) localY]];
}

- (BOOL)trackingTouchWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  return [((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) id__]]];
}

- (id<ReactValueView>)greedyGesture {
  return _greedy_;
}

- (void)onTouchStartWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if (![self touchInBoundsWithPlaynCoreTouch_Event:touch]) return;
  if ([((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) isEmpty]) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(_gestures_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<TripleplayGestureGesture> gesture = ((id<TripleplayGestureGesture>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((id<TripleplayGestureGesture>) NIL_CHK(gesture)) start];
      }
    }
    (void) [((ReactValue *) NIL_CHK(_greedy_)) updateWithId:nil];
  }
  (void) [((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) id__]] withId:touch];
  [self evaluateGesturesWithTripleplayGestureGestureNode:[[[TripleplayGestureGestureNode alloc] initWithTripleplayGestureGestureNode_TypeEnum:[TripleplayGestureGestureNode_TypeEnum START] withPlaynCoreTouch_Event:touch] autorelease]];
}

- (void)onTouchMoveWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if (![self trackingTouchWithPlaynCoreTouch_Event:touch]) return;
  (void) [((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) id__]] withId:touch];
  [self evaluateGesturesWithTripleplayGestureGestureNode:[[[TripleplayGestureGestureNode alloc] initWithTripleplayGestureGestureNode_TypeEnum:[TripleplayGestureGestureNode_TypeEnum MOVE] withPlaynCoreTouch_Event:touch] autorelease]];
}

- (void)onTouchEndWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if (![self trackingTouchWithPlaynCoreTouch_Event:touch]) return;
  (void) [((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) id__]]];
  [self evaluateGesturesWithTripleplayGestureGestureNode:[[[TripleplayGestureGestureNode alloc] initWithTripleplayGestureGestureNode_TypeEnum:[TripleplayGestureGestureNode_TypeEnum END] withPlaynCoreTouch_Event:touch] autorelease]];
}

- (void)onTouchCancelWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if (![self trackingTouchWithPlaynCoreTouch_Event:touch]) return;
  (void) [((id<JavaUtilMap>) NIL_CHK(_currentTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch)) id__]]];
  [self evaluateGesturesWithTripleplayGestureGestureNode:[[[TripleplayGestureGestureNode alloc] initWithTripleplayGestureGestureNode_TypeEnum:[TripleplayGestureGestureNode_TypeEnum CANCEL] withPlaynCoreTouch_Event:touch] autorelease]];
}

- (void)onTouchPauseWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if (![self trackingTouchWithPlaynCoreTouch_Event:touch]) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"Bad state: received pause dispatch for an event we're not tracking" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"event", touch ]];
    return;
  }
  [self evaluateGesturesWithTripleplayGestureGestureNode:[[[TripleplayGestureGestureNode alloc] initWithTripleplayGestureGestureNode_TypeEnum:[TripleplayGestureGestureNode_TypeEnum PAUSE] withPlaynCoreTouch_Event:touch] autorelease]];
}

- (void)evaluateGesturesWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  id<TripleplayUtilTimer_Handle> handle = ((id<TripleplayUtilTimer_Handle>) [((id<JavaUtilMap>) NIL_CHK(_currentMoves_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]]]);
  if (handle != nil) [handle cancel];
  if (((TripleplayGestureGestureNode *) NIL_CHK(node)).type == [TripleplayGestureGestureNode_TypeEnum MOVE] || ((TripleplayGestureGestureNode *) NIL_CHK(node)).type == [TripleplayGestureGestureNode_TypeEnum START]) {
    handle = [((TripleplayUtilTimer *) NIL_CHK(_timer_)) afterWithInt:TripleplayGestureGestureDirector_PAUSE_DELAY withJavaLangRunnable:[[[TripleplayGestureGestureDirector_$1 alloc] initWithTripleplayGestureGestureDirector:self withTripleplayGestureGestureNode:node] autorelease]];
    (void) [((id<JavaUtilMap>) NIL_CHK(_currentMoves_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(node.touch)) id__]] withId:handle];
  }
  id<TripleplayGestureGesture> currentGreedy = ((id<TripleplayGestureGesture>) [((ReactValue *) NIL_CHK(_greedy_)) get]);
  if (currentGreedy != nil) {
    [currentGreedy evaluateWithTripleplayGestureGestureNode:node];
    return;
  }
  id<JavaUtilList> greedy = [[[JavaUtilArrayList alloc] init] autorelease];
  id<JavaUtilList> complete = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(_gestures_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<TripleplayGestureGesture> gesture = ((id<TripleplayGestureGesture>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((id<TripleplayGestureGesture>) NIL_CHK(gesture)) state] == [TripleplayGestureGesture_StateEnum UNQUALIFIED]) continue;
      [((id<TripleplayGestureGesture>) NIL_CHK(gesture)) evaluateWithTripleplayGestureGestureNode:node];
      if ([((id<TripleplayGestureGesture>) NIL_CHK(gesture)) state] == [TripleplayGestureGesture_StateEnum GREEDY]) [((id<JavaUtilList>) NIL_CHK(greedy)) addWithId:gesture];
      else if ([((id<TripleplayGestureGesture>) NIL_CHK(gesture)) state] == [TripleplayGestureGesture_StateEnum COMPLETE]) [((id<JavaUtilList>) NIL_CHK(complete)) addWithId:gesture];
    }
  }
  int greedyAndComplete = [((id<JavaUtilList>) NIL_CHK(greedy)) size] + [((id<JavaUtilList>) NIL_CHK(complete)) size];
  if (greedyAndComplete > 1) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"More than one gesture transitioned to GREEDY or COMPLETE on a single node" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:6, @"node", node, @"greedy", greedy, @"complete", complete ]];
  }
  (void) [((ReactValue *) NIL_CHK(_greedy_)) updateWithId:currentGreedy = ([((id<JavaUtilList>) NIL_CHK(greedy)) isEmpty] ? nil : ((id<TripleplayGestureGesture>) [((id<JavaUtilList>) NIL_CHK(greedy)) getWithInt:0]))];
  if (greedyAndComplete > 0) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(_gestures_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<TripleplayGestureGesture> gesture = ((id<TripleplayGestureGesture>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        if (currentGreedy != gesture) [((id<TripleplayGestureGesture>) NIL_CHK(gesture)) cancel];
      }
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_greedy_, self, nil);
  JreOperatorRetainedAssign(&_gestures_, self, nil);
  JreOperatorRetainedAssign(&_currentMoves_, self, nil);
  JreOperatorRetainedAssign(&_currentTouches_, self, nil);
  JreOperatorRetainedAssign(&_timer_, self, nil);
  JreOperatorRetainedAssign(&bounds_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureDirector *typedCopy = (TripleplayGestureGestureDirector *) copy;
  typedCopy.bounds = bounds_;
  typedCopy._timer = _timer_;
  typedCopy._currentTouches = _currentTouches_;
  typedCopy._currentMoves = _currentMoves_;
  typedCopy._gestures = _gestures_;
  typedCopy._greedy = _greedy_;
}

@end
@implementation TripleplayGestureGestureDirector_$1

- (TripleplayGestureGestureDirector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayGestureGestureDirector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (TripleplayGestureGestureNode *)val$node {
  return val$node_;
}
- (void)setVal$node:(TripleplayGestureGestureNode *)val$node {
  JreOperatorRetainedAssign(&val$node_, self, val$node);
}
@synthesize val$node = val$node_;

- (void)run {
  [this$0_ onTouchPauseWithPlaynCoreTouch_Event:((TripleplayGestureGestureNode *) NIL_CHK(val$node_)).touch];
}

- (id)initWithTripleplayGestureGestureDirector:(TripleplayGestureGestureDirector *)outer$
              withTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$node_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$node_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureDirector_$1 *typedCopy = (TripleplayGestureGestureDirector_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$node = val$node_;
}

@end
