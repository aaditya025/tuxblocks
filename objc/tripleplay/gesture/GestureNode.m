//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/GestureNode.java
//
//  Created by Thomas on 7/1/13.
//

#import "PlayN.h"
#import "Point.h"
#import "Touch.h"
#import "java/lang/IllegalArgumentException.h"

@implementation TripleplayGestureGestureNode

@synthesize timestamp = timestamp_;
- (TripleplayGestureGestureNode_TypeEnum *)type {
  return type_;
}
- (void)setType:(TripleplayGestureGestureNode_TypeEnum *)type {
  JreOperatorRetainedAssign(&type_, self, type);
}
@synthesize type = type_;
- (id<PlaynCoreTouch_Event>)touch {
  return touch_;
}
- (void)setTouch:(id<PlaynCoreTouch_Event>)touch {
  JreOperatorRetainedAssign(&touch_, self, touch);
}
@synthesize touch = touch_;

- (id)initWithTripleplayGestureGestureNode_TypeEnum:(TripleplayGestureGestureNode_TypeEnum *)type
                           withPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)touch {
  if ((self = [super init])) {
    self.timestamp = [PlaynCorePlayN currentTime];
    self.type = type;
    self.touch = touch;
  }
  return self;
}

- (PythagorasFPoint *)location {
  return [[[PythagorasFPoint alloc] initWithFloat:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch_)) localX] withFloat:[((id<PlaynCoreTouch_Event>) NIL_CHK(touch_)) localY]] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&touch_, self, nil);
  JreOperatorRetainedAssign(&type_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureNode *typedCopy = (TripleplayGestureGestureNode *) copy;
  typedCopy.timestamp = timestamp_;
  typedCopy.type = type_;
  typedCopy.touch = touch_;
}

@end

static TripleplayGestureGestureNode_TypeEnum *TripleplayGestureGestureNode_TypeEnum_START;
static TripleplayGestureGestureNode_TypeEnum *TripleplayGestureGestureNode_TypeEnum_END;
static TripleplayGestureGestureNode_TypeEnum *TripleplayGestureGestureNode_TypeEnum_MOVE;
static TripleplayGestureGestureNode_TypeEnum *TripleplayGestureGestureNode_TypeEnum_PAUSE;
static TripleplayGestureGestureNode_TypeEnum *TripleplayGestureGestureNode_TypeEnum_CANCEL;
IOSObjectArray *TripleplayGestureGestureNode_TypeEnum_values;

@implementation TripleplayGestureGestureNode_TypeEnum

+ (TripleplayGestureGestureNode_TypeEnum *)START {
  return TripleplayGestureGestureNode_TypeEnum_START;
}
+ (TripleplayGestureGestureNode_TypeEnum *)END {
  return TripleplayGestureGestureNode_TypeEnum_END;
}
+ (TripleplayGestureGestureNode_TypeEnum *)MOVE {
  return TripleplayGestureGestureNode_TypeEnum_MOVE;
}
+ (TripleplayGestureGestureNode_TypeEnum *)PAUSE {
  return TripleplayGestureGestureNode_TypeEnum_PAUSE;
}
+ (TripleplayGestureGestureNode_TypeEnum *)CANCEL {
  return TripleplayGestureGestureNode_TypeEnum_CANCEL;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [TripleplayGestureGestureNode_TypeEnum class]) {
    TripleplayGestureGestureNode_TypeEnum_START = [[TripleplayGestureGestureNode_TypeEnum alloc] initWithNSString:@"START" withInt:0];
    TripleplayGestureGestureNode_TypeEnum_END = [[TripleplayGestureGestureNode_TypeEnum alloc] initWithNSString:@"END" withInt:1];
    TripleplayGestureGestureNode_TypeEnum_MOVE = [[TripleplayGestureGestureNode_TypeEnum alloc] initWithNSString:@"MOVE" withInt:2];
    TripleplayGestureGestureNode_TypeEnum_PAUSE = [[TripleplayGestureGestureNode_TypeEnum alloc] initWithNSString:@"PAUSE" withInt:3];
    TripleplayGestureGestureNode_TypeEnum_CANCEL = [[TripleplayGestureGestureNode_TypeEnum alloc] initWithNSString:@"CANCEL" withInt:4];
    TripleplayGestureGestureNode_TypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ TripleplayGestureGestureNode_TypeEnum_START, TripleplayGestureGestureNode_TypeEnum_END, TripleplayGestureGestureNode_TypeEnum_MOVE, TripleplayGestureGestureNode_TypeEnum_PAUSE, TripleplayGestureGestureNode_TypeEnum_CANCEL, nil } count:5 type:[IOSClass classWithClass:[TripleplayGestureGestureNode_TypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:TripleplayGestureGestureNode_TypeEnum_values];
}

+ (TripleplayGestureGestureNode_TypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [TripleplayGestureGestureNode_TypeEnum_values count]; i++) {
    TripleplayGestureGestureNode_TypeEnum *e = [TripleplayGestureGestureNode_TypeEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
