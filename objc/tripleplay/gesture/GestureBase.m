//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/GestureBase.java
//
//  Created by Thomas on 7/1/13.
//

#import "Gesture.h"
#import "GestureNode.h"
#import "IOSObjectArray.h"
#import "Log.h"
#import "Logger.h"
#import "Signal.h"
#import "SignalView.h"
#import "UnitSignal.h"
#import "java/lang/Boolean.h"

@implementation TripleplayGestureGestureBase

- (TripleplayGestureGesture_StateEnum *)_state {
  return _state_;
}
- (void)set_state:(TripleplayGestureGesture_StateEnum *)_state {
  JreOperatorRetainedAssign(&_state_, self, _state);
}
@synthesize _state = _state_;
- (ReactUnitSignal *)_started {
  return _started_;
}
- (void)set_started:(ReactUnitSignal *)_started {
  JreOperatorRetainedAssign(&_started_, self, _started);
}
@synthesize _started = _started_;
- (ReactSignal *)_completed {
  return _completed_;
}
- (void)set_completed:(ReactSignal *)_completed {
  JreOperatorRetainedAssign(&_completed_, self, _completed);
}
@synthesize _completed = _completed_;
@synthesize _greedy = _greedy_;

- (id)greedyWithBOOL:(BOOL)value {
  _greedy_ = value;
  return [self asT];
}

- (BOOL)greedy {
  return _greedy_;
}

- (void)start {
  [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum PASSIVE]];
}

- (void)cancel {
  [self setStateWithTripleplayGestureGesture_StateEnum:[TripleplayGestureGesture_StateEnum UNQUALIFIED]];
}

- (void)evaluateWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  if (_state_ == [TripleplayGestureGesture_StateEnum PASSIVE] || _state_ == [TripleplayGestureGesture_StateEnum GREEDY]) [self updateStateWithTripleplayGestureGestureNode:node];
}

- (TripleplayGestureGesture_StateEnum *)state {
  return _state_;
}

- (id<ReactSignalView>)started {
  return _started_;
}

- (id<ReactSignalView>)completed {
  return _completed_;
}

- (void)clearMemory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateStateWithTripleplayGestureGestureNode:(TripleplayGestureGestureNode *)node {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStateWithTripleplayGestureGesture_StateEnum:(TripleplayGestureGesture_StateEnum *)state {
  if (state == _state_) return;
  if (state == [TripleplayGestureGesture_StateEnum GREEDY] && _state_ != [TripleplayGestureGesture_StateEnum PASSIVE]) [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"Transitioning to GREEDY from !PASSIVE" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:4, @"current", _state_, @"gesture", self ]];
  TripleplayGestureGesture_StateEnum *previous = _state_;
  JreOperatorRetainedAssign(&_state_, self, state);
  if (state == [TripleplayGestureGesture_StateEnum GREEDY]) [((ReactUnitSignal *) NIL_CHK(_started_)) emit];
  if ((state == [TripleplayGestureGesture_StateEnum UNQUALIFIED] || state == [TripleplayGestureGesture_StateEnum PASSIVE]) && previous == [TripleplayGestureGesture_StateEnum GREEDY]) [((ReactSignal *) NIL_CHK(_completed_)) emitWithId:[JavaLangBoolean valueOfWithBOOL:NO]];
  if (state == [TripleplayGestureGesture_StateEnum COMPLETE]) [((ReactSignal *) NIL_CHK(_completed_)) emitWithId:[JavaLangBoolean valueOfWithBOOL:YES]];
  if (state == [TripleplayGestureGesture_StateEnum PASSIVE]) [self clearMemory];
}

- (id)asT {
  return (TripleplayGestureGestureBase *) self;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_state_, self, [TripleplayGestureGesture_StateEnum PASSIVE]);
    JreOperatorRetainedAssign(&_started_, self, [[[ReactUnitSignal alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_completed_, self, ((ReactSignal *) [ReactSignal create]));
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_completed_, self, nil);
  JreOperatorRetainedAssign(&_started_, self, nil);
  JreOperatorRetainedAssign(&_state_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureBase *typedCopy = (TripleplayGestureGestureBase *) copy;
  typedCopy._state = _state_;
  typedCopy._started = _started_;
  typedCopy._completed = _completed_;
  typedCopy._greedy = _greedy_;
}

@end
