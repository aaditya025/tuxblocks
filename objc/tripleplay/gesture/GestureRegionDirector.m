//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/gesture/GestureRegionDirector.java
//
//  Created by Thomas on 7/1/13.
//

#import "Connection.h"
#import "GestureDirector.h"
#import "IOSObjectArray.h"
#import "IRectangle.h"
#import "Layer.h"
#import "Log.h"
#import "Logger.h"
#import "Point.h"
#import "Rectangle.h"
#import "Timer.h"
#import "Touch.h"
#import "java/lang/Integer.h"
#import "java/util/Collection.h"
#import "java/util/HashMap.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"

@implementation TripleplayGestureGestureRegionDirector

- (TripleplayUtilTimer *)_timer {
  return _timer_;
}
- (void)set_timer:(TripleplayUtilTimer *)_timer {
  JreOperatorRetainedAssign(&_timer_, self, _timer);
}
@synthesize _timer = _timer_;
- (id<PythagorasFIRectangle>)_bounds {
  return _bounds_;
}
- (void)set_bounds:(id<PythagorasFIRectangle>)_bounds {
  JreOperatorRetainedAssign(&_bounds_, self, _bounds);
}
@synthesize _bounds = _bounds_;
- (id<PlaynCoreConnection>)_connection {
  return _connection_;
}
- (void)set_connection:(id<PlaynCoreConnection>)_connection {
  JreOperatorRetainedAssign(&_connection_, self, _connection);
}
@synthesize _connection = _connection_;
- (id<JavaUtilMap>)_activeTouches {
  return _activeTouches_;
}
- (void)set_activeTouches:(id<JavaUtilMap>)_activeTouches {
  JreOperatorRetainedAssign(&_activeTouches_, self, _activeTouches);
}
@synthesize _activeTouches = _activeTouches_;
- (id<JavaUtilSet>)_ignoredTouches {
  return _ignoredTouches_;
}
- (void)set_ignoredTouches:(id<JavaUtilSet>)_ignoredTouches {
  JreOperatorRetainedAssign(&_ignoredTouches_, self, _ignoredTouches);
}
@synthesize _ignoredTouches = _ignoredTouches_;
- (id<JavaUtilMap>)_regions {
  return _regions_;
}
- (void)set_regions:(id<JavaUtilMap>)_regions {
  JreOperatorRetainedAssign(&_regions_, self, _regions);
}
@synthesize _regions = _regions_;

- (id)initTripleplayGestureGestureRegionDirectorWithTripleplayUtilTimer:(TripleplayUtilTimer *)timer {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_activeTouches_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_ignoredTouches_, self, [[[JavaUtilHashSet alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_regions_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_timer_, self, timer);
  }
  return self;
}

- (id)initWithTripleplayUtilTimer:(TripleplayUtilTimer *)timer {
  return [self initTripleplayGestureGestureRegionDirectorWithTripleplayUtilTimer:timer];
}

- (id)initWithTripleplayUtilTimer:(TripleplayUtilTimer *)timer
               withPlaynCoreLayer:(id<PlaynCoreLayer>)layer
        withPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  if ((self = [self initTripleplayGestureGestureRegionDirectorWithTripleplayUtilTimer:timer])) {
    (void) [self setLayerWithPlaynCoreLayer:layer withPythagorasFIRectangle:bounds];
  }
  return self;
}

- (TripleplayGestureGestureRegionDirector *)setLayerWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                                             withPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  [self remove];
  JreOperatorRetainedAssign(&_bounds_, self, bounds);
  (void) [((id<PlaynCoreLayer>) NIL_CHK(layer)) setHitTesterWithPlaynCoreLayer_HitTester:[[[TripleplayGestureGestureRegionDirector_$1 alloc] initWithTripleplayGestureGestureRegionDirector:self] autorelease]];
  JreOperatorRetainedAssign(&_connection_, self, [((id<PlaynCoreLayer>) NIL_CHK(layer)) addListenerWithPlaynCoreTouch_LayerListener:self]);
  return self;
}

- (void)remove {
  if (_connection_ != nil) [_connection_ disconnect];
}

- (id<JavaUtilCollection>)getRegions {
  return ((id<JavaUtilCollection>) [((id<JavaUtilMap>) NIL_CHK(_regions_)) values]);
}

- (TripleplayGestureGestureDirector *)getRegionWithFloat:(float)x
                                               withFloat:(float)y
                                               withFloat:(float)width
                                               withFloat:(float)height {
  return [self getRegionWithPythagorasFIRectangle:[[[PythagorasFRectangle alloc] initWithFloat:x withFloat:y withFloat:width withFloat:height] autorelease]];
}

- (TripleplayGestureGestureDirector *)getRegionWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  if (![((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) intersectsWithPythagorasFIRectangle:bounds]) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"Supplied region is not within our defined bounds" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:4, @"_bounds", _bounds_, @"bounds", bounds ]];
    return nil;
  }
  PythagorasFRectangle *regionBounds = [((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) intersectionWithPythagorasFIRectangle:bounds];
  TripleplayGestureGestureDirector *region = ((TripleplayGestureGestureDirector *) [((id<JavaUtilMap>) NIL_CHK(_regions_)) getWithId:regionBounds]);
  if (region != nil) return region;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(_regions_)) keySet]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      PythagorasFRectangle *existingRegionBounds = ((PythagorasFRectangle *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((PythagorasFRectangle *) NIL_CHK(existingRegionBounds)) intersectsWithPythagorasFIRectangle:regionBounds]) {
        [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"New region intersects existing region" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:4, @"existing", existingRegionBounds, @"new", regionBounds ]];
        return nil;
      }
    }
  }
  region = [[[TripleplayGestureGestureDirector alloc] initWithPythagorasFIRectangle:regionBounds withTripleplayUtilTimer:_timer_] autorelease];
  (void) [((id<JavaUtilMap>) NIL_CHK(_regions_)) putWithId:regionBounds withId:region];
  return region;
}

- (TripleplayGestureGestureDirector *)getPercentRegionWithFloat:(float)perX
                                                      withFloat:(float)perY
                                                      withFloat:(float)perWidth
                                                      withFloat:(float)perHeight {
  return [self getRegionWithFloat:[self applyPercentXWithFloat:perX] withFloat:[self applyPercentYWithFloat:perY] withFloat:[self applyPercentXWithFloat:perWidth] withFloat:[self applyPercentYWithFloat:perHeight]];
}

- (TripleplayGestureGestureDirector *)getPercentRegionWithPythagorasFIRectangle:(id<PythagorasFIRectangle>)bounds {
  return [self getRegionWithFloat:[((id<PythagorasFIRectangle>) NIL_CHK(bounds)) x] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(bounds)) y] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(bounds)) width] withFloat:[((id<PythagorasFIRectangle>) NIL_CHK(bounds)) height]];
}

- (void)onTouchStartWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)event {
  if ([((id<JavaUtilMap>) NIL_CHK(_regions_)) isEmpty]) return;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) [((id<JavaUtilMap>) NIL_CHK(_regions_)) values]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplayGestureGestureDirector *mgr = ((TripleplayGestureGestureDirector *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((TripleplayGestureGestureDirector *) NIL_CHK(mgr)) touchInBoundsWithPlaynCoreTouch_Event:event]) {
        (void) [((id<JavaUtilMap>) NIL_CHK(_activeTouches_)) putWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]] withId:[[[TripleplayGestureGestureRegionDirector_TrackedTouch alloc] initWithTripleplayGestureGestureDirector:mgr withPlaynCoreTouch_Event:event] autorelease]];
        [((TripleplayGestureGestureDirector *) NIL_CHK(mgr)) onTouchStartWithPlaynCoreTouch_Event:event];
        return;
      }
    }
  }
  [((id<JavaUtilSet>) NIL_CHK(_ignoredTouches_)) addWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]];
}

- (void)onTouchMoveWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)event {
  if ([((id<JavaUtilMap>) NIL_CHK(_regions_)) isEmpty]) return;
  TripleplayGestureGestureRegionDirector_TrackedTouch *touch = ((TripleplayGestureGestureRegionDirector_TrackedTouch *) [((id<JavaUtilMap>) NIL_CHK(_activeTouches_)) getWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]]);
  if (touch == nil && ![((id<JavaUtilSet>) NIL_CHK(_ignoredTouches_)) containsWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]]) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"No start for move event" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"event", event ]];
  }
  else if (touch != nil) {
    [((TripleplayGestureGestureDirector *) NIL_CHK(touch.region)) onTouchMoveWithPlaynCoreTouch_Event:event];
  }
}

- (void)onTouchEndWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)event {
  if ([((id<JavaUtilMap>) NIL_CHK(_regions_)) isEmpty]) return;
  TripleplayGestureGestureRegionDirector_TrackedTouch *touch = ((TripleplayGestureGestureRegionDirector_TrackedTouch *) [((id<JavaUtilMap>) NIL_CHK(_activeTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]]);
  if (![((id<JavaUtilSet>) NIL_CHK(_ignoredTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]] && touch == nil) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"No start for end event" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"event", event ]];
  }
  else if (touch != nil) {
    [((TripleplayGestureGestureDirector *) NIL_CHK(touch.region)) onTouchEndWithPlaynCoreTouch_Event:event];
  }
}

- (void)onTouchCancelWithPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)event {
  if ([((id<JavaUtilMap>) NIL_CHK(_regions_)) isEmpty]) return;
  TripleplayGestureGestureRegionDirector_TrackedTouch *touch = ((TripleplayGestureGestureRegionDirector_TrackedTouch *) [((id<JavaUtilMap>) NIL_CHK(_activeTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]]);
  if (![((id<JavaUtilSet>) NIL_CHK(_ignoredTouches_)) removeWithId:[JavaLangInteger valueOfWithInt:[((id<PlaynCoreTouch_Event>) NIL_CHK(event)) id__]]] && touch == nil) {
    [((TripleplayUtilLogger *) NIL_CHK([TripleplayGestureLog log])) warningWithNSString:@"No start for cancel event" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, @"event", event ]];
  }
  else if (touch != nil) {
    [((TripleplayGestureGestureDirector *) NIL_CHK(touch.region)) onTouchCancelWithPlaynCoreTouch_Event:event];
  }
}

- (float)applyPercentXWithFloat:(float)x {
  return [((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) x] + [((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) width] * x;
}

- (float)applyPercentYWithFloat:(float)y {
  return [((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) y] + [((id<PythagorasFIRectangle>) NIL_CHK(_bounds_)) height] * y;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_regions_, self, nil);
  JreOperatorRetainedAssign(&_ignoredTouches_, self, nil);
  JreOperatorRetainedAssign(&_activeTouches_, self, nil);
  JreOperatorRetainedAssign(&_connection_, self, nil);
  JreOperatorRetainedAssign(&_bounds_, self, nil);
  JreOperatorRetainedAssign(&_timer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureRegionDirector *typedCopy = (TripleplayGestureGestureRegionDirector *) copy;
  typedCopy._timer = _timer_;
  typedCopy._bounds = _bounds_;
  typedCopy._connection = _connection_;
  typedCopy._activeTouches = _activeTouches_;
  typedCopy._ignoredTouches = _ignoredTouches_;
  typedCopy._regions = _regions_;
}

@end
@implementation TripleplayGestureGestureRegionDirector_TrackedTouch

- (TripleplayGestureGestureDirector *)region {
  return region_;
}
- (void)setRegion:(TripleplayGestureGestureDirector *)region {
  JreOperatorRetainedAssign(&region_, self, region);
}
@synthesize region = region_;
- (id<PlaynCoreTouch_Event>)startEvent {
  return startEvent_;
}
- (void)setStartEvent:(id<PlaynCoreTouch_Event>)startEvent {
  JreOperatorRetainedAssign(&startEvent_, self, startEvent);
}
@synthesize startEvent = startEvent_;

- (id)initWithTripleplayGestureGestureDirector:(TripleplayGestureGestureDirector *)region
                      withPlaynCoreTouch_Event:(id<PlaynCoreTouch_Event>)startEvent {
  if ((self = [super init])) {
    self.region = region;
    self.startEvent = startEvent;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&startEvent_, self, nil);
  JreOperatorRetainedAssign(&region_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureRegionDirector_TrackedTouch *typedCopy = (TripleplayGestureGestureRegionDirector_TrackedTouch *) copy;
  typedCopy.region = region_;
  typedCopy.startEvent = startEvent_;
}

@end
@implementation TripleplayGestureGestureRegionDirector_$1

- (TripleplayGestureGestureRegionDirector *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayGestureGestureRegionDirector *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withPythagorasFPoint:(PythagorasFPoint *)p {
  return [((id<PythagorasFIRectangle>) NIL_CHK(this$0_._bounds)) containsWithFloat:((PythagorasFPoint *) NIL_CHK(p)).x_ withFloat:((PythagorasFPoint *) NIL_CHK(p)).y_] ? layer : nil;
}

- (id)initWithTripleplayGestureGestureRegionDirector:(TripleplayGestureGestureRegionDirector *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayGestureGestureRegionDirector_$1 *typedCopy = (TripleplayGestureGestureRegionDirector_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
