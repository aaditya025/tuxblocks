//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/sound/MultiClip.java
//
//  Created by Thomas on 7/1/13.
//

#import "Clip.h"
#import "PlayN.h"
#import "SoundBoard.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"

@implementation TripleplaySoundMultiClip

- (TripleplaySoundSoundBoard *)_board {
  return _board_;
}
- (void)set_board:(TripleplaySoundSoundBoard *)_board {
  JreOperatorRetainedAssign(&_board_, self, _board);
}
@synthesize _board = _board_;
- (NSString *)_path {
  return _path_;
}
- (void)set_path:(NSString *)_path {
  JreOperatorRetainedAssign(&_path_, self, _path);
}
@synthesize _path = _path_;
@synthesize _reserveCopies = _reserveCopies_;
@synthesize _duration = _duration_;
- (id<JavaUtilList>)_copies {
  return _copies_;
}
- (void)set_copies:(id<JavaUtilList>)_copies {
  JreOperatorRetainedAssign(&_copies_, self, _copies);
}
@synthesize _copies = _copies_;

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)board
                           withNSString:(NSString *)path
                                withInt:(int)reserveCopies
                              withFloat:(float)duration {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_copies_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_board_, self, board);
    JreOperatorRetainedAssign(&_path_, self, path);
    _reserveCopies_ = reserveCopies;
    _duration_ = duration * 1000;
  }
  return self;
}

- (id<TripleplaySoundMultiClip_Copy>)reserve {
  double now = [PlaynCorePlayN currentTime];
  for (int ii = 0, ll = [((id<JavaUtilList>) NIL_CHK(_copies_)) size]; ii < ll; ii++) {
    TripleplaySoundMultiClip_CopyImpl *copy_ = ((TripleplaySoundMultiClip_CopyImpl *) [((id<JavaUtilList>) NIL_CHK(_copies_)) getWithInt:ii]);
    if (((TripleplaySoundMultiClip_CopyImpl *) NIL_CHK(copy_)).releaseTime < now) {
      return ((TripleplaySoundMultiClip_CopyImpl *) [((id<JavaUtilList>) NIL_CHK(_copies_)) removeWithInt:ii]);
    }
  }
  return [[[TripleplaySoundMultiClip_CopyImpl alloc] initWithTripleplaySoundMultiClip:self] autorelease];
}

- (void)release__ {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_copies_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplaySoundMultiClip_CopyImpl *copy_ = ((TripleplaySoundMultiClip_CopyImpl *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<TripleplaySoundClip>) NIL_CHK(copy_.sound)) release__];
    }
  }
  [((id<JavaUtilList>) NIL_CHK(_copies_)) clear];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_copies_, self, nil);
  JreOperatorRetainedAssign(&_path_, self, nil);
  JreOperatorRetainedAssign(&_board_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundMultiClip *typedCopy = (TripleplaySoundMultiClip *) copy;
  typedCopy._board = _board_;
  typedCopy._path = _path_;
  typedCopy._reserveCopies = _reserveCopies_;
  typedCopy._duration = _duration_;
  typedCopy._copies = _copies_;
}

@end
@implementation TripleplaySoundMultiClip_CopyImpl

- (TripleplaySoundMultiClip *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplaySoundMultiClip *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<TripleplaySoundClip>)sound {
  return sound_;
}
- (void)setSound:(id<TripleplaySoundClip>)sound {
  JreOperatorRetainedAssign(&sound_, self, sound);
}
@synthesize sound = sound_;
@synthesize releaseTime = releaseTime_;

- (float)volume {
  return [((id<TripleplaySoundClip>) NIL_CHK(sound_)) volume];
}

- (void)setVolumeWithFloat:(float)volume {
  [((id<TripleplaySoundClip>) NIL_CHK(sound_)) setVolumeWithFloat:volume];
}

- (void)play {
  [((id<TripleplaySoundClip>) NIL_CHK(sound_)) play];
  if ([((id<JavaUtilList>) NIL_CHK(this$0_._copies)) size] < this$0_._reserveCopies) {
    releaseTime_ = [PlaynCorePlayN currentTime] + this$0_._duration;
    [((id<JavaUtilList>) NIL_CHK(this$0_._copies)) addWithId:self];
  }
}

- (void)release__ {
  if ([((id<JavaUtilList>) NIL_CHK(this$0_._copies)) size] < this$0_._reserveCopies) {
    releaseTime_ = [PlaynCorePlayN currentTime];
    [((id<JavaUtilList>) NIL_CHK(this$0_._copies)) addWithId:self];
  }
}

- (void)stop {
  [((id<TripleplaySoundClip>) NIL_CHK(sound_)) stop];
  releaseTime_ = 0;
}

- (BOOL)isPlaying {
  return [((id<TripleplaySoundClip>) NIL_CHK(sound_)) isPlaying];
}

- (id)initWithTripleplaySoundMultiClip:(TripleplaySoundMultiClip *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&sound_, self, [((TripleplaySoundSoundBoard *) NIL_CHK(outer$._board)) getClipWithNSString:outer$._path]);
    {
      [((id<TripleplaySoundClip>) NIL_CHK(sound_)) setVolumeWithFloat:1];
      [((id<TripleplaySoundClip>) NIL_CHK(sound_)) preload];
    }
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&sound_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundMultiClip_CopyImpl *typedCopy = (TripleplaySoundMultiClip_CopyImpl *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.sound = sound_;
  typedCopy.releaseTime = releaseTime_;
}

@end
