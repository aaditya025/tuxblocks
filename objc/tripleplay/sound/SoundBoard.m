//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/sound/SoundBoard.java
//
//  Created by Thomas on 7/1/13.
//

#import "Assets.h"
#import "Clip.h"
#import "Connection.h"
#import "IOSClass.h"
#import "Interpolator.h"
#import "Loop.h"
#import "MathUtil.h"
#import "PlayN.h"
#import "Sound.h"
#import "Value.h"
#import "java/lang/Boolean.h"
#import "java/lang/Float.h"
#import "java/util/ArrayList.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Set.h"

@implementation TripleplaySoundSoundBoard

- (ReactValue *)volume {
  return volume_;
}
- (void)setVolume:(ReactValue *)volume {
  JreOperatorRetainedAssign(&volume_, self, volume);
}
@synthesize volume = volume_;
- (ReactValue *)muted {
  return muted_;
}
- (void)setMuted:(ReactValue *)muted {
  JreOperatorRetainedAssign(&muted_, self, muted);
}
@synthesize muted = muted_;
- (id<JavaUtilSet>)_active {
  return _active_;
}
- (void)set_active:(id<JavaUtilSet>)_active {
  JreOperatorRetainedAssign(&_active_, self, _active);
}
@synthesize _active = _active_;
- (id<JavaUtilList>)_faders {
  return _faders_;
}
- (void)set_faders:(id<JavaUtilList>)_faders {
  JreOperatorRetainedAssign(&_faders_, self, _faders);
}
@synthesize _faders = _faders_;

+ (float)FADE_DURATION {
  return TripleplaySoundSoundBoard_FADE_DURATION;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&volume_, self, [[[TripleplaySoundSoundBoard_$1 alloc] initWithJavaLangFloat:[JavaLangFloat valueOfWithFloat:1.0f]] autorelease]);
    JreOperatorRetainedAssign(&muted_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangBoolean valueOfWithBOOL:NO]]));
    JreOperatorRetainedAssign(&_active_, self, [[[JavaUtilHashSet alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_faders_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    (void) [((ReactValue *) NIL_CHK(volume_)) connectWithReactValueView_Listener:[[[TripleplaySoundSoundBoard_$2 alloc] initWithTripleplaySoundSoundBoard:self] autorelease]];
    (void) [((ReactValue *) NIL_CHK(muted_)) connectWithReactValueView_Listener:[[[TripleplaySoundSoundBoard_$3 alloc] initWithTripleplaySoundSoundBoard:self] autorelease]];
  }
  return self;
}

- (void)updateWithInt:(int)delta {
  for (int ii = 0, ll = [((id<JavaUtilList>) NIL_CHK(_faders_)) size]; ii < ll; ii++) {
    if ([((TripleplaySoundSoundBoard_Fader *) [((id<JavaUtilList>) NIL_CHK(_faders_)) getWithInt:ii]) updateWithInt:delta]) {
      (void) [((id<JavaUtilList>) NIL_CHK(_faders_)) removeWithInt:ii--];
      ll--;
    }
  }
}

- (id<TripleplaySoundClip>)getClipWithNSString:(NSString *)path {
  return [[[TripleplaySoundSoundBoard_$4 alloc] initWithTripleplaySoundSoundBoard:self withNSString:path] autorelease];
}

- (id<TripleplaySoundLoop>)getLoopWithNSString:(NSString *)path {
  return [[[TripleplaySoundSoundBoard_$5 alloc] initWithTripleplaySoundSoundBoard:self withNSString:path] autorelease];
}

- (BOOL)shouldPlay {
  return ![((JavaLangBoolean *) [((ReactValue *) NIL_CHK(muted_)) get]) booleanValue] && [((JavaLangFloat *) [((ReactValue *) NIL_CHK(volume_)) get]) floatValue] > 0;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_faders_, self, nil);
  JreOperatorRetainedAssign(&_active_, self, nil);
  JreOperatorRetainedAssign(&muted_, self, nil);
  JreOperatorRetainedAssign(&volume_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard *typedCopy = (TripleplaySoundSoundBoard *) copy;
  typedCopy.volume = volume_;
  typedCopy.muted = muted_;
  typedCopy._active = _active_;
  typedCopy._faders = _faders_;
}

@end
@implementation TripleplaySoundSoundBoard_ClipImpl_$1

- (TripleplaySoundSoundBoard_ClipImpl *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplaySoundSoundBoard_ClipImpl *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (BOOL)play {
  [this$0_ play];
  return YES;
}

- (void)stop {
  [this$0_ stop];
}

- (id)initWithTripleplaySoundSoundBoard_ClipImpl:(TripleplaySoundSoundBoard_ClipImpl *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_ClipImpl_$1 *typedCopy = (TripleplaySoundSoundBoard_ClipImpl_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplaySoundSoundBoard_Fader

- (BOOL)updateWithInt:(int)delta {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplaySoundSoundBoard_LazySound_$1

- (TripleplaySoundSoundBoard_LazySound *)this$1 {
  return this$1_;
}
- (void)setThis$1:(TripleplaySoundSoundBoard_LazySound *)this$1 {
  JreOperatorRetainedAssign(&this$1_, self, this$1);
}
@synthesize this$1 = this$1_;
@synthesize _range = _range_;
@synthesize _elapsed = _elapsed_;
@synthesize val$fadeMillis = val$fadeMillis_;

- (BOOL)updateWithInt:(int)delta {
  _elapsed_ += delta;
  float vol = [((TripleplayUtilInterpolator *) NIL_CHK([TripleplayUtilInterpolator LINEAR])) applyWithFloat:0 withFloat:_range_ withFloat:_elapsed_ withFloat:val$fadeMillis_];
  [this$1_ updateVolumeWithFloat:vol];
  return (vol >= _range_);
}

- (id)initWithTripleplaySoundSoundBoard_LazySound:(TripleplaySoundSoundBoard_LazySound *)outer$
                                        withFloat:(float)capture$0 {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$.this$0])) {
    JreOperatorRetainedAssign(&this$1_, self, outer$);
    val$fadeMillis_ = capture$0;
    _range_ = [((JavaLangFloat *) [((ReactValue *) NIL_CHK(outer$.this$0.volume)) get]) floatValue];
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_LazySound_$1 *typedCopy = (TripleplaySoundSoundBoard_LazySound_$1 *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy._range = _range_;
  typedCopy._elapsed = _elapsed_;
  typedCopy.val$fadeMillis = val$fadeMillis_;
}

@end
@implementation TripleplaySoundSoundBoard_LazySound_$2

- (TripleplaySoundSoundBoard_LazySound *)this$1 {
  return this$1_;
}
- (void)setThis$1:(TripleplaySoundSoundBoard_LazySound *)this$1 {
  JreOperatorRetainedAssign(&this$1_, self, this$1);
}
@synthesize this$1 = this$1_;
@synthesize _start = _start_;
@synthesize _elapsed = _elapsed_;
@synthesize val$fadeMillis = val$fadeMillis_;

- (BOOL)updateWithInt:(int)delta {
  _elapsed_ += delta;
  float vol = [((TripleplayUtilInterpolator *) NIL_CHK([TripleplayUtilInterpolator LINEAR])) applyWithFloat:_start_ withFloat:-_start_ withFloat:_elapsed_ withFloat:val$fadeMillis_];
  [this$1_ updateVolumeWithFloat:vol];
  if (vol > 0) return NO;
  else {
    [this$1_ fadeOutComplete];
    return YES;
  }
}

- (id)initWithTripleplaySoundSoundBoard_LazySound:(TripleplaySoundSoundBoard_LazySound *)outer$
                                        withFloat:(float)capture$0 {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$.this$0])) {
    JreOperatorRetainedAssign(&this$1_, self, outer$);
    val$fadeMillis_ = capture$0;
    _start_ = [((JavaLangFloat *) [((ReactValue *) NIL_CHK(outer$.this$0.volume)) get]) floatValue];
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_LazySound_$2 *typedCopy = (TripleplaySoundSoundBoard_LazySound_$2 *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy._start = _start_;
  typedCopy._elapsed = _elapsed_;
  typedCopy.val$fadeMillis = val$fadeMillis_;
}

@end
@implementation TripleplaySoundSoundBoard_$1

- (JavaLangFloat *)updateAndNotifyIfWithJavaLangFloat:(JavaLangFloat *)value {
  return (JavaLangFloat *) [super updateAndNotifyIfWithId:[PythagorasFMathUtil clampWithFloat:[((JavaLangFloat *) NIL_CHK(value)) floatValue] withFloat:0 withFloat:1]];
}

- (id)initWithJavaLangFloat:(JavaLangFloat *)arg$0 {
  return [super initWithJavaLangFloat:arg$0];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplaySoundSoundBoard_$2

- (TripleplaySoundSoundBoard *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplaySoundSoundBoard *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangFloat *)volume {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(this$0_._active)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplaySoundSoundBoard_LoopImpl *active = ((TripleplaySoundSoundBoard_LoopImpl *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TripleplaySoundSoundBoard_LoopImpl *) NIL_CHK(active)) updateVolumeWithFloat:[((JavaLangFloat *) NIL_CHK(volume)) floatValue]];
    }
  }
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_$2 *typedCopy = (TripleplaySoundSoundBoard_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplaySoundSoundBoard_$3

- (TripleplaySoundSoundBoard *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplaySoundSoundBoard *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmitWithId:(JavaLangBoolean *)muted {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(this$0_._active)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TripleplaySoundSoundBoard_LoopImpl *active = ((TripleplaySoundSoundBoard_LoopImpl *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TripleplaySoundSoundBoard_LoopImpl *) NIL_CHK(active)) fadeForMuteWithBOOL:[((JavaLangBoolean *) NIL_CHK(muted)) booleanValue]];
    }
  }
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_$3 *typedCopy = (TripleplaySoundSoundBoard_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TripleplaySoundSoundBoard_LazySound

- (TripleplaySoundSoundBoard *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplaySoundSoundBoard *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreSound>)sound {
  return sound_;
}
- (void)setSound:(id<PlaynCoreSound>)sound {
  JreOperatorRetainedAssign(&sound_, self, sound);
}
@synthesize sound = sound_;
@synthesize _volume = _volume_;

- (BOOL)isPlaying {
  return (sound_ == nil) ? NO : [((id<PlaynCoreSound>) NIL_CHK(sound_)) isPlaying];
}

- (void)setVolumeWithFloat:(float)volume {
  _volume_ = volume;
  [self updateVolumeWithFloat:[((JavaLangFloat *) [((ReactValue *) NIL_CHK(this$0_.volume)) get]) floatValue]];
}

- (float)volume {
  return _volume_;
}

- (void)release__ {
  if (sound_ != nil) {
    if ([sound_ isPlaying]) [sound_ stop];
    [sound_ release__];
    JreOperatorRetainedAssign(&sound_, self, nil);
  }
}

- (NSUInteger)hash {
  return [[self path] hash];
}

- (BOOL)isEqual:(id)other {
  return (other == self) ? YES : (other != nil) && [NIL_CHK(other) getClass] == [self getClass] && [[self path] isEqual:[((TripleplaySoundSoundBoard_LazySound *) other) path]];
}

- (void)updateVolumeWithFloat:(float)volume {
  if ([self isPlaying]) {
    float effectiveVolume = volume * _volume_;
    if (effectiveVolume > 0) [((id<PlaynCoreSound>) NIL_CHK(sound_)) setVolumeWithFloat:effectiveVolume];
    else [((id<PlaynCoreSound>) NIL_CHK(sound_)) stop];
  }
}

- (void)startFadeInWithFloat:(float)fadeMillis {
  if (![self isPlaying]) [((id<PlaynCoreSound>) [self prepareSound]) play];
  [((id<PlaynCoreSound>) NIL_CHK(sound_)) setVolumeWithFloat:0];
  [((id<JavaUtilList>) NIL_CHK(this$0_._faders)) addWithId:[[[TripleplaySoundSoundBoard_LazySound_$1 alloc] initWithTripleplaySoundSoundBoard_LazySound:self withFloat:fadeMillis] autorelease]];
}

- (void)startFadeOutWithFloat:(float)fadeMillis {
  if ([self isPlaying]) [((id<JavaUtilList>) NIL_CHK(this$0_._faders)) addWithId:[[[TripleplaySoundSoundBoard_LazySound_$2 alloc] initWithTripleplaySoundSoundBoard_LazySound:self withFloat:fadeMillis] autorelease]];
}

- (id<PlaynCoreSound>)prepareSound {
  if (sound_ == nil) JreOperatorRetainedAssign(&sound_, self, [self loadSoundWithNSString:[self path]]);
  [((id<PlaynCoreSound>) NIL_CHK(sound_)) setVolumeWithFloat:[((JavaLangFloat *) [((ReactValue *) NIL_CHK(this$0_.volume)) get]) floatValue] * _volume_];
  return sound_;
}

- (void)fadeOutComplete {
}

- (id<PlaynCoreSound>)loadSoundWithNSString:(NSString *)path {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)path {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)play {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    _volume_ = 1;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&sound_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_LazySound *typedCopy = (TripleplaySoundSoundBoard_LazySound *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.sound = sound_;
  typedCopy._volume = _volume_;
}

@end
@implementation TripleplaySoundSoundBoard_ClipImpl

- (TripleplaySoundSoundBoard *)this$1 {
  return this$1_;
}
- (void)setThis$1:(TripleplaySoundSoundBoard *)this$1 {
  JreOperatorRetainedAssign(&this$1_, self, this$1);
}
@synthesize this$1 = this$1_;

- (void)preload {
  if ([this$1_ shouldPlay]) (void) [self prepareSound];
}

- (void)play {
  if ([this$1_ shouldPlay]) [((id<PlaynCoreSound>) [self prepareSound]) play];
}

- (void)fadeInWithFloat:(float)fadeMillis {
  if ([this$1_ shouldPlay]) [self startFadeInWithFloat:fadeMillis];
}

- (void)fadeOutWithFloat:(float)fadeMillis {
  if ([this$1_ shouldPlay]) [self startFadeOutWithFloat:fadeMillis];
}

- (void)stop {
  if ([self isPlaying]) [((id<PlaynCoreSound>) NIL_CHK(sound_)) stop];
}

- (id<PlaynCoreSound>)asSound {
  return [[[TripleplaySoundSoundBoard_ClipImpl_$1 alloc] initWithTripleplaySoundSoundBoard_ClipImpl:self] autorelease];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"clip:%@", sound_];
}

- (id<PlaynCoreSound>)loadSoundWithNSString:(NSString *)path {
  return [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getSoundWithNSString:path];
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$])) {
    JreOperatorRetainedAssign(&this$1_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_ClipImpl *typedCopy = (TripleplaySoundSoundBoard_ClipImpl *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplaySoundSoundBoard_$4

- (NSString *)val$path {
  return val$path_;
}
- (void)setVal$path:(NSString *)val$path {
  JreOperatorRetainedAssign(&val$path_, self, val$path);
}
@synthesize val$path = val$path_;

- (NSString *)path {
  return val$path_;
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$
                           withNSString:(NSString *)capture$0 {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$])) {
    JreOperatorRetainedAssign(&val$path_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$path_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_$4 *typedCopy = (TripleplaySoundSoundBoard_$4 *) copy;
  typedCopy.val$path = val$path_;
}

@end
@implementation TripleplaySoundSoundBoard_LoopImpl

- (TripleplaySoundSoundBoard *)this$1 {
  return this$1_;
}
- (void)setThis$1:(TripleplaySoundSoundBoard *)this$1 {
  JreOperatorRetainedAssign(&this$1_, self, this$1);
}
@synthesize this$1 = this$1_;

- (void)fadeForMuteWithBOOL:(BOOL)muted {
  if (muted) [self startFadeOutWithFloat:TripleplaySoundSoundBoard_FADE_DURATION];
  else [self startFadeInWithFloat:TripleplaySoundSoundBoard_FADE_DURATION];
}

- (void)play {
  if (![((id<JavaUtilSet>) NIL_CHK(this$1_._active)) addWithId:self]) return;
  if ([this$1_ shouldPlay] && ![self isPlaying]) [((id<PlaynCoreSound>) [self prepareSound]) play];
}

- (void)fadeInWithFloat:(float)fadeMillis {
  if ([((id<JavaUtilSet>) NIL_CHK(this$1_._active)) addWithId:self] && [this$1_ shouldPlay]) [self startFadeInWithFloat:fadeMillis];
}

- (void)fadeOutWithFloat:(float)fadeMillis {
  if ([((id<JavaUtilSet>) NIL_CHK(this$1_._active)) removeWithId:self] && [this$1_ shouldPlay]) [self startFadeOutWithFloat:fadeMillis];
}

- (void)stop {
  if ([((id<JavaUtilSet>) NIL_CHK(this$1_._active)) removeWithId:self] && [self isPlaying]) [((id<PlaynCoreSound>) NIL_CHK(sound_)) stop];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"loop:%@", sound_];
}

- (id<PlaynCoreSound>)prepareSound {
  id<PlaynCoreSound> sound = [super prepareSound];
  [((id<PlaynCoreSound>) NIL_CHK(sound)) setLoopingWithBOOL:YES];
  return sound;
}

- (void)fadeOutComplete {
  [((id<PlaynCoreSound>) NIL_CHK(sound_)) release__];
  JreOperatorRetainedAssign(&sound_, self, nil);
}

- (id<PlaynCoreSound>)loadSoundWithNSString:(NSString *)path {
  return [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getMusicWithNSString:path];
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$ {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$])) {
    JreOperatorRetainedAssign(&this$1_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_LoopImpl *typedCopy = (TripleplaySoundSoundBoard_LoopImpl *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation TripleplaySoundSoundBoard_$5

- (NSString *)val$path {
  return val$path_;
}
- (void)setVal$path:(NSString *)val$path {
  JreOperatorRetainedAssign(&val$path_, self, val$path);
}
@synthesize val$path = val$path_;

- (NSString *)path {
  return val$path_;
}

- (id)initWithTripleplaySoundSoundBoard:(TripleplaySoundSoundBoard *)outer$
                           withNSString:(NSString *)capture$0 {
  if ((self = [super initWithTripleplaySoundSoundBoard:outer$])) {
    JreOperatorRetainedAssign(&val$path_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$path_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplaySoundSoundBoard_$5 *typedCopy = (TripleplaySoundSoundBoard_$5 *) copy;
  typedCopy.val$path = val$path_;
}

@end
