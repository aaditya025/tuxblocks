//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Hud.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/IllegalStateException.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/lang/System.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Font.h"
#import "playn/core/Graphics.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "playn/core/gl/GLContext.h"
#import "react/Value.h"

@implementation TripleplayUtilHud

- (id<PlaynCoreImageLayer>)layer {
  return layer_;
}
- (void)setLayer:(id<PlaynCoreImageLayer>)layer {
  JreOperatorRetainedAssign(&layer_, self, layer);
}
@synthesize layer = layer_;
- (id<JavaUtilList>)_rows {
  return _rows_;
}
- (void)set_rows:(id<JavaUtilList>)_rows {
  JreOperatorRetainedAssign(&_rows_, self, _rows);
}
@synthesize _rows = _rows_;
@synthesize _paints = _paints_;
- (PlaynCoreTextFormat *)_fmt {
  return _fmt_;
}
- (void)set_fmt:(PlaynCoreTextFormat *)_fmt {
  JreOperatorRetainedAssign(&_fmt_, self, _fmt);
}
@synthesize _fmt = _fmt_;
@synthesize _textColor = _textColor_;
@synthesize _bgColor = _bgColor_;
- (id<PlaynCoreCanvasImage>)_image {
  return _image_;
}
- (void)set_image:(id<PlaynCoreCanvasImage>)_image {
  JreOperatorRetainedAssign(&_image_, self, _image);
}
@synthesize _image = _image_;

+ (float)GAP {
  return TripleplayUtilHud_GAP;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_rows_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_fmt_, self, [((PlaynCoreTextFormat *) [[[PlaynCoreTextFormat alloc] init] autorelease]) withFontWithPlaynCoreFont:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createFontWithNSString:@"Helvetica" withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:12]]);
    _textColor_ = (int) 0xFF000000;
    _bgColor_ = (int) 0xFFFFFFFF;
    JreOperatorRetainedAssign(&_image_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:1 withFloat:1]);
    JreOperatorRetainedAssign(&layer_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:_image_]);
  }
  return self;
}

- (TripleplayUtilHud *)setFontWithPlaynCoreFont:(id<PlaynCoreFont>)font {
  if (![((id<JavaUtilList>) NIL_CHK(_rows_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Set font before adding rows."] autorelease];
  JreOperatorRetainedAssign(&_fmt_, self, [((PlaynCoreTextFormat *) NIL_CHK(_fmt_)) withFontWithPlaynCoreFont:font]);
  return self;
}

- (TripleplayUtilHud *)setColorsWithInt:(int)textColor
                                withInt:(int)bgColor {
  if (![((id<JavaUtilList>) NIL_CHK(_rows_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Set colors before adding rows."] autorelease];
  _textColor_ = textColor;
  _bgColor_ = bgColor;
  return self;
}

- (void)addWithNSString:(NSString *)label
               withBOOL:(BOOL)header {
  id<PlaynCoreTextLayout> layout = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:label withPlaynCoreTextFormat:_fmt_];
  [((id<JavaUtilList>) NIL_CHK(_rows_)) addWithId:[[[TripleplayUtilHud_$1 alloc] initWithPlaynCoreTextLayout:layout withBOOL:header] autorelease]];
}

- (void)addWithReactValue:(ReactValue *)label {
  [((id<JavaUtilList>) NIL_CHK(_rows_)) addWithId:[[[TripleplayUtilHud_$2 alloc] initWithTripleplayUtilHud:self withReactValue:label] autorelease]];
}

- (void)addWithNSString:(NSString *)label
         withReactValue:(ReactValue *)value {
  id<PlaynCoreTextLayout> llayout = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:label withPlaynCoreTextFormat:_fmt_];
  [((id<JavaUtilList>) NIL_CHK(_rows_)) addWithId:[[[TripleplayUtilHud_$3 alloc] initWithTripleplayUtilHud:self withReactValue:value withPlaynCoreTextLayout:llayout] autorelease]];
}

- (void)update {
  float width = 0, height = 0, labelWidth = 0;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_rows_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<TripleplayUtilHud_Row> row = ((id<TripleplayUtilHud_Row>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<TripleplayUtilHud_Row>) NIL_CHK(row)) update];
      width = [JavaLangMath maxWithFloat:[((id<TripleplayUtilHud_Row>) NIL_CHK(row)) width] withFloat:width];
      labelWidth = [JavaLangMath maxWithFloat:[((id<TripleplayUtilHud_Row>) NIL_CHK(row)) labelWidth] withFloat:labelWidth];
      height += [((id<TripleplayUtilHud_Row>) NIL_CHK(row)) height];
    }
  }
  width += 2 * TripleplayUtilHud_GAP;
  height += TripleplayUtilHud_GAP * [((id<JavaUtilList>) NIL_CHK(_rows_)) size] + TripleplayUtilHud_GAP;
  if ([((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) width] < width || [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) height] < height) {
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer_)) setImageWithPlaynCoreImage:JreOperatorRetainedAssign(&_image_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height])];
  }
  id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) NIL_CHK(_image_)) canvas];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) clear];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:_bgColor_]) fillRectWithFloat:0 withFloat:0 withFloat:width withFloat:height];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:_textColor_]) setFillColorWithInt:_textColor_];
  float x = TripleplayUtilHud_GAP, y = TripleplayUtilHud_GAP, valueX = labelWidth + 2 * TripleplayUtilHud_GAP;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(_rows_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<TripleplayUtilHud_Row> row = ((id<TripleplayUtilHud_Row>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<TripleplayUtilHud_Row>) NIL_CHK(row)) renderWithPlaynCoreCanvas:canvas withFloat:x withFloat:y withFloat:valueX];
      y += [((id<TripleplayUtilHud_Row>) NIL_CHK(row)) height] + TripleplayUtilHud_GAP;
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_image_, self, nil);
  JreOperatorRetainedAssign(&_fmt_, self, nil);
  JreOperatorRetainedAssign(&_rows_, self, nil);
  JreOperatorRetainedAssign(&layer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilHud *typedCopy = (TripleplayUtilHud *) copy;
  typedCopy.layer = layer_;
  typedCopy._rows = _rows_;
  typedCopy._paints = _paints_;
  typedCopy._fmt = _fmt_;
  typedCopy._textColor = _textColor_;
  typedCopy._bgColor = _bgColor_;
  typedCopy._image = _image_;
}

@end
@implementation TripleplayUtilHud_Stock

@synthesize _haveGL = _haveGL_;
@synthesize _nextSec = _nextSec_;
- (ReactValue *)_frames {
  return _frames_;
}
- (void)set_frames:(ReactValue *)_frames {
  JreOperatorRetainedAssign(&_frames_, self, _frames);
}
@synthesize _frames = _frames_;
- (ReactValue *)_shaderCreates {
  return _shaderCreates_;
}
- (void)set_shaderCreates:(ReactValue *)_shaderCreates {
  JreOperatorRetainedAssign(&_shaderCreates_, self, _shaderCreates);
}
@synthesize _shaderCreates = _shaderCreates_;
- (ReactValue *)_fbCreates {
  return _fbCreates_;
}
- (void)set_fbCreates:(ReactValue *)_fbCreates {
  JreOperatorRetainedAssign(&_fbCreates_, self, _fbCreates);
}
@synthesize _fbCreates = _fbCreates_;
- (ReactValue *)_texCreates {
  return _texCreates_;
}
- (void)set_texCreates:(ReactValue *)_texCreates {
  JreOperatorRetainedAssign(&_texCreates_, self, _texCreates);
}
@synthesize _texCreates = _texCreates_;
- (ReactValue *)_shaderBinds {
  return _shaderBinds_;
}
- (void)set_shaderBinds:(ReactValue *)_shaderBinds {
  JreOperatorRetainedAssign(&_shaderBinds_, self, _shaderBinds);
}
@synthesize _shaderBinds = _shaderBinds_;
- (ReactValue *)_fbBinds {
  return _fbBinds_;
}
- (void)set_fbBinds:(ReactValue *)_fbBinds {
  JreOperatorRetainedAssign(&_fbBinds_, self, _fbBinds);
}
@synthesize _fbBinds = _fbBinds_;
- (ReactValue *)_texBinds {
  return _texBinds_;
}
- (void)set_texBinds:(ReactValue *)_texBinds {
  JreOperatorRetainedAssign(&_texBinds_, self, _texBinds);
}
@synthesize _texBinds = _texBinds_;
- (ReactValue *)_rQuads {
  return _rQuads_;
}
- (void)set_rQuads:(ReactValue *)_rQuads {
  JreOperatorRetainedAssign(&_rQuads_, self, _rQuads);
}
@synthesize _rQuads = _rQuads_;
- (ReactValue *)_rTris {
  return _rTris_;
}
- (void)set_rTris:(ReactValue *)_rTris {
  JreOperatorRetainedAssign(&_rTris_, self, _rTris);
}
@synthesize _rTris = _rTris_;
- (ReactValue *)_shaderFlushes {
  return _shaderFlushes_;
}
- (void)set_shaderFlushes:(ReactValue *)_shaderFlushes {
  JreOperatorRetainedAssign(&_shaderFlushes_, self, _shaderFlushes);
}
@synthesize _shaderFlushes = _shaderFlushes_;
- (ReactValue *)_quadShader {
  return _quadShader_;
}
- (void)set_quadShader:(ReactValue *)_quadShader {
  JreOperatorRetainedAssign(&_quadShader_, self, _quadShader);
}
@synthesize _quadShader = _quadShader_;
- (ReactValue *)_trisShader {
  return _trisShader_;
}
- (void)set_trisShader:(ReactValue *)_trisShader {
  JreOperatorRetainedAssign(&_trisShader_, self, _trisShader);
}
@synthesize _trisShader = _trisShader_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_frames_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_shaderCreates_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_fbCreates_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_texCreates_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_shaderBinds_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_fbBinds_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_texBinds_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_rQuads_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_rTris_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_shaderFlushes_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangInteger valueOfWithInt:0]]));
    JreOperatorRetainedAssign(&_quadShader_, self, ((ReactValue *) [ReactValue createWithId:@""]));
    JreOperatorRetainedAssign(&_trisShader_, self, ((ReactValue *) [ReactValue createWithId:@""]));
    _haveGL_ = ([((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] != nil);
    if (_haveGL_) {
      [self addWithNSString:@"Shader info:" withBOOL:YES];
      [self addWithReactValue:_quadShader_];
      [self addWithReactValue:_trisShader_];
    }
    [self addWithNSString:@"Per second:" withBOOL:YES];
    [self addWithNSString:@"Frames:" withReactValue:_frames_];
    if (_haveGL_) {
      [self addWithNSString:@"Shader creates:" withReactValue:_shaderCreates_];
      [self addWithNSString:@"FB creates:" withReactValue:_fbCreates_];
      [self addWithNSString:@"Tex creates:" withReactValue:_texCreates_];
      [self addWithNSString:@"Per frame:" withBOOL:YES];
      [self addWithNSString:@"Shader binds:" withReactValue:_shaderBinds_];
      [self addWithNSString:@"FB binds:" withReactValue:_fbBinds_];
      [self addWithNSString:@"Tex binds:" withReactValue:_texBinds_];
      [self addWithNSString:@"Quads drawn:" withReactValue:_rQuads_];
      [self addWithNSString:@"Tris drawn:" withReactValue:_rTris_];
      [self addWithNSString:@"Shader flushes:" withReactValue:_shaderFlushes_];
    }
  }
  return self;
}

- (void)updateWithInt:(int)delta {
  long long int now = [JavaLangSystem currentTimeMillis];
  if (now > _nextSec_) {
    [self willUpdate];
    [self update];
    _nextSec_ = now + 1000;
  }
}

- (void)paint {
  _paints_ += 1;
}

- (void)willUpdate {
  if (_haveGL_) {
    PlaynCoreGlGLContext_Stats *stats = [[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] stats];
    int frames = [JavaLangMath maxWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).frames withInt:1];
    (void) [((ReactValue *) NIL_CHK(_frames_)) updateWithId:[JavaLangInteger valueOfWithInt:frames]];
    (void) [((ReactValue *) NIL_CHK(_shaderCreates_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).shaderCreates]];
    (void) [((ReactValue *) NIL_CHK(_fbCreates_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).frameBufferCreates]];
    (void) [((ReactValue *) NIL_CHK(_texCreates_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).texCreates]];
    (void) [((ReactValue *) NIL_CHK(_shaderBinds_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).shaderBinds / frames]];
    (void) [((ReactValue *) NIL_CHK(_fbBinds_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).frameBufferBinds / frames]];
    (void) [((ReactValue *) NIL_CHK(_texBinds_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).texBinds / frames]];
    (void) [((ReactValue *) NIL_CHK(_rQuads_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).quadsRendered / frames]];
    (void) [((ReactValue *) NIL_CHK(_rTris_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).trisRendered / frames]];
    (void) [((ReactValue *) NIL_CHK(_shaderFlushes_)) updateWithId:[JavaLangInteger valueOfWithInt:((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)).shaderFlushes / frames]];
    [((PlaynCoreGlGLContext_Stats *) NIL_CHK(stats)) reset];
    (void) [((ReactValue *) NIL_CHK(_quadShader_)) updateWithId:[NSString stringWithFormat:@"Quad: %@", [[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] quadShaderInfo]]];
    (void) [((ReactValue *) NIL_CHK(_trisShader_)) updateWithId:[NSString stringWithFormat:@"Tris: %@", [[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] trisShaderInfo]]];
  }
  else {
    (void) [((ReactValue *) NIL_CHK(_frames_)) updateWithId:[JavaLangInteger valueOfWithInt:_paints_]];
    _paints_ = 0;
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_trisShader_, self, nil);
  JreOperatorRetainedAssign(&_quadShader_, self, nil);
  JreOperatorRetainedAssign(&_shaderFlushes_, self, nil);
  JreOperatorRetainedAssign(&_rTris_, self, nil);
  JreOperatorRetainedAssign(&_rQuads_, self, nil);
  JreOperatorRetainedAssign(&_texBinds_, self, nil);
  JreOperatorRetainedAssign(&_fbBinds_, self, nil);
  JreOperatorRetainedAssign(&_shaderBinds_, self, nil);
  JreOperatorRetainedAssign(&_texCreates_, self, nil);
  JreOperatorRetainedAssign(&_fbCreates_, self, nil);
  JreOperatorRetainedAssign(&_shaderCreates_, self, nil);
  JreOperatorRetainedAssign(&_frames_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilHud_Stock *typedCopy = (TripleplayUtilHud_Stock *) copy;
  typedCopy._haveGL = _haveGL_;
  typedCopy._nextSec = _nextSec_;
  typedCopy._frames = _frames_;
  typedCopy._shaderCreates = _shaderCreates_;
  typedCopy._fbCreates = _fbCreates_;
  typedCopy._texCreates = _texCreates_;
  typedCopy._shaderBinds = _shaderBinds_;
  typedCopy._fbBinds = _fbBinds_;
  typedCopy._texBinds = _texBinds_;
  typedCopy._rQuads = _rQuads_;
  typedCopy._rTris = _rTris_;
  typedCopy._shaderFlushes = _shaderFlushes_;
  typedCopy._quadShader = _quadShader_;
  typedCopy._trisShader = _trisShader_;
}

@end
@implementation TripleplayUtilHud_$1

- (id<PlaynCoreTextLayout>)val$layout {
  return val$layout_;
}
- (void)setVal$layout:(id<PlaynCoreTextLayout>)val$layout {
  JreOperatorRetainedAssign(&val$layout_, self, val$layout);
}
@synthesize val$layout = val$layout_;
@synthesize val$header = val$header_;

- (void)update {
}

- (float)labelWidth {
  return 0;
}

- (float)width {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(val$layout_)) width];
}

- (float)height {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(val$layout_)) height];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                        withFloat:(float)x
                        withFloat:(float)y
                        withFloat:(float)valueX {
  if (val$header_) (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) drawLineWithFloat:0 withFloat:y - 1 withFloat:[((id<PlaynCoreCanvas>) NIL_CHK(canvas)) width] withFloat:y - 1];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:val$layout_ withFloat:x withFloat:y];
  float by = y + [((id<PlaynCoreTextLayout>) NIL_CHK(val$layout_)) height];
  if (val$header_) (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) drawLineWithFloat:0 withFloat:by withFloat:[((id<PlaynCoreCanvas>) NIL_CHK(canvas)) width] withFloat:by];
}

- (id)initWithPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)capture$0
                         withBOOL:(BOOL)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$layout_, self, capture$0);
    val$header_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$layout_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilHud_$1 *typedCopy = (TripleplayUtilHud_$1 *) copy;
  typedCopy.val$layout = val$layout_;
  typedCopy.val$header = val$header_;
}

@end
@implementation TripleplayUtilHud_$2

- (TripleplayUtilHud *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUtilHud *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreTextLayout>)_layout {
  return _layout_;
}
- (void)set_layout:(id<PlaynCoreTextLayout>)_layout {
  JreOperatorRetainedAssign(&_layout_, self, _layout);
}
@synthesize _layout = _layout_;
- (ReactValue *)val$label {
  return val$label_;
}
- (void)setVal$label:(ReactValue *)val$label {
  JreOperatorRetainedAssign(&val$label_, self, val$label);
}
@synthesize val$label = val$label_;

- (void)update {
  JreOperatorRetainedAssign(&_layout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString valueOf:[((ReactValue *) NIL_CHK(val$label_)) get]] withPlaynCoreTextFormat:this$0_._fmt]);
}

- (float)labelWidth {
  return 0;
}

- (float)width {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(_layout_)) width];
}

- (float)height {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(_layout_)) height];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                        withFloat:(float)x
                        withFloat:(float)y
                        withFloat:(float)valueX {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:_layout_ withFloat:x withFloat:y];
}

- (id)initWithTripleplayUtilHud:(TripleplayUtilHud *)outer$
                 withReactValue:(ReactValue *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$label_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$label_, self, nil);
  JreOperatorRetainedAssign(&_layout_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilHud_$2 *typedCopy = (TripleplayUtilHud_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._layout = _layout_;
  typedCopy.val$label = val$label_;
}

@end
@implementation TripleplayUtilHud_$3

- (TripleplayUtilHud *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TripleplayUtilHud *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreTextLayout>)_vlayout {
  return _vlayout_;
}
- (void)set_vlayout:(id<PlaynCoreTextLayout>)_vlayout {
  JreOperatorRetainedAssign(&_vlayout_, self, _vlayout);
}
@synthesize _vlayout = _vlayout_;
- (ReactValue *)val$value {
  return val$value_;
}
- (void)setVal$value:(ReactValue *)val$value {
  JreOperatorRetainedAssign(&val$value_, self, val$value);
}
@synthesize val$value = val$value_;
- (id<PlaynCoreTextLayout>)val$llayout {
  return val$llayout_;
}
- (void)setVal$llayout:(id<PlaynCoreTextLayout>)val$llayout {
  JreOperatorRetainedAssign(&val$llayout_, self, val$llayout);
}
@synthesize val$llayout = val$llayout_;

- (void)update {
  JreOperatorRetainedAssign(&_vlayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString valueOf:[((ReactValue *) NIL_CHK(val$value_)) get]] withPlaynCoreTextFormat:this$0_._fmt]);
}

- (float)labelWidth {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(val$llayout_)) width];
}

- (float)width {
  return [((id<PlaynCoreTextLayout>) NIL_CHK(val$llayout_)) width] + TripleplayUtilHud_GAP + [((id<PlaynCoreTextLayout>) NIL_CHK(_vlayout_)) width];
}

- (float)height {
  return [JavaLangMath maxWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(val$llayout_)) height] withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(_vlayout_)) height]];
}

- (void)renderWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                        withFloat:(float)x
                        withFloat:(float)y
                        withFloat:(float)valueX {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:val$llayout_ withFloat:x withFloat:y];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:_vlayout_ withFloat:valueX withFloat:y];
}

- (id)initWithTripleplayUtilHud:(TripleplayUtilHud *)outer$
                 withReactValue:(ReactValue *)capture$0
        withPlaynCoreTextLayout:(id<PlaynCoreTextLayout>)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$value_, self, capture$0);
    JreOperatorRetainedAssign(&val$llayout_, self, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$llayout_, self, nil);
  JreOperatorRetainedAssign(&val$value_, self, nil);
  JreOperatorRetainedAssign(&_vlayout_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilHud_$3 *typedCopy = (TripleplayUtilHud_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy._vlayout = _vlayout_;
  typedCopy.val$value = val$value_;
  typedCopy.val$llayout = val$llayout_;
}

@end
