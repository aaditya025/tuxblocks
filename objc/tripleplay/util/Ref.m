//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/util/Ref.java
//
//  Created by Thomas on 7/1/13.
//

#import "Destroyable.h"
#import "Layer.h"

@implementation TripleplayUtilRef

- (id)_target {
  return _target_;
}
- (void)set_target:(id)_target {
  JreOperatorRetainedAssign(&_target_, self, _target);
}
@synthesize _target = _target_;

+ (TripleplayUtilRef *)createWithId:(id<TripleplayUtilDestroyable>)target {
  TripleplayUtilRef *ref = [[[TripleplayUtilRef_$1 alloc] init] autorelease];
  (void) [((TripleplayUtilRef *) NIL_CHK(ref)) setWithId:target];
  return ref;
}

+ (TripleplayUtilRef *)createWithId:(id<PlaynCoreLayer>)target {
  TripleplayUtilRef *ref = [[[TripleplayUtilRef_$2 alloc] init] autorelease];
  (void) [((TripleplayUtilRef *) NIL_CHK(ref)) setWithId:target];
  return ref;
}

- (id)get {
  return _target_;
}

- (id)setWithId:(id)target {
  [self clear];
  JreOperatorRetainedAssign(&_target_, self, target);
  return target;
}

- (void)clear {
  if (_target_ != nil) {
    id toBeCleared = _target_;
    JreOperatorRetainedAssign(&_target_, self, nil);
    [self onClearWithId:toBeCleared];
  }
}

- (void)onClearWithId:(id)target {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_target_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayUtilRef *typedCopy = (TripleplayUtilRef *) copy;
  typedCopy._target = _target_;
}

@end
@implementation TripleplayUtilRef_$1

- (void)onClearWithId:(id<TripleplayUtilDestroyable>)target {
  [((id<TripleplayUtilDestroyable>) NIL_CHK(target)) destroy];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayUtilRef_$2

- (void)onClearWithId:(id<PlaynCoreLayer>)target {
  [((id<PlaynCoreLayer>) NIL_CHK(target)) destroy];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
