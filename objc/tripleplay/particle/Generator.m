//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/Generator.java
//
//  Created by Thomas on 7/1/13.
//

#import "Emitter.h"

@implementation TPGenerator

static TPGenerator * TPGenerator_NOOP_;

+ (TPGenerator *)NOOP {
  return TPGenerator_NOOP_;
}

+ (void)setNOOP:(TPGenerator *)NOOP {
  JreOperatorRetainedAssign(&TPGenerator_NOOP_, self, NOOP);
}

+ (TPGenerator *)impulseWithInt:(int)particles {
  return [[[TPGenerator_$2 alloc] initWithInt:particles] autorelease];
}

+ (TPGenerator *)constantWithFloat:(float)particlesPerSecond {
  return [[[TPGenerator_$3 alloc] initWithFloat:particlesPerSecond] autorelease];
}

- (BOOL)generateWithTPEmitter:(TPEmitter *)emitter
                    withFloat:(float)now
                    withFloat:(float)dt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TPGenerator class]) {
    JreOperatorRetainedAssign(&TPGenerator_NOOP_, self, [[[TPGenerator_$1 alloc] init] autorelease]);
  }
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TPGenerator_$1

- (BOOL)generateWithTPEmitter:(TPEmitter *)emitter
                    withFloat:(float)now
                    withFloat:(float)dt {
  return NO;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TPGenerator_$2

@synthesize val$particles = val$particles_;

- (BOOL)generateWithTPEmitter:(TPEmitter *)emitter
                    withFloat:(float)now
                    withFloat:(float)dt {
  [((TPEmitter *) NIL_CHK(emitter)) addParticlesWithInt:val$particles_];
  return YES;
}

- (id)initWithInt:(int)capture$0 {
  if ((self = [super init])) {
    val$particles_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPGenerator_$2 *typedCopy = (TPGenerator_$2 *) copy;
  typedCopy.val$particles = val$particles_;
}

@end
@implementation TPGenerator_$3

@synthesize _secondsPerParticle = _secondsPerParticle_;
@synthesize _accum = _accum_;
@synthesize val$particlesPerSecond = val$particlesPerSecond_;

- (BOOL)generateWithTPEmitter:(TPEmitter *)emitter
                    withFloat:(float)now
                    withFloat:(float)dt {
  _accum_ += dt;
  int particles = (int) (_accum_ / _secondsPerParticle_);
  _accum_ -= particles * _secondsPerParticle_;
  [((TPEmitter *) NIL_CHK(emitter)) addParticlesWithInt:particles];
  return NO;
}

- (id)initWithFloat:(float)capture$0 {
  if ((self = [super init])) {
    val$particlesPerSecond_ = capture$0;
    _secondsPerParticle_ = 1 / val$particlesPerSecond_;
  }
  return self;
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPGenerator_$3 *typedCopy = (TPGenerator_$3 *) copy;
  typedCopy._secondsPerParticle = _secondsPerParticle_;
  typedCopy._accum = _accum_;
  typedCopy.val$particlesPerSecond = val$particlesPerSecond_;
}

@end
