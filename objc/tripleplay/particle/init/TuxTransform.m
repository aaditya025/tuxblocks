//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tripleplay\particle\init\TuxTransform.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSFloatArray.h"
#import "java/lang/System.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/InternalTransform.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/gl/GLContext.h"
#import "pythagoras/f/Transform.h"
#import "tripleplay/particle/GLStatus.h"
#import "tripleplay/particle/Initializer.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/init/TuxTransform.h"

@implementation TripleplayParticleInitTuxTransform

+ (TPInitializer *)layerWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  return [[[TripleplayParticleInitTuxTransform_$1 alloc] initWithPlaynCoreLayer:layer] autorelease];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayParticleInitTuxTransform_$1

- (id<PlaynCoreInternalTransform>)xform {
  return xform_;
}
- (void)setXform:(id<PlaynCoreInternalTransform>)xform {
  JreOperatorRetainedAssign(&xform_, self, xform);
}
@synthesize xform = xform_;
- (IOSFloatArray *)_matrix {
  return _matrix_;
}
- (void)set_matrix:(IOSFloatArray *)_matrix {
  JreOperatorRetainedAssign(&_matrix_, self, _matrix);
}
@synthesize _matrix = _matrix_;
- (id<PlaynCoreLayer>)val$layer {
  return val$layer_;
}
- (void)setVal$layer:(id<PlaynCoreLayer>)val$layer {
  JreOperatorRetainedAssign(&val$layer_, self, val$layer);
}
@synthesize val$layer = val$layer_;

- (void)willInitWithInt:(int)count {
  if (![TPGLStatus enabled]) {
    [((IOSFloatArray *) NIL_CHK(_matrix_)) replaceFloatAtIndex:0 withFloat:1];
    [((IOSFloatArray *) NIL_CHK(_matrix_)) replaceFloatAtIndex:3 withFloat:1];
    return;
  }
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform_)) setTransformWithFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:0 withFloat:0];
  id<PlaynCoreLayer> xlayer = val$layer_;
  while (xlayer != nil) {
    (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform_)) preConcatenateWithPlaynCoreInternalTransform:(id<PlaynCoreInternalTransform>) [((id<PlaynCoreLayer>) NIL_CHK(xlayer)) transform]];
    xlayer = [((id<PlaynCoreLayer>) NIL_CHK(xlayer)) parent];
  }
  (void) [((id<PlaynCoreInternalTransform>) NIL_CHK(xform_)) preConcatenateWithPlaynCoreInternalTransform:[[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] rootTransform]];
  [((id<PlaynCoreInternalTransform>) NIL_CHK(xform_)) getWithJavaLangFloatArray:_matrix_];
}

- (void)init__WithInt:(int)index
withJavaLangFloatArray:(IOSFloatArray *)data
              withInt:(int)start OBJC_METHOD_FAMILY_NONE {
  [JavaLangSystem arraycopyWithId:_matrix_ withInt:0 withId:data withInt:start + TPParticleBuffer_M00 withInt:6];
}

- (id)initWithPlaynCoreLayer:(id<PlaynCoreLayer>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$layer_, self, capture$0);
    JreOperatorRetainedAssign(&xform_, self, [TPGLStatus enabled] ? [[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx] createTransform] : nil);
    JreOperatorRetainedAssign(&_matrix_, self, [[[IOSFloatArray alloc] initWithLength:6] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$layer_, self, nil);
  JreOperatorRetainedAssign(&_matrix_, self, nil);
  JreOperatorRetainedAssign(&xform_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayParticleInitTuxTransform_$1 *typedCopy = (TripleplayParticleInitTuxTransform_$1 *) copy;
  typedCopy.xform = xform_;
  typedCopy._matrix = _matrix_;
  typedCopy.val$layer = val$layer_;
}

@end
