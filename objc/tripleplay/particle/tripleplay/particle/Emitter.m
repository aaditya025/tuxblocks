//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/Emitter.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "react/Connection.h"
#import "react/Signal.h"
#import "tripleplay/particle/Generator.h"
#import "tripleplay/particle/Initializer.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/ParticleShader.h"
#import "tripleplay/particle/Particles.h"

@implementation TPEmitter

- (id<PlaynCoreImmediateLayer>)layer {
  return layer_;
}
- (void)setLayer:(id<PlaynCoreImmediateLayer>)layer {
  JreOperatorRetainedAssign(&layer_, self, layer);
}
@synthesize layer = layer_;
- (TPGenerator *)generator {
  return generator_;
}
- (void)setGenerator:(TPGenerator *)generator {
  JreOperatorRetainedAssign(&generator_, self, generator);
}
@synthesize generator = generator_;
- (id<JavaUtilList>)initters {
  return initters_;
}
- (void)setInitters:(id<JavaUtilList>)initters {
  JreOperatorRetainedAssign(&initters_, self, initters);
}
@synthesize initters = initters_;
- (id<JavaUtilList>)effectors {
  return effectors_;
}
- (void)setEffectors:(id<JavaUtilList>)effectors {
  JreOperatorRetainedAssign(&effectors_, self, effectors);
}
@synthesize effectors = effectors_;
- (ReactSignal *)onExhausted {
  return onExhausted_;
}
- (void)setOnExhausted:(ReactSignal *)onExhausted {
  JreOperatorRetainedAssign(&onExhausted_, self, onExhausted);
}
@synthesize onExhausted = onExhausted_;
- (ReactSignal *)onEmpty {
  return onEmpty_;
}
- (void)setOnEmpty:(ReactSignal *)onEmpty {
  JreOperatorRetainedAssign(&onEmpty_, self, onEmpty);
}
@synthesize onEmpty = onEmpty_;
- (TPParticles *)_parts {
  return _parts_;
}
- (void)set_parts:(TPParticles *)_parts {
  JreOperatorRetainedAssign(&_parts_, self, _parts);
}
@synthesize _parts = _parts_;
- (TPParticleBuffer *)_buffer {
  return _buffer_;
}
- (void)set_buffer:(TPParticleBuffer *)_buffer {
  JreOperatorRetainedAssign(&_buffer_, self, _buffer);
}
@synthesize _buffer = _buffer_;
- (id<ReactConnection>)_conn {
  return _conn_;
}
- (void)set_conn:(id<ReactConnection>)_conn {
  JreOperatorRetainedAssign(&_conn_, self, _conn);
}
@synthesize _conn = _conn_;

- (void)addParticlesWithInt:(int)count {
  for (int ii = 0, ll = [((id<JavaUtilList>) NIL_CHK(initters_)) size]; ii < ll; ii++) [((TPInitializer *) [((id<JavaUtilList>) NIL_CHK(initters_)) getWithInt:ii]) willInitWithInt:count];
  [((TPParticleBuffer *) NIL_CHK(_buffer_)) addWithInt:count withFloat:[((TPParticles *) NIL_CHK(_parts_)) now] withJavaUtilList:initters_];
}

- (void)destroy {
  [((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) destroy];
  [((id<ReactConnection>) NIL_CHK(_conn_)) disconnect];
}

- (void)destroyOnEmpty {
  (void) [((ReactSignal *) NIL_CHK(onEmpty_)) connectWithReactSlot:[[[TPEmitter_$1 alloc] initWithTPEmitter:self] autorelease]];
}

- (id)initWithTPParticles:(TPParticles *)parts
                  withInt:(int)maxParticles
       withPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&initters_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&effectors_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&onExhausted_, self, ((ReactSignal *) [ReactSignal create]));
    JreOperatorRetainedAssign(&onEmpty_, self, ((ReactSignal *) [ReactSignal create]));
    self.layer = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[[TPEmitter_$2 alloc] initWithTPEmitter:self withPlaynCoreImage:image withInt:maxParticles] autorelease]];
    JreOperatorRetainedAssign(&_parts_, self, parts);
    JreOperatorRetainedAssign(&_buffer_, self, [[[TPParticleBuffer alloc] initWithInt:maxParticles] autorelease]);
  }
  return self;
}

- (void)updateWithFloat:(float)now
              withFloat:(float)dt {
  if (generator_ != nil && [((TPGenerator *) NIL_CHK(generator_)) generateWithTPEmitter:self withFloat:now withFloat:dt]) {
    JreOperatorRetainedAssign(&generator_, self, nil);
    [((ReactSignal *) NIL_CHK(onExhausted_)) emitWithId:self];
  }
  if ([((TPParticleBuffer *) NIL_CHK(_buffer_)) applyWithJavaUtilList:effectors_ withFloat:now withFloat:dt] == 0 && generator_ == nil) {
    [((ReactSignal *) NIL_CHK(onEmpty_)) emitWithId:self];
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_conn_, self, nil);
  JreOperatorRetainedAssign(&_buffer_, self, nil);
  JreOperatorRetainedAssign(&_parts_, self, nil);
  JreOperatorRetainedAssign(&onEmpty_, self, nil);
  JreOperatorRetainedAssign(&onExhausted_, self, nil);
  JreOperatorRetainedAssign(&effectors_, self, nil);
  JreOperatorRetainedAssign(&initters_, self, nil);
  JreOperatorRetainedAssign(&generator_, self, nil);
  JreOperatorRetainedAssign(&layer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPEmitter *typedCopy = (TPEmitter *) copy;
  typedCopy.layer = layer_;
  typedCopy.generator = generator_;
  typedCopy.initters = initters_;
  typedCopy.effectors = effectors_;
  typedCopy.onExhausted = onExhausted_;
  typedCopy.onEmpty = onEmpty_;
  typedCopy._parts = _parts_;
  typedCopy._buffer = _buffer_;
  typedCopy._conn = _conn_;
}

@end
@implementation TPEmitter_$1

- (TPEmitter *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TPEmitter *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onEmit {
  [this$0_ destroy];
}

- (id)initWithTPEmitter:(TPEmitter *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPEmitter_$1 *typedCopy = (TPEmitter_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TPEmitter_$2

- (TPEmitter *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TPEmitter *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreImage>)val$image {
  return val$image_;
}
- (void)setVal$image:(id<PlaynCoreImage>)val$image {
  JreOperatorRetainedAssign(&val$image_, self, val$image);
}
@synthesize val$image = val$image_;
@synthesize val$maxParticles = val$maxParticles_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  int tex = [((id<PlaynCoreImage>) NIL_CHK(val$image_)) ensureTexture];
  [((TPParticleBuffer *) NIL_CHK(this$0_._buffer)) renderWithTPParticleShader:[((TPParticleShader *) NIL_CHK(this$0_._parts._shader)) prepareWithInt:tex withInt:val$maxParticles_] withFloat:[((id<PlaynCoreImage>) NIL_CHK(val$image_)) width] withFloat:[((id<PlaynCoreImage>) NIL_CHK(val$image_)) height]];
}

- (id)initWithTPEmitter:(TPEmitter *)outer$
     withPlaynCoreImage:(id<PlaynCoreImage>)capture$0
                withInt:(int)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$image_, self, capture$0);
    val$maxParticles_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$image_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPEmitter_$2 *typedCopy = (TPEmitter_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$image = val$image_;
  typedCopy.val$maxParticles = val$maxParticles_;
}

@end
