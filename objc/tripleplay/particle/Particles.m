//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/particle/Particles.java
//
//  Created by Thomas on 7/1/13.
//

#import "Clock.h"
#import "Connection.h"
#import "Emitter.h"
#import "GLContext.h"
#import "Graphics.h"
#import "GroupLayer.h"
#import "Image.h"
#import "ImmediateLayer.h"
#import "ParticleShader.h"
#import "PlayN.h"
#import "Signal.h"

@implementation TPParticles

- (TPParticles_Now *)_now {
  return _now_;
}
- (void)set_now:(TPParticles_Now *)_now {
  JreOperatorRetainedAssign(&_now_, self, _now);
}
@synthesize _now = _now_;
- (ReactSignal *)_onPaint {
  return _onPaint_;
}
- (void)set_onPaint:(ReactSignal *)_onPaint {
  JreOperatorRetainedAssign(&_onPaint_, self, _onPaint);
}
@synthesize _onPaint = _onPaint_;
- (TPParticleShader *)_shader {
  return _shader_;
}
- (void)set_shader:(TPParticleShader *)_shader {
  JreOperatorRetainedAssign(&_shader_, self, _shader);
}
@synthesize _shader = _shader_;

- (TPEmitter *)createEmitterWithInt:(int)maxParticles
                 withPlaynCoreImage:(id<PlaynCoreImage>)image {
  return [self createEmitterWithInt:maxParticles withPlaynCoreImage:image withPlaynCoreGroupLayer:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) rootLayer]];
}

- (TPEmitter *)createEmitterWithInt:(int)maxParticles
                 withPlaynCoreImage:(id<PlaynCoreImage>)image
            withPlaynCoreGroupLayer:(id<PlaynCoreGroupLayer>)onLayer {
  TPEmitter *emitter = [[[TPEmitter alloc] initWithTPParticles:self withInt:maxParticles withPlaynCoreImage:image] autorelease];
  ((TPEmitter *) NIL_CHK(emitter))._conn = [((ReactSignal *) NIL_CHK(_onPaint_)) connectWithReactSlot:[[[TPParticles_$1 alloc] initWithTPEmitter:emitter] autorelease]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(onLayer)) addWithPlaynCoreLayer:((TPEmitter *) NIL_CHK(emitter)).layer];
  return emitter;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [((ReactSignal *) NIL_CHK(_onPaint_)) emitWithId:[((TPParticles_Now *) NIL_CHK(_now_)) updateWithFloat:[((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt]]];
}

- (void)clear {
  [((TPParticleShader *) NIL_CHK(_shader_)) clearProgram];
}

- (float)now {
  return ((TPParticles_Now *) NIL_CHK(_now_)).time;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_now_, self, [[[TPParticles_Now alloc] init] autorelease]);
    JreOperatorRetainedAssign(&_onPaint_, self, ((ReactSignal *) [ReactSignal create]));
    JreOperatorRetainedAssign(&_shader_, self, [[[TPParticleShader alloc] initWithPlaynCoreGlGLContext:[((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) ctx]] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_shader_, self, nil);
  JreOperatorRetainedAssign(&_onPaint_, self, nil);
  JreOperatorRetainedAssign(&_now_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPParticles *typedCopy = (TPParticles *) copy;
  typedCopy._now = _now_;
  typedCopy._onPaint = _onPaint_;
  typedCopy._shader = _shader_;
}

@end
@implementation TPParticles_Now

@synthesize time = time_;
@synthesize dt = dt_;

- (TPParticles_Now *)updateWithFloat:(float)delta {
  dt_ = delta / 1000.0f;
  time_ += dt_;
  return self;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPParticles_Now *typedCopy = (TPParticles_Now *) copy;
  typedCopy.time = time_;
  typedCopy.dt = dt_;
}

@end
@implementation TPParticles_$1

- (TPEmitter *)val$emitter {
  return val$emitter_;
}
- (void)setVal$emitter:(TPEmitter *)val$emitter {
  JreOperatorRetainedAssign(&val$emitter_, self, val$emitter);
}
@synthesize val$emitter = val$emitter_;

- (void)onEmitWithId:(TPParticles_Now *)now {
  [((TPEmitter *) NIL_CHK(val$emitter_)) updateWithFloat:((TPParticles_Now *) NIL_CHK(now)).time withFloat:((TPParticles_Now *) NIL_CHK(now)).dt];
}

- (id)initWithTPEmitter:(TPEmitter *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$emitter_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$emitter_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPParticles_$1 *typedCopy = (TPParticles_$1 *) copy;
  typedCopy.val$emitter = val$emitter_;
}

@end
