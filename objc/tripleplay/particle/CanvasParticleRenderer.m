//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tripleplay\particle\CanvasParticleRenderer.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSFloatArray.h"
#import "IOSIntArray.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Color.h"
#import "playn/core/Image.h"
#import "playn/core/Layer.h"
#import "playn/core/Surface.h"
#import "tripleplay/particle/CanvasParticleRenderer.h"
#import "tripleplay/particle/Effector.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/init/ColorEffector.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"

@implementation TPCanvasParticleRenderer

- (TBImageLayerTintable *)imageLayer {
  return imageLayer_;
}
- (void)setImageLayer:(TBImageLayerTintable *)imageLayer {
  JreOperatorRetainedAssign(&imageLayer_, self, imageLayer);
}
@synthesize imageLayer = imageLayer_;

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&imageLayer_, self, [[[TBImageLayerTintable alloc] initWithPlaynCoreImage:image] autorelease]);
    [TBPlayNObject centerImageLayerWithTBImageLayerTintable:imageLayer_];
  }
  return self;
}

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface
              withTPParticleBuffer:(TPParticleBuffer *)buffer
                withPlaynCoreImage:(id<PlaynCoreImage>)image
                  withJavaUtilList:(id<JavaUtilList>)effectors
                         withFloat:(float)now {
  TripleplayParticleInitColorEffector *colorEffector = nil;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(effectors)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TPEffector *effector = ((TPEffector *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([effector isKindOfClass:[TripleplayParticleInitColorEffector class]]) colorEffector = (TripleplayParticleInitColorEffector *) effector;
    }
  }
  int pp = 0, ppos = 0, rendered = 0;
  IOSFloatArray *data = ((TPParticleBuffer *) NIL_CHK(buffer)).data;
  for (int aa = 0; aa < (int) [((IOSIntArray *) NIL_CHK(buffer.alive)) count]; aa++) {
    int live = [((IOSIntArray *) NIL_CHK(buffer.alive)) intAtIndex:aa], mask = 1;
    for (int end = pp + 32; pp < end; pp++, ppos += TPParticleBuffer_NUM_FIELDS, mask <<= 1) {
      if ((live & mask) == 0) continue;
      if ([((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_ALPHA] == 0) continue;
      (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) save];
      (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) transformWithFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_M00] withFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_M01] withFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_M10] withFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_M11] withFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_TX] withFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_TY]];
      if (colorEffector != nil) {
        [((TBImageLayerTintable *) NIL_CHK(imageLayer_)) setTintWithInt:[colorEffector startColor] withInt:[colorEffector endColor] withFloat:1 - [colorEffector getPercWithJavaLangFloatArray:data withInt:ppos withFloat:now]];
      }
      else {
        [((TBImageLayerTintable *) NIL_CHK(imageLayer_)) setTintWithInt:[PlaynCoreColor rgbWithInt:(int) (255 * [((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_RED]) withInt:(int) (255 * [((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_GREEN]) withInt:(int) (255 * [((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_BLUE])]];
      }
      [((TBImageLayerTintable *) NIL_CHK(imageLayer_)) setAlphaWithFloat:[((IOSFloatArray *) NIL_CHK(data)) floatAtIndex:ppos + TPParticleBuffer_ALPHA]];
      (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) drawLayerWithPlaynCoreLayer:[((TBImageLayerTintable *) NIL_CHK(imageLayer_)) layer]];
      rendered++;
      (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) restore];
    }
  }
  ((TPParticleBuffer *) NIL_CHK(buffer))._live = rendered;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&imageLayer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPCanvasParticleRenderer *typedCopy = (TPCanvasParticleRenderer *) copy;
  typedCopy.imageLayer = imageLayer_;
}

@end
