//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tripleplay\particle\TuxEmitter.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/util/List.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Surface.h"
#import "tripleplay/particle/CanvasParticleRenderer.h"
#import "tripleplay/particle/GLStatus.h"
#import "tripleplay/particle/ParticleBuffer.h"
#import "tripleplay/particle/Particles.h"
#import "tripleplay/particle/TuxEmitter.h"

@implementation TPTuxEmitter

- (id<PlaynCoreImmediateLayer>)myLayer {
  return myLayer_;
}
- (void)setMyLayer:(id<PlaynCoreImmediateLayer>)myLayer {
  JreOperatorRetainedAssign(&myLayer_, self, myLayer);
}
@synthesize myLayer = myLayer_;
- (id<TPTuxEmitter_ParticleRenderer>)renderer {
  return renderer_;
}
- (void)setRenderer:(id<TPTuxEmitter_ParticleRenderer>)renderer {
  JreOperatorRetainedAssign(&renderer_, self, renderer);
}
@synthesize renderer = renderer_;
@synthesize now = now_;

- (id)initWithTPParticles:(TPParticles *)parts
                  withInt:(int)maxParticles
       withPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super initWithTPParticles:parts withInt:maxParticles withPlaynCoreImage:image])) {
    JreOperatorRetainedAssign(&myLayer_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[[TPTuxEmitter_$1 alloc] initWithTPTuxEmitter:self withPlaynCoreImage:image] autorelease]]);
    if (![TPGLStatus enabled]) {
      (void) [((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) setVisibleWithBOOL:NO];
      JreOperatorRetainedAssign(&renderer_, self, [[[TPCanvasParticleRenderer alloc] initWithPlaynCoreImage:image] autorelease]);
    }
    else {
      JreOperatorRetainedAssign(&renderer_, self, nil);
    }
  }
  return self;
}

- (void)updateWithFloat:(float)now
              withFloat:(float)dt {
  [super updateWithFloat:now withFloat:dt];
  (void) [((id<PlaynCoreImmediateLayer>) NIL_CHK(myLayer_)) setTranslationWithFloat:[((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) tx] withFloat:[((id<PlaynCoreImmediateLayer>) NIL_CHK(layer_)) ty]];
  self.now = now;
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreImmediateLayer>) NIL_CHK(myLayer_)) destroy];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&renderer_, self, nil);
  JreOperatorRetainedAssign(&myLayer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPTuxEmitter *typedCopy = (TPTuxEmitter *) copy;
  typedCopy.myLayer = myLayer_;
  typedCopy.renderer = renderer_;
  typedCopy.now = now_;
}

@end
@implementation TPTuxEmitter_$1

- (TPTuxEmitter *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TPTuxEmitter *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreImage>)val$image {
  return val$image_;
}
- (void)setVal$image:(id<PlaynCoreImage>)val$image {
  JreOperatorRetainedAssign(&val$image_, self, val$image);
}
@synthesize val$image = val$image_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  if (this$0_.renderer != nil) [this$0_.renderer renderWithPlaynCoreSurface:surface withTPParticleBuffer:this$0_._buffer withPlaynCoreImage:val$image_ withJavaUtilList:this$0_.effectors withFloat:this$0_.now];
}

- (id)initWithTPTuxEmitter:(TPTuxEmitter *)outer$
        withPlaynCoreImage:(id<PlaynCoreImage>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$image_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$image_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TPTuxEmitter_$1 *typedCopy = (TPTuxEmitter_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$image = val$image_;
}

@end
