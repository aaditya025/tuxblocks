//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/anim/AnimGroup.java
//
//  Created by Thomas on 7/1/13.
//

#import "Animation.h"
#import "Animator.h"
#import "IOSObjectArray.h"
#import "java/lang/Float.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"

@implementation TripleplayAnimAnimGroup

- (id<JavaUtilList>)_anims {
  return _anims_;
}
- (void)set_anims:(id<JavaUtilList>)_anims {
  JreOperatorRetainedAssign(&_anims_, self, _anims);
}
@synthesize _anims = _anims_;

- (id)addWithId:(TripleplayAnimAnimation *)anim {
  if (_anims_ == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"AnimGroup already animated."] autorelease];
  [((id<JavaUtilList>) NIL_CHK(_anims_)) addWithId:anim];
  return anim;
}

- (TripleplayAnimAnimation *)toAnim {
  IOSObjectArray *groupAnims = [((id<JavaUtilList>) NIL_CHK(_anims_)) toArrayWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(_anims_)) size] type:[IOSClass classWithClass:[TripleplayAnimAnimation class]]] autorelease]];
  JreOperatorRetainedAssign(&_anims_, self, nil);
  return [[[TripleplayAnimAnimGroup_$1 alloc] initWithTripleplayAnimAnimationArray:groupAnims] autorelease];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_anims_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_anims_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimGroup *typedCopy = (TripleplayAnimAnimGroup *) copy;
  typedCopy._anims = _anims_;
}

@end
@implementation TripleplayAnimAnimGroup_$1

- (TripleplayAnimAnimator *)_animator {
  return _animator_;
}
- (void)set_animator:(TripleplayAnimAnimator *)_animator {
  JreOperatorRetainedAssign(&_animator_, self, _animator);
}
@synthesize _animator = _animator_;
- (IOSObjectArray *)_curAnims {
  return _curAnims_;
}
- (void)set_curAnims:(IOSObjectArray *)_curAnims {
  JreOperatorRetainedAssign(&_curAnims_, self, _curAnims);
}
@synthesize _curAnims = _curAnims_;
- (IOSObjectArray *)val$groupAnims {
  return val$groupAnims_;
}
- (void)setVal$groupAnims:(IOSObjectArray *)val$groupAnims {
  JreOperatorRetainedAssign(&val$groupAnims_, self, val$groupAnims);
}
@synthesize val$groupAnims = val$groupAnims_;

- (void)init__WithFloat:(float)time OBJC_METHOD_FAMILY_NONE {
  [super init__WithFloat:time];
  for (int ii = 0; ii < (int) [((IOSObjectArray *) NIL_CHK(val$groupAnims_)) count]; ii++) {
    [([((IOSObjectArray *) NIL_CHK(_curAnims_)) replaceObjectAtIndex:ii withObject:((TripleplayAnimAnimation *) [((IOSObjectArray *) NIL_CHK(val$groupAnims_)) objectAtIndex:ii])]) init__WithFloat:time];
  }
}

- (float)applyWithTripleplayAnimAnimator:(TripleplayAnimAnimator *)animator
                               withFloat:(float)time {
  JreOperatorRetainedAssign(&_animator_, self, animator);
  return (float) [super applyWithTripleplayAnimAnimator:animator withFloat:time];
}

- (float)applyWithFloat:(float)time {
  float remain = JavaLangFloat_NEGATIVE_INFINITY;
  int processed = 0;
  for (int ii = 0; ii < (int) [((IOSObjectArray *) NIL_CHK(_curAnims_)) count]; ii++) {
    TripleplayAnimAnimation *anim = ((TripleplayAnimAnimation *) [((IOSObjectArray *) NIL_CHK(_curAnims_)) objectAtIndex:ii]);
    if (anim == nil) continue;
    float aremain = [((TripleplayAnimAnimation *) NIL_CHK(anim)) applyWithTripleplayAnimAnimator:_animator_ withFloat:time];
    if (aremain <= 0) [((IOSObjectArray *) NIL_CHK(_curAnims_)) replaceObjectAtIndex:ii withObject:nil];
    remain = [JavaLangMath maxWithFloat:remain withFloat:aremain];
    processed++;
  }
  return processed == 0 ? 0 : remain;
}

- (id)initWithTripleplayAnimAnimationArray:(IOSObjectArray *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$groupAnims_, self, capture$0);
    JreOperatorRetainedAssign(&_curAnims_, self, [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(val$groupAnims_)) count] type:[IOSClass classWithClass:[TripleplayAnimAnimation class]]] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$groupAnims_, self, nil);
  JreOperatorRetainedAssign(&_curAnims_, self, nil);
  JreOperatorRetainedAssign(&_animator_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayAnimAnimGroup_$1 *typedCopy = (TripleplayAnimAnimGroup_$1 *) copy;
  typedCopy._animator = _animator_;
  typedCopy._curAnims = _curAnims_;
  typedCopy.val$groupAnims = val$groupAnims_;
}

@end
