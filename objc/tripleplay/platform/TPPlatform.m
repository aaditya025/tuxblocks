//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: tripleplay/platform/TPPlatform.java
//
//  Created by Thomas on 7/1/13.
//

#import "NativeTextField.h"
#import "Value.h"
#import "ValueView.h"
#import "VirtualKeyboardController.h"
#import "java/lang/Boolean.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/UnsupportedOperationException.h"

@implementation TripleplayPlatformTPPlatform

static TripleplayPlatformTPPlatform * TripleplayPlatformTPPlatform__default_;
static TripleplayPlatformTPPlatform * TripleplayPlatformTPPlatform__instance_;

+ (TripleplayPlatformTPPlatform *)_default {
  return TripleplayPlatformTPPlatform__default_;
}

+ (void)set_default:(TripleplayPlatformTPPlatform *)_default {
  JreOperatorRetainedAssign(&TripleplayPlatformTPPlatform__default_, self, _default);
}

+ (TripleplayPlatformTPPlatform *)_instance {
  return TripleplayPlatformTPPlatform__instance_;
}

+ (void)set_instance:(TripleplayPlatformTPPlatform *)_instance {
  JreOperatorRetainedAssign(&TripleplayPlatformTPPlatform__instance_, self, _instance);
}

+ (TripleplayPlatformTPPlatform *)instance {
  return TripleplayPlatformTPPlatform__instance_;
}

- (BOOL)hasNativeTextFields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<TripleplayPlatformNativeTextField>)createNativeTextField {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setVirtualKeyboardControllerWithTripleplayPlatformVirtualKeyboardController:(id<TripleplayPlatformVirtualKeyboardController>)ctrl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<ReactValueView>)virtualKeyboardActive {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)register__WithTripleplayPlatformTPPlatform:(TripleplayPlatformTPPlatform *)instance {
  if (TripleplayPlatformTPPlatform__instance_ != TripleplayPlatformTPPlatform__default_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"TPPlatform instance already registered."] autorelease];
  }
  JreOperatorRetainedAssign(&TripleplayPlatformTPPlatform__instance_, self, instance);
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TripleplayPlatformTPPlatform class]) {
    JreOperatorRetainedAssign(&TripleplayPlatformTPPlatform__default_, self, [[[TripleplayPlatformTPPlatform_Stub alloc] init] autorelease]);
    JreOperatorRetainedAssign(&TripleplayPlatformTPPlatform__instance_, self, TripleplayPlatformTPPlatform__default_);
  }
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TripleplayPlatformTPPlatform_Stub

- (ReactValue *)_false {
  return _false_;
}
- (void)set_false:(ReactValue *)_false {
  JreOperatorRetainedAssign(&_false_, self, _false);
}
@synthesize _false = _false_;

- (BOOL)hasNativeTextFields {
  return NO;
}

- (id<TripleplayPlatformNativeTextField>)createNativeTextField {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setVirtualKeyboardControllerWithTripleplayPlatformVirtualKeyboardController:(id<TripleplayPlatformVirtualKeyboardController>)ctrl {
}

- (id<ReactValueView>)virtualKeyboardActive {
  return _false_;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&_false_, self, ((ReactValue *) [ReactValue createWithId:[JavaLangBoolean valueOfWithBOOL:NO]]));
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&_false_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TripleplayPlatformTPPlatform_Stub *typedCopy = (TripleplayPlatformTPPlatform_Stub *) copy;
  typedCopy._false = _false_;
}

@end
