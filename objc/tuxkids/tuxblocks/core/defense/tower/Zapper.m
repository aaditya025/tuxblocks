//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\defense\tower\Zapper.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/Math.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Graphics.h"
#import "playn/core/Image.h"
#import "playn/core/PlayN.h"
#import "pythagoras/f/Vector.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Lightning.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/tower/Zapper.h"

@implementation TBZapper

- (PythagorasFVector *)projectileStart_ {
  return projectileStart__;
}
- (void)setProjectileStart_:(PythagorasFVector *)projectileStart_ {
  JreOperatorRetainedAssign(&projectileStart__, self, projectileStart_);
}
@synthesize projectileStart_ = projectileStart__;

- (int)rows {
  return 1;
}

- (int)cols {
  return 1;
}

- (float)damage {
  return 8;
}

- (int)fireRate {
  return 1500;
}

- (float)range {
  return 7;
}

- (TBProjectile *)createProjectile {
  return [[[TBLightning alloc] initWithInt:4 withFloat:0.6f withFloat:0.6f] autorelease];
}

- (TBTower *)copy__ OBJC_METHOD_FAMILY_NONE {
  return [[[TBZapper alloc] init] autorelease];
}

- (NSString *)name {
  return @"Zapper";
}

- (int)cost {
  return 10;
}

- (int)commonness {
  return 1;
}

- (PythagorasFVector *)projectileStart {
  (void) [((PythagorasFVector *) NIL_CHK(projectileStart__)) setWithFloat:[self position].x_ withFloat:[[self position] y] - [self height] * 0.4f];
  return projectileStart__;
}

- (id<PlaynCoreImage>)createImageWithFloat:(float)cellSize
                                   withInt:(int)color {
  int width = (int) (cellSize * [self cols]), height = (int) (cellSize * [self rows] * 1.3f);
  int padding = (int) (cellSize * 0.1f);
  int rad = (int) ([JavaLangMath minWithInt:width withInt:height] * 0.1f);
  id<PlaynCoreCanvasImage> image = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setFillColorWithInt:color];
  (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) setStrokeColorWithInt:[TripleplayUtilColors BLACK]];
  float ratio = 1.3f;
  float w = width - padding * 2;
  float h = w / ratio;
  float y = height - h / 2 - padding;
  float x = width / 2;
  for (int i = 0; i < 3; i++) {
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) fillRoundRectWithFloat:x - w / 2 withFloat:y - h / 2 withFloat:w withFloat:h withFloat:rad];
    (void) [((id<PlaynCoreCanvas>) [((id<PlaynCoreCanvasImage>) NIL_CHK(image)) canvas]) strokeRoundRectWithFloat:x - w / 2 + 0.5f withFloat:y - h / 2 + 0.5f withFloat:w - 1 withFloat:h - 1 withFloat:rad];
    y -= h / 2;
    w -= cellSize / 5;
    h = w / ratio;
  }
  return image;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&projectileStart__, self, [[[PythagorasFVector alloc] init] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&projectileStart__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBZapper *typedCopy = (TBZapper *) copy;
  typedCopy.projectileStart_ = projectileStart__;
}

@end
