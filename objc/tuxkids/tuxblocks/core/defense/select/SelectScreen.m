//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\defense\select\SelectScreen.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/ImmediateLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/Surface.h"
#import "playn/core/util/Clock.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/select/Problem.h"
#import "tuxkids/tuxblocks/core/defense/select/ProblemButton.h"
#import "tuxkids/tuxblocks/core/defense/select/SelectScreen.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/solve/SolveScreen.h"
#import "tuxkids/tuxblocks/core/solve/expression/Equation.h"

@implementation TBSelectScreen

- (TBDGrid *)grid {
  return grid_;
}
- (void)setGrid:(TBDGrid *)grid {
  JreOperatorRetainedAssign(&grid_, self, grid);
}
@synthesize grid = grid_;
- (id<PlaynCoreGroupLayer>)gridHolder {
  return gridHolder_;
}
- (void)setGridHolder:(id<PlaynCoreGroupLayer>)gridHolder {
  JreOperatorRetainedAssign(&gridHolder_, self, gridHolder);
}
@synthesize gridHolder = gridHolder_;
- (id<PlaynCoreGroupLayer>)problemLayer {
  return problemLayer_;
}
- (void)setProblemLayer:(id<PlaynCoreGroupLayer>)problemLayer {
  JreOperatorRetainedAssign(&problemLayer_, self, problemLayer);
}
@synthesize problemLayer = problemLayer_;
- (TBProblemButton *)selectedProblem {
  return selectedProblem_;
}
- (void)setSelectedProblem:(TBProblemButton *)selectedProblem {
  JreOperatorRetainedAssign(&selectedProblem_, self, selectedProblem);
}
@synthesize selectedProblem = selectedProblem_;
- (id<JavaUtilList>)problemButtons {
  return problemButtons_;
}
- (void)setProblemButtons:(id<JavaUtilList>)problemButtons {
  JreOperatorRetainedAssign(&problemButtons_, self, problemButtons);
}
@synthesize problemButtons = problemButtons_;
- (TBProblemButton *)bottomLeft {
  return bottomLeft_;
}
- (void)setBottomLeft:(TBProblemButton *)bottomLeft {
  JreOperatorRetainedAssign(&bottomLeft_, self, bottomLeft);
}
@synthesize bottomLeft = bottomLeft_;
- (TBProblemButton *)bottomRight {
  return bottomRight_;
}
- (void)setBottomRight:(TBProblemButton *)bottomRight {
  JreOperatorRetainedAssign(&bottomRight_, self, bottomRight);
}
@synthesize bottomRight = bottomRight_;
- (TBSolveScreen *)solveScreen {
  return solveScreen_;
}
- (void)setSolveScreen:(TBSolveScreen *)solveScreen {
  JreOperatorRetainedAssign(&solveScreen_, self, solveScreen);
}
@synthesize solveScreen = solveScreen_;
@synthesize del = del_;

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
                        withTBGameState:(TBGameState *)gameState
                            withTBDGrid:(TBDGrid *)grid {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTBGameState:gameState])) {
    JreOperatorRetainedAssign(&problemButtons_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    self.grid = grid;
    TBButton *button = [self createMenuButtonWithNSString:[TBConstant BUTTON_FORWARD]];
    (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(button)) layerAddable]) setDepthWithFloat:1];
    [((TBButton *) NIL_CHK(button)) setPositionWithFloat:[self width] - [((TBButton *) NIL_CHK(button)) width] * 0.6f withFloat:[((TBButton *) NIL_CHK(button)) height] * 0.6f];
    [((TBButton *) NIL_CHK(button)) setOnReleasedListenerWithTBButton_OnReleasedListener:[[[TBSelectScreen_$1 alloc] initWithTBSelectScreen:self] autorelease]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBButton *) NIL_CHK(button)) layerAddable]];
    TBMenuSprite *menu = [[[TBMenuSprite alloc] initWithFloat:[self width] withFloat:[TBGameScreen defaultButtonSize] * 1.2f] autorelease];
    (void) [((id<PlaynCoreLayer>) [((TBMenuSprite *) NIL_CHK(menu)) layer]) setDepthWithFloat:-1];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBMenuSprite *) NIL_CHK(menu)) layer]];
    JreOperatorRetainedAssign(&gridHolder_, self, [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) createGroupLayer]);
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setScaleWithFloat:[((TBMenuSprite *) NIL_CHK(menu)) height] / [((TBDGrid *) NIL_CHK(grid)) height]];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setTranslationWithFloat:0 withFloat:0];
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setAlphaWithFloat:0.75f];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:gridHolder_];
    JreOperatorRetainedAssign(&problemLayer_, self, [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) createGroupLayer]);
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(problemLayer_)) setTyWithFloat:[((TBMenuSprite *) NIL_CHK(menu)) height]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:problemLayer_];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[((TBGameState *) NIL_CHK(state__)) problems] iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TBProblem *problem = ((TBProblem *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [self addProblemButtonWithTBProblem:problem];
      }
    }
    JreOperatorRetainedAssign(&solveScreen_, self, [[[TBSolveScreen alloc] initWithTripleplayGameScreenStack:screens withTBGameState:gameState] autorelease]);
    id<PlaynCoreImmediateLayer> il = [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) createImmediateLayerWithPlaynCoreImmediateLayer_Renderer:[[[TBSelectScreen_$2 alloc] initWithTBSelectScreen:self] autorelease]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) addWithPlaynCoreLayer:il];
    [((TBGameState *) NIL_CHK(state__)) setProblemAddedListenerWithTBGameState_ProblemAddedListener:self];
  }
  return self;
}

- (void)popThis {
  [self popThisWithTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] left]];
}

- (void)addProblemButtonWithTBProblem:(TBProblem *)problem {
  int margin = TBProblemButton_MARGIN;
  int width = (int) (([self width] - margin * (TBSelectScreen_COLS + 1)) / TBSelectScreen_COLS);
  int minHeight = (int) ([self height] / 6);
  int col;
  if (bottomLeft_ == nil) {
    col = 0;
  }
  else if (bottomRight_ == nil) {
    col = 1;
  }
  else if ([((TBProblemButton *) NIL_CHK(bottomLeft_)) bottom] <= [bottomRight_ bottom]) {
    col = 0;
  }
  else {
    col = 1;
  }
  TBProblemButton *above = col == 0 ? bottomLeft_ : bottomRight_;
  float aboveY = above == nil ? 0 : [((TBProblemButton *) NIL_CHK(above)) bottom];
  TBProblemButton *pb = [[[TBProblemButton alloc] initWithTBProblem:problem withFloat:width withFloat:minHeight withInt:[((TBDGrid *) NIL_CHK(grid_)) towerColor]] autorelease];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(problemLayer_)) addWithPlaynCoreLayer:[((TBProblemButton *) NIL_CHK(pb)) layerAddable]];
  [((TBProblemButton *) NIL_CHK(pb)) setPositionWithFloat:(col + 0.5f) * [self width] / TBSelectScreen_COLS withFloat:aboveY + margin + [((TBProblemButton *) NIL_CHK(pb)) height] / 2];
  [((TBProblemButton *) NIL_CHK(pb)) setTintWithInt:[PlaynCoreColor withAlphaWithInt:[TripleplayUtilColors WHITE] withInt:225] withInt:[TripleplayUtilColors LIGHT_GRAY]];
  [((TBProblemButton *) NIL_CHK(pb)) setOnReleasedListenerWithTBButton_OnReleasedListener:[[[TBSelectScreen_$3 alloc] initWithTBSelectScreen:self withTBProblemButton:pb] autorelease]];
  [((TBProblemButton *) NIL_CHK(pb)) fadeInWithFloat:1];
  if (above != nil) {
    [above setBelowWithTBProblemButton:pb];
    [((TBProblemButton *) NIL_CHK(pb)) setAboveWithTBProblemButton:above];
  }
  if (col == 0) {
    JreOperatorRetainedAssign(&bottomLeft_, self, pb);
  }
  else {
    JreOperatorRetainedAssign(&bottomRight_, self, pb);
  }
  [((id<JavaUtilList>) NIL_CHK(problemButtons_)) addWithId:pb];
}

- (void)solveProblemWithTBProblemButton:(TBProblemButton *)button {
  [((TBGameState *) NIL_CHK(state__)) solveProblemWithTBProblem:[((TBProblemButton *) NIL_CHK(button)) problem]];
  [((TBProblemButton *) NIL_CHK(button)) destroy];
  if ([((TBProblemButton *) NIL_CHK(button)) above] != nil) {
    [[((TBProblemButton *) NIL_CHK(button)) above] setBelowWithTBProblemButton:[((TBProblemButton *) NIL_CHK(button)) below]];
  }
  if ([((TBProblemButton *) NIL_CHK(button)) below] != nil) {
    [[((TBProblemButton *) NIL_CHK(button)) below] setAboveWithTBProblemButton:[((TBProblemButton *) NIL_CHK(button)) above]];
  }
  if (bottomLeft_ == button) JreOperatorRetainedAssign(&bottomLeft_, self, [((TBProblemButton *) NIL_CHK(bottomLeft_)) above]);
  if (bottomRight_ == button) JreOperatorRetainedAssign(&bottomRight_, self, [((TBProblemButton *) NIL_CHK(bottomRight_)) above]);
}

- (void)showTransitionCompleted {
  [super showTransitionCompleted];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  [((TBDGrid *) NIL_CHK(grid_)) updateWithInt:delta];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [((TBDGrid *) NIL_CHK(grid_)) paintWithPlaynCoreUtilClock:clock];
  if ([self entering]) return;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(problemButtons_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TBProblemButton *problem = ((TBProblemButton *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TBProblemButton *) NIL_CHK(problem)) paintWithPlaynCoreUtilClock:clock];
    }
  }
  if (del_ && selectedProblem_ != nil && [((id<PlaynCoreLayer>) [((TBProblemButton *) NIL_CHK(selectedProblem_)) layerAddable]) alpha] < 0.03f) {
    [self solveProblemWithTBProblemButton:selectedProblem_];
    del_ = NO;
  }
}

- (void)onChildScreenFinishedWithTBGameScreen:(TBGameScreen *)screen {
  [super onChildScreenFinishedWithTBGameScreen:screen];
  if ([screen isKindOfClass:[TBSolveScreen class]]) {
    [((TBProblemButton *) NIL_CHK(selectedProblem_)) setEquationWithTBEquation:[((TBSolveScreen *) screen) equation]];
    del_ = [((TBSolveScreen *) screen) solved];
    if (del_) {
      [((TBProblemButton *) NIL_CHK(selectedProblem_)) setEnabledWithBOOL:NO];
      [((TBProblemButton *) NIL_CHK(selectedProblem_)) fadeOut];
    }
  }
}

- (void)onProblemAddedWithTBProblem:(TBProblem *)problem {
  [self addProblemButtonWithTBProblem:problem];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&solveScreen_, self, nil);
  JreOperatorRetainedAssign(&bottomRight_, self, nil);
  JreOperatorRetainedAssign(&bottomLeft_, self, nil);
  JreOperatorRetainedAssign(&problemButtons_, self, nil);
  JreOperatorRetainedAssign(&selectedProblem_, self, nil);
  JreOperatorRetainedAssign(&problemLayer_, self, nil);
  JreOperatorRetainedAssign(&gridHolder_, self, nil);
  JreOperatorRetainedAssign(&grid_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSelectScreen *typedCopy = (TBSelectScreen *) copy;
  typedCopy.grid = grid_;
  typedCopy.gridHolder = gridHolder_;
  typedCopy.problemLayer = problemLayer_;
  typedCopy.selectedProblem = selectedProblem_;
  typedCopy.problemButtons = problemButtons_;
  typedCopy.bottomLeft = bottomLeft_;
  typedCopy.bottomRight = bottomRight_;
  typedCopy.solveScreen = solveScreen_;
  typedCopy.del = del_;
}

@end
@implementation TBSelectScreen_$1

- (TBSelectScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBSelectScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    [this$0_ popThis];
  }
}

- (id)initWithTBSelectScreen:(TBSelectScreen *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSelectScreen_$1 *typedCopy = (TBSelectScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBSelectScreen_$2

- (TBSelectScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBSelectScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)renderWithPlaynCoreSurface:(id<PlaynCoreSurface>)surface {
  (void) [((id<PlaynCoreSurface>) NIL_CHK(surface)) drawLayerWithPlaynCoreLayer:[((TBDGrid *) NIL_CHK(this$0_.grid)) layer]];
}

- (id)initWithTBSelectScreen:(TBSelectScreen *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSelectScreen_$2 *typedCopy = (TBSelectScreen_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBSelectScreen_$3

- (TBSelectScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBSelectScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (TBProblemButton *)val$pb {
  return val$pb_;
}
- (void)setVal$pb:(TBProblemButton *)val$pb {
  JreOperatorRetainedAssign(&val$pb_, self, val$pb);
}
@synthesize val$pb = val$pb_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    this$0_.selectedProblem = val$pb_;
    [((TBSolveScreen *) NIL_CHK(this$0_.solveScreen)) setEquationWithTBEquation:[((TBProblemButton *) NIL_CHK(val$pb_)) equation]];
    [this$0_ pushScreenWithTBGameScreen:this$0_.solveScreen withTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(this$0_.screens)) slide] down]];
  }
}

- (id)initWithTBSelectScreen:(TBSelectScreen *)outer$
         withTBProblemButton:(TBProblemButton *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$pb_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$pb_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSelectScreen_$3 *typedCopy = (TBSelectScreen_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$pb = val$pb_;
}

@end
