//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\defense\DefenseScreen.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/util/Clock.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/defense/DefenseScreen.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/Inventory.h"
#import "tuxkids/tuxblocks/core/defense/round/Level.h"
#import "tuxkids/tuxblocks/core/defense/select/SelectScreen.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TBDDefenseScreen

- (TBDGrid *)grid {
  return grid_;
}
- (void)setGrid:(TBDGrid *)grid {
  JreOperatorRetainedAssign(&grid_, self, grid);
}
@synthesize grid = grid_;
- (TBDInventory *)inventory {
  return inventory_;
}
- (void)setInventory:(TBDInventory *)inventory {
  JreOperatorRetainedAssign(&inventory_, self, inventory);
}
@synthesize inventory = inventory_;
- (id<PlaynCoreGroupLayer>)gridHolder {
  return gridHolder_;
}
- (void)setGridHolder:(id<PlaynCoreGroupLayer>)gridHolder {
  JreOperatorRetainedAssign(&gridHolder_, self, gridHolder);
}
@synthesize gridHolder = gridHolder_;
- (TBSelectScreen *)selectScreen {
  return selectScreen_;
}
- (void)setSelectScreen:(TBSelectScreen *)selectScreen {
  JreOperatorRetainedAssign(&selectScreen_, self, selectScreen);
}
@synthesize selectScreen = selectScreen_;
- (TBButton *)buttonPlus {
  return buttonPlus_;
}
- (void)setButtonPlus:(TBButton *)buttonPlus {
  JreOperatorRetainedAssign(&buttonPlus_, self, buttonPlus);
}
@synthesize buttonPlus = buttonPlus_;
- (TBButton *)buttonStart {
  return buttonStart_;
}
- (void)setButtonStart:(TBButton *)buttonStart {
  JreOperatorRetainedAssign(&buttonStart_, self, buttonStart);
}
@synthesize buttonStart = buttonStart_;
- (TBMenuSprite *)menuSprite {
  return menuSprite_;
}
- (void)setMenuSprite:(TBMenuSprite *)menuSprite {
  JreOperatorRetainedAssign(&menuSprite_, self, menuSprite);
}
@synthesize menuSprite = menuSprite_;

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
                        withTBGameState:(TBGameState *)gameState {
  return [super initWithTripleplayGameScreenStack:screens withTBGameState:gameState];
}

- (void)wasAdded {
  float titleBarHeight = [TBGameScreen defaultButtonSize] * 1.2f;
  float maxGridWidth = [self width] * 0.7f;
  TBDGrid *testGrid = [[[TBDGrid alloc] initWithTBGameState:state__ withInt:15 withInt:21 withInt:(int) maxGridWidth withInt:(int) ([self height] - titleBarHeight)] autorelease];
  JreOperatorRetainedAssign(&grid_, self, testGrid);
  [((TBDGrid *) NIL_CHK(grid_)) setTowerColorWithInt:[((TBGameState *) NIL_CHK(state__)) themeColor]];
  JreOperatorRetainedAssign(&gridHolder_, self, [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) createGroupLayer]);
  [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) addWithPlaynCoreLayer:[((TBDGrid *) NIL_CHK(grid_)) layer]];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setTranslationWithFloat:[self width] - [((TBDGrid *) NIL_CHK(testGrid)) width] withFloat:([self height] + titleBarHeight - [((TBDGrid *) NIL_CHK(testGrid)) height]) / 2];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(gridHolder_)) setDepthWithFloat:1];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:gridHolder_];
  JreOperatorRetainedAssign(&inventory_, self, [[[TBDInventory alloc] initWithTBDDefenseScreen:self withTBDGrid:grid_ withInt:(int) ([self width] - [((TBDGrid *) NIL_CHK(testGrid)) width]) withInt:(int) ([self height] - titleBarHeight)] autorelease]);
  (void) [((id<PlaynCoreGroupLayer>) [((TBDInventory *) NIL_CHK(inventory_)) layer]) setDepthWithFloat:1];
  (void) [((id<PlaynCoreGroupLayer>) [((TBDInventory *) NIL_CHK(inventory_)) layer]) setTyWithFloat:titleBarHeight];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBDInventory *) NIL_CHK(inventory_)) layer]];
  JreOperatorRetainedAssign(&menuSprite_, self, [[[TBMenuSprite alloc] initWithFloat:[self width] withFloat:titleBarHeight] autorelease]);
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBMenuSprite *) NIL_CHK(menuSprite_)) layer]];
  JreOperatorRetainedAssign(&selectScreen_, self, [[[TBSelectScreen alloc] initWithTripleplayGameScreenStack:screens_ withTBGameState:state__ withTBDGrid:grid_] autorelease]);
  [self createPlusButton];
  [self createStartButton];
}

- (void)createPlusButton {
  float size = [TBGameScreen defaultButtonSize];
  JreOperatorRetainedAssign(&buttonPlus_, self, [self createMenuButtonWithNSString:[TBConstant BUTTON_PLUS]]);
  [((TBButton *) NIL_CHK(buttonPlus_)) setPositionWithFloat:size * 0.6f withFloat:size * 0.6f];
  (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(buttonPlus_)) layerAddable]) setDepthWithFloat:1];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBButton *) NIL_CHK(buttonPlus_)) layerAddable]];
  [((TBButton *) NIL_CHK(buttonPlus_)) setOnReleasedListenerWithTBButton_OnReleasedListener:[[[TBDDefenseScreen_$1 alloc] initWithTBDDefenseScreen:self] autorelease]];
}

- (void)createStartButton {
  float size = [TBGameScreen defaultButtonSize];
  JreOperatorRetainedAssign(&buttonStart_, self, [self createMenuButtonWithNSString:[TBConstant BUTTON_OK]]);
  [((TBButton *) NIL_CHK(buttonStart_)) setPositionWithFloat:[self width] - size * 0.6f withFloat:size * 0.6f];
  (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(buttonStart_)) layerAddable]) setDepthWithFloat:1];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBButton *) NIL_CHK(buttonStart_)) layerAddable]];
  [((TBButton *) NIL_CHK(buttonStart_)) setOnReleasedListenerWithTBButton_OnReleasedListener:[[[TBDDefenseScreen_$2 alloc] initWithTBDDefenseScreen:self] autorelease]];
}

- (void)wasShown {
  [super wasShown];
  [((TBDInventory *) NIL_CHK(inventory_)) refreshCountSprites];
}

- (void)showTransitionCompleted {
  [super showTransitionCompleted];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
  [((TBDGrid *) NIL_CHK(grid_)) updateWithInt:delta];
  TBLevel *level = [((TBDGrid *) NIL_CHK(grid_)) level];
  (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(buttonStart_)) layerAddable]) setVisibleWithBOOL:NO];
  if ([((TBLevel *) NIL_CHK(level)) finished]) {
    [((TBMenuSprite *) NIL_CHK(menuSprite_)) setTextWithNSString:@"Level Complete!"];
  }
  if ([((TBLevel *) NIL_CHK(level)) duringRound]) {
    [((TBMenuSprite *) NIL_CHK(menuSprite_)) setTextWithNSString:[NSString stringWithFormat:@"Round %d", [((TBLevel *) NIL_CHK(level)) round]]];
  }
  else {
    int nextRoundIn = [[((TBDGrid *) NIL_CHK(grid_)) level] timeUntilNextRound] / 1000 + 1;
    [((TBMenuSprite *) NIL_CHK(menuSprite_)) setTextWithNSString:[TBFormatter formatWithNSString:@"Next round in %d..." withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [JavaLangInteger valueOfWithInt:nextRoundIn] ]]];
    (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(buttonStart_)) layerAddable]) setVisibleWithBOOL:YES];
  }
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
  [((TBDGrid *) NIL_CHK(grid_)) paintWithPlaynCoreUtilClock:clock];
}

- (void)pushSelectScreen {
  [self pushScreenWithTBGameScreen:selectScreen_ withTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] right]];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&menuSprite_, self, nil);
  JreOperatorRetainedAssign(&buttonStart_, self, nil);
  JreOperatorRetainedAssign(&buttonPlus_, self, nil);
  JreOperatorRetainedAssign(&selectScreen_, self, nil);
  JreOperatorRetainedAssign(&gridHolder_, self, nil);
  JreOperatorRetainedAssign(&inventory_, self, nil);
  JreOperatorRetainedAssign(&grid_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBDDefenseScreen *typedCopy = (TBDDefenseScreen *) copy;
  typedCopy.grid = grid_;
  typedCopy.inventory = inventory_;
  typedCopy.gridHolder = gridHolder_;
  typedCopy.selectScreen = selectScreen_;
  typedCopy.buttonPlus = buttonPlus_;
  typedCopy.buttonStart = buttonStart_;
  typedCopy.menuSprite = menuSprite_;
}

@end
@implementation TBDDefenseScreen_$1

- (TBDDefenseScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBDDefenseScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) [this$0_ pushSelectScreen];
}

- (id)initWithTBDDefenseScreen:(TBDDefenseScreen *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBDDefenseScreen_$1 *typedCopy = (TBDDefenseScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBDDefenseScreen_$2

- (TBDDefenseScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBDDefenseScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) {
    [[((TBDGrid *) NIL_CHK(this$0_.grid)) level] startNextRound];
  }
}

- (id)initWithTBDDefenseScreen:(TBDDefenseScreen *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBDDefenseScreen_$2 *typedCopy = (TBDDefenseScreen_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
