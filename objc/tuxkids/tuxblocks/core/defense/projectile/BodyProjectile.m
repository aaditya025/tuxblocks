//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\defense\projectile\BodyProjectile.java
//
//  Created by Thomas on 7/1/13.
//

#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/defense/Grid.h"
#import "tuxkids/tuxblocks/core/defense/projectile/BodyProjectile.h"
#import "tuxkids/tuxblocks/core/defense/projectile/Projectile.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TBBodyProjectile

- (PythagorasFVector *)position {
  return position_;
}
- (void)setPosition:(PythagorasFVector *)position {
  JreOperatorRetainedAssign(&position_, self, position);
}
@synthesize position = position_;
- (PythagorasFVector *)velocity {
  return velocity_;
}
- (void)setVelocity:(PythagorasFVector *)velocity {
  JreOperatorRetainedAssign(&velocity_, self, velocity);
}
@synthesize velocity = velocity_;
- (PythagorasFVector *)temp {
  return temp_;
}
- (void)setTemp:(PythagorasFVector *)temp {
  JreOperatorRetainedAssign(&temp_, self, temp);
}
@synthesize temp = temp_;

- (float)maxSpeed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (float)acceleration {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)placeWithTBDGrid:(TBDGrid *)grid
            withTBWalker:(TBWalker *)target
             withTBTower:(TBTower *)source {
  [super placeWithTBDGrid:grid withTBWalker:target withTBTower:source];
  [TBPlayNObject centerImageLayerWithPlaynCoreImageLayer:layer__];
  self.position = [[((TBTower *) NIL_CHK(source)) projectileStart] clone];
  JreOperatorRetainedAssign(&velocity_, self, [[[PythagorasFVector alloc] init] autorelease]);
  [self updateWithInt:0];
}

- (BOOL)doUpdateWithInt:(int)delta {
  TBWalker *hit = [((TBDGrid *) NIL_CHK(grid_)) getHitWalkerWithPythagorasFVector:position_];
  if (hit != nil) {
    [self dealDamage];
    return YES;
  }
  if ([((TBDGrid *) NIL_CHK(grid_)) isOutOfBoundsWithPythagorasFVector:position_]) {
    return YES;
  }
  if ([((TBWalker *) NIL_CHK(target__)) isAlive]) {
    (void) [[((TBWalker *) NIL_CHK(target__)) position] subtractWithPythagorasFIVector:position_ withPythagorasFVector:temp_];
    (void) [((PythagorasFVector *) NIL_CHK(temp_)) normalizeLocal];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setRotationWithFloat:[((PythagorasFVector *) NIL_CHK(temp_)) angle]];
    (void) [((PythagorasFVector *) NIL_CHK(velocity_)) addScaledWithPythagorasFIVector:temp_ withFloat:[self acceleration] * delta * 30 withPythagorasFVector:velocity_];
    if ([((PythagorasFVector *) NIL_CHK(velocity_)) length] > [self maxSpeed]) (void) [((PythagorasFVector *) NIL_CHK(velocity_)) scale__WithFloat:[self maxSpeed] / [((PythagorasFVector *) NIL_CHK(velocity_)) length] withPythagorasFVector:velocity_];
  }
  else if ([((PythagorasFVector *) NIL_CHK(velocity_)) length] == 0) {
    return YES;
  }
  return NO;
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  ((PythagorasFVector *) NIL_CHK(position_)).x_ += ((PythagorasFVector *) NIL_CHK(velocity_)).x_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  ((PythagorasFVector *) NIL_CHK(position_)).y_ += ((PythagorasFVector *) NIL_CHK(velocity_)).y_ * [((id<PlaynCoreUtilClock>) NIL_CHK(clock)) dt];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setTranslationWithFloat:((PythagorasFVector *) NIL_CHK(position_)).x_ withFloat:((PythagorasFVector *) NIL_CHK(position_)).y_];
}

- (PythagorasFVector *)getHitPosition {
  return position_;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&temp_, self, [[[PythagorasFVector alloc] init] autorelease]);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&temp_, self, nil);
  JreOperatorRetainedAssign(&velocity_, self, nil);
  JreOperatorRetainedAssign(&position_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBBodyProjectile *typedCopy = (TBBodyProjectile *) copy;
  typedCopy.position = position_;
  typedCopy.velocity = velocity_;
  typedCopy.temp = temp_;
}

@end
