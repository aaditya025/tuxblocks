//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\defense\round\Level.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "tuxkids/tuxblocks/core/defense/round/Level.h"
#import "tuxkids/tuxblocks/core/defense/round/Reward.h"
#import "tuxkids/tuxblocks/core/defense/round/Round.h"
#import "tuxkids/tuxblocks/core/defense/round/Wave.h"
#import "tuxkids/tuxblocks/core/defense/tower/TowerType.h"
#import "tuxkids/tuxblocks/core/defense/walker/FlipWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/InchWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/ShrinkWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/SlideWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/SpinWalker.h"
#import "tuxkids/tuxblocks/core/defense/walker/Walker.h"

@implementation TBLevel

- (id<JavaUtilList>)rounds {
  return rounds_;
}
- (void)setRounds:(id<JavaUtilList>)rounds {
  JreOperatorRetainedAssign(&rounds_, self, rounds);
}
@synthesize rounds = rounds_;
- (id<JavaUtilList>)waitTimes {
  return waitTimes_;
}
- (void)setWaitTimes:(id<JavaUtilList>)waitTimes {
  JreOperatorRetainedAssign(&waitTimes_, self, waitTimes);
}
@synthesize waitTimes = waitTimes_;
- (id<TBLevel_RoundCompletedListener>)roundCompletedListener {
  return roundCompletedListener_;
}
- (void)setRoundCompletedListener:(id<TBLevel_RoundCompletedListener>)roundCompletedListener {
  JreOperatorRetainedAssign(&roundCompletedListener_, self, roundCompletedListener);
}
@synthesize roundCompletedListener = roundCompletedListener_;
@synthesize timer = timer_;
- (TBRound *)currentRound {
  return currentRound_;
}
- (void)setCurrentRound:(TBRound *)currentRound {
  JreOperatorRetainedAssign(&currentRound_, self, currentRound);
}
@synthesize currentRound = currentRound_;
@synthesize round_ = round__;

- (int)round {
  return round__;
}

- (int)timeUntilNextRound {
  if (currentRound_ != nil) return 0;
  if ([((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] == 0) return 0;
  return [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue] - timer_;
}

- (void)startNextRound {
  if (currentRound_ != nil) return;
  if ([((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] == 0) return;
  timer_ = [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue];
}

- (BOOL)duringRound {
  return currentRound_ != nil;
}

- (void)setRoundCompletedListenerWithTBLevel_RoundCompletedListener:(id<TBLevel_RoundCompletedListener>)roundCompletedListener {
  self.roundCompletedListener = roundCompletedListener;
}

- (void)populateLevel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&rounds_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&waitTimes_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    round__ = 0;
    [self populateLevel];
  }
  return self;
}

- (void)addRoundWithTBRound:(TBRound *)round
                  withFloat:(float)waitTimeSeconds {
  [((id<JavaUtilList>) NIL_CHK(rounds_)) addWithId:round];
  [((id<JavaUtilList>) NIL_CHK(waitTimes_)) addWithId:[JavaLangInteger valueOfWithInt:(int) (waitTimeSeconds * 1000)]];
}

- (TBWalker *)updateWithInt:(int)delta {
  if ([self finished]) return nil;
  if (currentRound_ != nil) {
    TBWalker *walker = [currentRound_ updateWithInt:delta];
    if ([currentRound_ finished]) {
      [((id<TBLevel_RoundCompletedListener>) NIL_CHK(roundCompletedListener_)) onRoundCompletedWithTBRound:currentRound_];
      JreOperatorRetainedAssign(&currentRound_, self, nil);
    }
    return walker;
  }
  timer_ += delta;
  if (currentRound_ == nil && [((id<JavaUtilList>) NIL_CHK(waitTimes_)) size] > 0 && timer_ >= [((JavaLangInteger *) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) getWithInt:0]) intValue]) {
    JreOperatorRetainedAssign(&currentRound_, self, ((TBRound *) [((id<JavaUtilList>) NIL_CHK(rounds_)) removeWithInt:0]));
    (void) [((id<JavaUtilList>) NIL_CHK(waitTimes_)) removeWithInt:0];
    timer_ = 0;
    round__++;
  }
  return nil;
}

- (BOOL)finished {
  return [((id<JavaUtilList>) NIL_CHK(rounds_)) size] == 0 && currentRound_ == nil;
}

+ (TBLevel *)generate {
  TBWalker *basic = [[[TBSlideWalker alloc] initWithInt:10 withInt:500] autorelease];
  TBWalker *medium = [[[TBFlipWalker alloc] initWithInt:30 withInt:750] autorelease];
  TBWalker *hard = [[[TBInchWalker alloc] initWithInt:70 withInt:1500] autorelease];
  TBWalker *quick = [[[TBSpinWalker alloc] initWithInt:15 withInt:375] autorelease];
  TBWalker *quicker = [[[TBShrinkWalker alloc] initWithInt:20 withInt:250] autorelease];
  int timeBetween = 30;
  return [[[TBLevel_$1 alloc] initWithTBWalker:basic withTBWalker:medium withTBWalker:quick withTBWalker:hard] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&currentRound_, self, nil);
  JreOperatorRetainedAssign(&roundCompletedListener_, self, nil);
  JreOperatorRetainedAssign(&waitTimes_, self, nil);
  JreOperatorRetainedAssign(&rounds_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel *typedCopy = (TBLevel *) copy;
  typedCopy.rounds = rounds_;
  typedCopy.waitTimes = waitTimes_;
  typedCopy.roundCompletedListener = roundCompletedListener_;
  typedCopy.timer = timer_;
  typedCopy.currentRound = currentRound_;
  typedCopy.round_ = round__;
}

@end
@implementation TBLevel_$1

- (TBWalker *)val$basic {
  return val$basic_;
}
- (void)setVal$basic:(TBWalker *)val$basic {
  JreOperatorRetainedAssign(&val$basic_, self, val$basic);
}
@synthesize val$basic = val$basic_;
- (TBWalker *)val$medium {
  return val$medium_;
}
- (void)setVal$medium:(TBWalker *)val$medium {
  JreOperatorRetainedAssign(&val$medium_, self, val$medium);
}
@synthesize val$medium = val$medium_;
- (TBWalker *)val$quick {
  return val$quick_;
}
- (void)setVal$quick:(TBWalker *)val$quick {
  JreOperatorRetainedAssign(&val$quick_, self, val$quick);
}
@synthesize val$quick = val$quick_;
- (TBWalker *)val$hard {
  return val$hard_;
}
- (void)setVal$hard:(TBWalker *)val$hard {
  JreOperatorRetainedAssign(&val$hard_, self, val$hard);
}
@synthesize val$hard = val$hard_;

- (void)populateLevel {
  [self addRoundWithTBRound:[[[TBLevel_$1_$1 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$2 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$3 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$4 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$5 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$6 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$7 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$8 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$9 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
  [self addRoundWithTBRound:[[[TBLevel_$1_$10 alloc] initWithTBLevel_$1:self] autorelease] withFloat:30];
}

- (id)initWithTBWalker:(TBWalker *)capture$0
          withTBWalker:(TBWalker *)capture$1
          withTBWalker:(TBWalker *)capture$2
          withTBWalker:(TBWalker *)capture$3 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$basic_, self, capture$0);
    JreOperatorRetainedAssign(&val$medium_, self, capture$1);
    JreOperatorRetainedAssign(&val$quick_, self, capture$2);
    JreOperatorRetainedAssign(&val$hard_, self, capture$3);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$hard_, self, nil);
  JreOperatorRetainedAssign(&val$quick_, self, nil);
  JreOperatorRetainedAssign(&val$medium_, self, nil);
  JreOperatorRetainedAssign(&val$basic_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1 *typedCopy = (TBLevel_$1 *) copy;
  typedCopy.val$basic = val$basic_;
  typedCopy.val$medium = val$medium_;
  typedCopy.val$quick = val$quick_;
  typedCopy.val$hard = val$hard_;
}

@end
@implementation TBLevel_$1_$1

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:1000 withInt:5] autorelease] withInt:0];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$1 *typedCopy = (TBLevel_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$2

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:5] autorelease] withInt:0];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:5] autorelease] withInt:2000];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$2 *typedCopy = (TBLevel_$1_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$3

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:3] autorelease] withInt:0];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:1000 withInt:3] autorelease] withInt:2000];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:3] autorelease] withInt:2000];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum BigShooter] withInt:1] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$3 *typedCopy = (TBLevel_$1_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$4

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:15] autorelease] withInt:0];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$4 *typedCopy = (TBLevel_$1_$4 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$5

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:2] autorelease] withInt:0];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:2] autorelease] withInt:500];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:2] autorelease] withInt:500];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:2] autorelease] withInt:500];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:500 withInt:2] autorelease] withInt:500];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:2] autorelease] withInt:500];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum BigShooter] withInt:1] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$5 *typedCopy = (TBLevel_$1_$5 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$6

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$quick withInt:250 withInt:6] autorelease] withInt:0];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum HorizontalWall] withInt:1] autorelease]];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum VerticalWall] withInt:1] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$6 *typedCopy = (TBLevel_$1_$6 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$7

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:3] autorelease] withInt:0];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$quick withInt:500 withInt:3] autorelease] withInt:1000];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:4] autorelease] withInt:1000];
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$quick withInt:500 withInt:4] autorelease] withInt:1000];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum BigShooter] withInt:1] autorelease]];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$7 *typedCopy = (TBLevel_$1_$7 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$8

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$basic withInt:300 withInt:25] autorelease] withInt:0];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum Freezer] withInt:1] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$8 *typedCopy = (TBLevel_$1_$8 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$9

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$medium withInt:500 withInt:15] autorelease] withInt:0];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum Freezer] withInt:1] autorelease]];
  [self addRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum BigShooter] withInt:1] autorelease]];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$9 *typedCopy = (TBLevel_$1_$9 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBLevel_$1_$10

- (TBLevel_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBLevel_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)populateRound {
  [self addWaveWithTBWave:[[[TBWave alloc] initWithTBWalker:this$0_.val$hard withInt:1500 withInt:5] autorelease] withInt:0];
}

- (id)initWithTBLevel_$1:(TBLevel_$1 *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBLevel_$1_$10 *typedCopy = (TBLevel_$1_$10 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
