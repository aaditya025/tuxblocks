//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\Button.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/Math.h"
#import "java/lang/Throwable.h"
#import "playn/core/Assets.h"
#import "playn/core/Color.h"
#import "playn/core/Image.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"

@implementation TBButton

- (TBImageLayerTintable *)imageLayer_ {
  return imageLayer__;
}
- (void)setImageLayer_:(TBImageLayerTintable *)imageLayer_ {
  JreOperatorRetainedAssign(&imageLayer__, self, imageLayer_);
}
@synthesize imageLayer_ = imageLayer__;
- (id<TBButton_OnPressedListener>)onPressedListener {
  return onPressedListener_;
}
- (void)setOnPressedListener:(id<TBButton_OnPressedListener>)onPressedListener {
  JreOperatorRetainedAssign(&onPressedListener_, self, onPressedListener);
}
@synthesize onPressedListener = onPressedListener_;
- (id<TBButton_OnReleasedListener>)onReleaseListener {
  return onReleaseListener_;
}
- (void)setOnReleaseListener:(id<TBButton_OnReleasedListener>)onReleaseListener {
  JreOperatorRetainedAssign(&onReleaseListener_, self, onReleaseListener);
}
@synthesize onReleaseListener = onReleaseListener_;
- (id<TBButton_OnDragListener>)onDragListener {
  return onDragListener_;
}
- (void)setOnDragListener:(id<TBButton_OnDragListener>)onDragListener {
  JreOperatorRetainedAssign(&onDragListener_, self, onDragListener);
}
@synthesize onDragListener = onDragListener_;
@synthesize width_ = width__;
@synthesize height_ = height__;
@synthesize pressed_ = pressed__;
@synthesize isCircle_ = isCircle__;
@synthesize tint_ = tint__;
@synthesize tintPressed = tintPressed_;
@synthesize enabled_ = enabled__;

+ (float)UNPRESSED_ALPHA {
  return TBButton_UNPRESSED_ALPHA;
}

- (id<PlaynCoreLayer>)layerAddable {
  return [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) layer];
}

- (TBImageLayerTintable *)imageLayer {
  return imageLayer__;
}

- (id<PlaynCoreImage>)image {
  return [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) image];
}

- (float)x {
  return [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) tx];
}

- (float)y {
  return [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) ty];
}

- (float)width {
  return width__;
}

- (float)height {
  return height__;
}

- (BOOL)isCircle {
  return isCircle__;
}

- (BOOL)pressed {
  return pressed__;
}

- (int)tint {
  return [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) tint];
}

- (BOOL)enabled {
  return enabled__;
}

- (float)left {
  return [self x] - width__ / 2;
}

- (float)top {
  return [self y] - height__ / 2;
}

- (float)right {
  return [self x] + width__ / 2;
}

- (float)bottom {
  return [self y] + height__ / 2;
}

- (void)setLeftWithFloat:(float)left {
  [self setXWithFloat:left + width__ / 2];
}

- (void)setTopWithFloat:(float)top {
  [self setYWithFloat:top + height__ / 2];
}

- (void)setRightWithFloat:(float)right {
  [self setXWithFloat:right - width__ / 2];
}

- (void)setBottomWithFloat:(float)bottom {
  [self setYWithFloat:bottom - height__ / 2];
}

- (void)setXWithFloat:(float)x {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setTxWithFloat:x];
}

- (void)setYWithFloat:(float)y {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setTyWithFloat:y];
}

- (void)setPositionWithFloat:(float)x
                   withFloat:(float)y {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setTranslationWithFloat:x withFloat:y];
}

- (void)setSizeWithFloat:(float)width
               withFloat:(float)height {
  self.width_ = width;
  self.height_ = height;
  if ([((id<PlaynCoreImage>) [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) image]) isReady]) {
    [self adjustScale];
  }
}

- (void)setImageWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setImageWithPlaynCoreImage:image];
  [((id<PlaynCoreImage>) [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) image]) addCallbackWithPlaynCoreUtilCallback:[[[TBButton_$1 alloc] initWithTBButton:self] autorelease]];
}

- (void)setIsCircleWithBOOL:(BOOL)isCircle {
  self.isCircle_ = isCircle;
}

- (void)setOnPressListenerWithTBButton_OnPressedListener:(id<TBButton_OnPressedListener>)onPressedListener {
  self.onPressedListener = onPressedListener;
}

- (void)setOnReleasedListenerWithTBButton_OnReleasedListener:(id<TBButton_OnReleasedListener>)onReleasedListener {
  self.onReleaseListener = onReleasedListener;
}

- (void)setOnDragListenerWithTBButton_OnDragListener:(id<TBButton_OnDragListener>)onDragListener {
  self.onDragListener = onDragListener;
}

- (void)setTintWithInt:(int)tint {
  [self setTintWithInt:tint withFloat:TBButton_UNPRESSED_ALPHA];
}

- (void)setTintWithInt:(int)tint
             withFloat:(float)alphaUnpressed {
  [self setTintWithInt:[PlaynCoreColor withAlphaWithInt:tint withInt:(int) (255 * alphaUnpressed)] withInt:tint];
}

- (void)setTintWithInt:(int)tint
               withInt:(int)tintPressed {
  self.tint_ = tint;
  self.tintPressed = tintPressed;
  [self refreshTint];
}

- (void)setEnabledWithBOOL:(BOOL)enabled {
  self.enabled_ = enabled;
  [self refreshTint];
}

- (id)initWithNSString:(NSString *)imagePath
             withFloat:(float)width
             withFloat:(float)height
              withBOOL:(BOOL)isCircle {
  return [self initTBButtonWithPlaynCoreImage:[((id<PlaynCoreAssets>) [TBPlayNObject assets]) getImageWithNSString:imagePath] withFloat:width withFloat:height withBOOL:isCircle];
}

- (void)refreshTint {
  int tint = pressed__ ? tintPressed_ : self.tint_;
  if (!enabled__) tint = [TripleplayUtilColors blendWithInt:tint withInt:[PlaynCoreColor withAlphaWithInt:[TripleplayUtilColors BLACK] withInt:[PlaynCoreColor alphaWithInt:tint]] withFloat:0.5f];
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setTintWithInt:tint];
}

- (id)initTBButtonWithPlaynCoreImage:(id<PlaynCoreImage>)image
                           withFloat:(float)width
                           withFloat:(float)height
                            withBOOL:(BOOL)isCircle {
  if ((self = [super init])) {
    enabled__ = YES;
    self.width_ = width;
    self.height_ = height;
    self.isCircle_ = isCircle;
    JreOperatorRetainedAssign(&imageLayer__, self, [[[TBImageLayerTintable alloc] init] autorelease]);
    [self setImageWithPlaynCoreImage:image];
    [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) addListenerWithPlaynCorePointer_Listener:[[[TBButton_PointerListener alloc] initWithTBButton:self] autorelease]];
    [self setTintWithInt:[TripleplayUtilColors WHITE] withFloat:TBButton_UNPRESSED_ALPHA];
  }
  return self;
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image
                   withFloat:(float)width
                   withFloat:(float)height
                    withBOOL:(BOOL)isCircle {
  return [self initTBButtonWithPlaynCoreImage:image withFloat:width withFloat:height withBOOL:isCircle];
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image
                    withBOOL:(BOOL)isCircle {
  return [self initTBButtonWithPlaynCoreImage:image withFloat:[((id<PlaynCoreImage>) NIL_CHK(image)) width] withFloat:[((id<PlaynCoreImage>) NIL_CHK(image)) height] withBOOL:isCircle];
}

- (void)destroy {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) destroy];
}

- (BOOL)hitWithFloat:(float)x
           withFloat:(float)y {
  if (isCircle__) {
    return [self hitCircleWithFloat:x withFloat:y];
  }
  else {
    return [self hitRectangleWithFloat:x withFloat:y];
  }
}

- (BOOL)hitRectangleWithFloat:(float)x
                    withFloat:(float)y {
  return [JavaLangMath absWithFloat:x - [self x]] < width__ / 2 && [JavaLangMath absWithFloat:y - [self y]] < height__ / 2;
}

- (BOOL)hitCircleWithFloat:(float)x
                 withFloat:(float)y {
  return [TBPlayNObject distanceWithFloat:[self x] withFloat:[self y] withFloat:x withFloat:y] < width__ / 2;
}

- (void)adjustScale {
  [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) setScaleWithFloat:width__ / [((id<PlaynCoreImage>) [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) image]) width] withFloat:height__ / [((id<PlaynCoreImage>) [((TBImageLayerTintable *) NIL_CHK(imageLayer__)) image]) height]];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&onDragListener_, self, nil);
  JreOperatorRetainedAssign(&onReleaseListener_, self, nil);
  JreOperatorRetainedAssign(&onPressedListener_, self, nil);
  JreOperatorRetainedAssign(&imageLayer__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBButton *typedCopy = (TBButton *) copy;
  typedCopy.imageLayer_ = imageLayer__;
  typedCopy.onPressedListener = onPressedListener_;
  typedCopy.onReleaseListener = onReleaseListener_;
  typedCopy.onDragListener = onDragListener_;
  typedCopy.width_ = width__;
  typedCopy.height_ = height__;
  typedCopy.pressed_ = pressed__;
  typedCopy.isCircle_ = isCircle__;
  typedCopy.tint_ = tint__;
  typedCopy.tintPressed = tintPressed_;
  typedCopy.enabled_ = enabled__;
}

@end
@implementation TBButton_PointerListener

- (TBButton *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBButton *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!this$0_.enabled_ || ![self insideLocalWithPlaynCorePointer_Event:event]) return;
  this$0_.pressed_ = YES;
  [this$0_ refreshTint];
  if (this$0_.onPressedListener != nil) [this$0_.onPressedListener onPressWithPlaynCorePointer_Event:event];
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!this$0_.enabled_ || !this$0_.pressed_) return;
  this$0_.pressed_ = NO;
  [this$0_ refreshTint];
  if (this$0_.onReleaseListener != nil) [this$0_.onReleaseListener onReleaseWithPlaynCorePointer_Event:event withBOOL:[self insideLocalWithPlaynCorePointer_Event:event]];
}

- (BOOL)insideLocalWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float dw = [((id<PlaynCoreImage>) [this$0_ image]) width] / 2;
  float dh = [((id<PlaynCoreImage>) [this$0_ image]) height] / 2;
  if (this$0_.isCircle_) {
    return [TBPlayNObject distanceWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) localX] withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) localY] withFloat:dw withFloat:dh] <= dw;
  }
  else {
    return [JavaLangMath absWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) localX] - dw] <= dw && [JavaLangMath absWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) localY] - dh] <= dh;
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (!this$0_.enabled_) return;
  if (this$0_.onDragListener != nil) [this$0_.onDragListener onDragWithPlaynCorePointer_Event:event];
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (id)initWithTBButton:(TBButton *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBButton_PointerListener *typedCopy = (TBButton_PointerListener *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBButton_$1

- (TBButton *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBButton *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  [((TBImageLayerTintable *) NIL_CHK(this$0_.imageLayer_)) setOriginWithFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) width] / 2 withFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) height] / 2];
  [this$0_ adjustScale];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
  [((JavaLangThrowable *) NIL_CHK(cause)) printStackTrace];
}

- (id)initWithTBButton:(TBButton *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBButton_$1 *typedCopy = (TBButton_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
