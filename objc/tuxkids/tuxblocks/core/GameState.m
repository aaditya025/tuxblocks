//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\GameState.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSIntArray.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "tuxkids/tuxblocks/core/GameBackgroundSprite.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/defense/round/Reward.h"
#import "tuxkids/tuxblocks/core/defense/select/Problem.h"
#import "tuxkids/tuxblocks/core/defense/tower/Tower.h"
#import "tuxkids/tuxblocks/core/defense/tower/TowerType.h"
#import "tuxkids/tuxblocks/core/solve/expression/Equation.h"
#import "tuxkids/tuxblocks/core/solve/expression/EquationGenerator.h"

@implementation TBGameState

- (IOSIntArray *)towerCounts_ {
  return towerCounts__;
}
- (void)setTowerCounts_:(IOSIntArray *)towerCounts_ {
  JreOperatorRetainedAssign(&towerCounts__, self, towerCounts_);
}
@synthesize towerCounts_ = towerCounts__;
- (id<JavaUtilList>)problems_ {
  return problems__;
}
- (void)setProblems_:(id<JavaUtilList>)problems_ {
  JreOperatorRetainedAssign(&problems__, self, problems_);
}
@synthesize problems_ = problems__;
- (TBGameBackgroundSprite *)background_ {
  return background__;
}
- (void)setBackground_:(TBGameBackgroundSprite *)background_ {
  JreOperatorRetainedAssign(&background__, self, background_);
}
@synthesize background_ = background__;
- (id<TBGameState_InventoryChangedListener>)inventoryChangedListener {
  return inventoryChangedListener_;
}
- (void)setInventoryChangedListener:(id<TBGameState_InventoryChangedListener>)inventoryChangedListener {
  JreOperatorRetainedAssign(&inventoryChangedListener_, self, inventoryChangedListener);
}
@synthesize inventoryChangedListener = inventoryChangedListener_;
- (id<TBGameState_ProblemAddedListener>)problemAddedListener {
  return problemAddedListener_;
}
- (void)setProblemAddedListener:(id<TBGameState_ProblemAddedListener>)problemAddedListener {
  JreOperatorRetainedAssign(&problemAddedListener_, self, problemAddedListener);
}
@synthesize problemAddedListener = problemAddedListener_;
@synthesize maxSteps = maxSteps_;
@synthesize minSteps = minSteps_;

- (IOSIntArray *)towerCounts {
  return towerCounts__;
}

- (id<JavaUtilList>)problems {
  return problems__;
}

- (TBGameBackgroundSprite *)background {
  return background__;
}

- (int)themeColor {
  return [[self background] primaryColor];
}

- (void)newThemeColor OBJC_METHOD_FAMILY_NONE {
  [((TBGameBackgroundSprite *) NIL_CHK(background__)) newThemeColor];
}

- (void)setInventoryChangedListenerWithTBGameState_InventoryChangedListener:(id<TBGameState_InventoryChangedListener>)inventoryChangedListener {
  self.inventoryChangedListener = inventoryChangedListener;
}

- (void)setProblemAddedListenerWithTBGameState_ProblemAddedListener:(id<TBGameState_ProblemAddedListener>)problemAddedListener {
  self.problemAddedListener = problemAddedListener;
}

- (id)init {
  if ((self = [super init])) {
    maxSteps_ = 1;
    minSteps_ = 2;
    JreOperatorRetainedAssign(&background__, self, [[[TBGameBackgroundSprite alloc] init] autorelease]);
    JreOperatorRetainedAssign(&towerCounts__, self, [[[IOSIntArray alloc] initWithLength:[TBTower towerCount]] autorelease]);
    JreOperatorRetainedAssign(&problems__, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    [self addItemWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2];
    [self addProblemWithRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
    [self addProblemWithRewardWithTBReward:[[[TBReward alloc] initWithTBTowerTypeEnum:[TBTowerTypeEnum PeaShooter] withInt:2] autorelease]];
  }
  return self;
}

- (void)solveProblemWithTBProblem:(TBProblem *)problem {
  [((id<JavaUtilList>) NIL_CHK(problems__)) removeWithId:problem];
  [self addRewardWithTBReward:[((TBProblem *) NIL_CHK(problem)) reward]];
}

- (void)addRewardWithTBReward:(TBReward *)reward {
  if (((TBReward *) NIL_CHK(reward)).tower != nil) {
    [[self towerCounts] replaceIntAtIndex:[((TBReward *) NIL_CHK(reward)).tower index] withInt:[[self towerCounts] intAtIndex:[((TBReward *) NIL_CHK(reward)).tower index]] + ((TBReward *) NIL_CHK(reward)).count];
    [self onInventoryChangedWithInt:[((TBReward *) NIL_CHK(reward)).tower index]];
  }
}

- (void)addProblemWithRewardWithTBReward:(TBReward *)reward {
  TBEquation *eq = [TBEquationGenerator generateWithInt:(int) ([JavaLangMath random] * (maxSteps_ - minSteps_)) + minSteps_];
  TBProblem *problem = [[[TBProblem alloc] initWithTBEquation:eq withTBReward:reward] autorelease];
  [((id<JavaUtilList>) NIL_CHK(problems__)) addWithId:problem];
  if (problemAddedListener_ != nil) [problemAddedListener_ onProblemAddedWithTBProblem:problem];
}

- (void)addItemWithTBTowerTypeEnum:(TBTowerTypeEnum *)type
                           withInt:(int)count {
  int index = [((TBTowerTypeEnum *) NIL_CHK(type)) index];
  [((IOSIntArray *) NIL_CHK(towerCounts__)) replaceIntAtIndex:index withInt:[towerCounts__ intAtIndex:index] + count];
  [self onInventoryChangedWithInt:index];
}

- (void)onInventoryChangedWithInt:(int)index {
  if (inventoryChangedListener_ != nil) {
    [inventoryChangedListener_ onInventoryChangedWithInt:index withInt:[((IOSIntArray *) NIL_CHK(towerCounts__)) intAtIndex:index]];
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&problemAddedListener_, self, nil);
  JreOperatorRetainedAssign(&inventoryChangedListener_, self, nil);
  JreOperatorRetainedAssign(&background__, self, nil);
  JreOperatorRetainedAssign(&problems__, self, nil);
  JreOperatorRetainedAssign(&towerCounts__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBGameState *typedCopy = (TBGameState *) copy;
  typedCopy.towerCounts_ = towerCounts__;
  typedCopy.problems_ = problems__;
  typedCopy.background_ = background__;
  typedCopy.inventoryChangedListener = inventoryChangedListener_;
  typedCopy.problemAddedListener = problemAddedListener_;
  typedCopy.maxSteps = maxSteps_;
  typedCopy.minSteps = minSteps_;
}

@end
