//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\utils\MultiList.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "tuxkids/tuxblocks/core/utils/MultiList.h"

@implementation TBMultiList

- (id<JavaUtilList>)lists {
  return lists_;
}
- (void)setLists:(id<JavaUtilList>)lists {
  JreOperatorRetainedAssign(&lists_, self, lists);
}
@synthesize lists = lists_;

- (id)initWithJavaUtilListArray:(IOSObjectArray *)lists {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&lists_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    {
      IOSObjectArray *a__ = lists;
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id<JavaUtilList> list = ((id<JavaUtilList>) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [((id<JavaUtilList>) NIL_CHK(self.lists)) addWithId:list];
      }
    }
  }
  return self;
}

- (int)size {
  int size = 0;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(lists_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      size += [((id<JavaUtilList>) NIL_CHK(list)) size];
    }
  }
  return size;
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (BOOL)containsWithId:(id)o {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(lists_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((id<JavaUtilList>) NIL_CHK(list)) containsWithId:o]) return YES;
    }
  }
  return NO;
}

- (BOOL)addWithJavaUtilList:(id<JavaUtilList>)e {
  return [((id<JavaUtilList>) NIL_CHK(lists_)) addWithId:e];
}

- (BOOL)removeWithJavaUtilList:(id<JavaUtilList>)o {
  return [((id<JavaUtilList>) NIL_CHK(lists_)) removeWithId:o];
}

- (BOOL)removeWithId:(id)o {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(lists_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((id<JavaUtilList>) NIL_CHK(list)) removeWithId:o]) return YES;
    }
  }
  return NO;
}

- (void)clear {
  [((id<JavaUtilList>) NIL_CHK(lists_)) clear];
}

- (id)getWithInt:(int)index {
  for (int i = 0; i < [((id<JavaUtilList>) NIL_CHK(lists_)) size]; i++) {
    id<JavaUtilList> list = ((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(lists_)) getWithInt:i]);
    if (index < [((id<JavaUtilList>) NIL_CHK(list)) size]) return [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:index];
    index -= [((id<JavaUtilList>) NIL_CHK(list)) size];
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&lists_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBMultiList *typedCopy = (TBMultiList *) copy;
  typedCopy.lists = lists_;
}

@end
