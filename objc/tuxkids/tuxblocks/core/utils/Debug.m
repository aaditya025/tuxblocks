//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\utils\Debug.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Exception.h"
#import "java/lang/StackTraceElement.h"
#import "playn/core/Log.h"
#import "playn/core/PlayN.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/utils/Debug.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TBDebug

static BOOL TBDebug_DEBUG__;
static BOOL TBDebug_SHOW_TRACE_;

+ (BOOL)getDEBUG {
  return TBDebug_DEBUG__;
}

+ (BOOL *)getDEBUGRef {
  return &TBDebug_DEBUG__;
}

+ (BOOL)SHOW_TRACE {
  return TBDebug_SHOW_TRACE_;
}

+ (BOOL *)SHOW_TRACERef {
  return &TBDebug_SHOW_TRACE_;
}

+ (void)writeWithLongInt:(long long int)x {
  [TBDebug writeWithNSString:[NSString stringWithFormat:@"%qi", x]];
}

+ (void)writeWithInt:(int)x {
  [TBDebug writeWithNSString:[NSString stringWithFormat:@"%d", x]];
}

+ (void)writeWithId:(id)o {
  [TBDebug writeWithNSString:o == nil ? @"null" : [NIL_CHK(o) description]];
}

+ (void)writeWithFloat:(float)x {
  [TBDebug writeWithNSString:[NSString stringWithFormat:@"%f", x]];
}

+ (void)writeWithNSString:(NSString *)format
        withNSObjectArray:(IOSObjectArray *)args {
  @try {
    [TBDebug writeWithNSString:[TBFormatter formatWithNSString:format withNSObjectArray:args]];
  }
  @catch (JavaLangException *e) {
    [TBDebug writeWithJavaLangException:e];
  }
}

+ (void)writeWithJavaLangException:(JavaLangException *)e {
  if (TBDebug_DEBUG__) [((JavaLangException *) NIL_CHK(e)) printStackTrace];
}

+ (void)writeWithNSString:(NSString *)text {
  if (!TBDebug_DEBUG__) return;
  if (TBDebug_SHOW_TRACE_) {
    @try {
      @throw [[[JavaLangException alloc] initWithNSString:@"Who called me?"] autorelease];
    }
    @catch (JavaLangException *e) {
      int i = 1;
      while ([[((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getClassName] isEqual:[[IOSClass classWithClass:[TBDebug class]] getName]] && [[((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getMethodName] isEqual:@"write"]) i++;
      while ([[((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getClassName] isEqual:[[IOSClass classWithClass:[TBPlayNObject class]] getName]] && [[((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getMethodName] isEqual:@"debug"]) i++;
      NSString *cName = [((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getClassName];
      int index = [NIL_CHK(cName) lastIndexOfString:@"."];
      if (index > 0 && index < [NIL_CHK(cName) length] - 1) cName = [NIL_CHK(cName) substring:index + 1];
      text = [NSString stringWithFormat:@"%@.%@(): %@", cName, [((JavaLangStackTraceElement *) [[((JavaLangException *) NIL_CHK(e)) getStackTrace] objectAtIndex:i]) getMethodName], text];
    }
  }
  [((id<PlaynCoreLog>) [PlaynCorePlayN log]) debugWithNSString:text];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [TBDebug class]) {
    TBDebug_DEBUG__ = YES;
    TBDebug_SHOW_TRACE_ = NO;
  }
}

- (void)dealloc {
  [super dealloc];
}

@end
