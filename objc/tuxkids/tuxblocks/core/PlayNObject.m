//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\PlayNObject.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Double.h"
#import "java/lang/Throwable.h"
#import "playn/core/Assets.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Keyboard.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "pythagoras/f/FloatMath.h"
#import "pythagoras/f/IVector.h"
#import "pythagoras/f/Vector.h"
#import "pythagoras/i/IPoint.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/utils/Debug.h"
#import "tuxkids/tuxblocks/core/utils/HashCode.h"
#import "tuxkids/tuxblocks/core/utils/Positioned.h"

@implementation TBPlayNObject

- (TBHashCode *)hashCode_ {
  return hashCode__;
}
- (void)setHashCode_:(TBHashCode *)hashCode_ {
  JreOperatorRetainedAssign(&hashCode__, self, hashCode_);
}
@synthesize hashCode_ = hashCode__;

+ (id<PlaynCoreGraphics>)graphics {
  return [PlaynCorePlayN graphics];
}

+ (id<PlaynCorePointer>)pointer {
  return [PlaynCorePlayN pointer];
}

+ (id<PlaynCoreKeyboard>)keyboard {
  return [PlaynCorePlayN keyboard];
}

+ (id<PlaynCoreAssets>)assets {
  return [PlaynCorePlayN assets];
}

+ (long long int)currentTime {
  return (long long int) [PlaynCorePlayN currentTime];
}

+ (int)gWidth {
  return [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) width];
}

+ (int)gHidth {
  return [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) height];
}

+ (id<PlaynCoreGroupLayer>)gRootLayer {
  return [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) rootLayer];
}

+ (void)debugWithNSString:(NSString *)msg {
  [TBDebug writeWithNSString:msg];
}

+ (void)debugWithNSString:(NSString *)msg
        withNSObjectArray:(IOSObjectArray *)args {
  [TBDebug writeWithNSString:msg withNSObjectArray:args];
}

+ (void)debugWithInt:(int)msg {
  [TBDebug writeWithInt:msg];
}

+ (void)debugWithFloat:(float)msg {
  [TBDebug writeWithFloat:msg];
}

+ (void)debugWithDouble:(double)msg {
  [TBDebug writeWithId:[JavaLangDouble valueOfWithDouble:msg]];
}

+ (void)debugWithLongInt:(long long int)msg {
  [TBDebug writeWithLongInt:msg];
}

+ (void)debugWithId:(id)o {
  [TBDebug writeWithId:o];
}

+ (float)lerpWithFloat:(float)x0
             withFloat:(float)x1
             withFloat:(float)perc {
  return x0 * (1 - perc) + x1 * perc;
}

+ (void)lerpWithPythagorasFVector:(PythagorasFVector *)v0
                        withFloat:(float)x1
                        withFloat:(float)y1
                        withFloat:(float)perc {
  ((PythagorasFVector *) NIL_CHK(v0)).x_ = [TBPlayNObject lerpWithFloat:((PythagorasFVector *) NIL_CHK(v0)).x_ withFloat:x1 withFloat:perc];
  ((PythagorasFVector *) NIL_CHK(v0)).y_ = [TBPlayNObject lerpWithFloat:((PythagorasFVector *) NIL_CHK(v0)).y_ withFloat:y1 withFloat:perc];
}

+ (float)lerpTimeWithFloat:(float)x0
                 withFloat:(float)x1
                 withFloat:(float)base
                 withFloat:(float)dt {
  float perc = 1 - [PythagorasFFloatMath powWithFloat:base withFloat:dt];
  return x0 * (1 - perc) + x1 * perc;
}

+ (void)lerpTimeWithPythagorasFVector:(PythagorasFVector *)v0
                              withInt:(int)x1
                              withInt:(int)y1
                            withFloat:(float)base
                            withFloat:(float)dt {
  ((PythagorasFVector *) NIL_CHK(v0)).x_ = [TBPlayNObject lerpTimeWithFloat:((PythagorasFVector *) NIL_CHK(v0)).x_ withFloat:x1 withFloat:base withFloat:dt];
  ((PythagorasFVector *) NIL_CHK(v0)).y_ = [TBPlayNObject lerpTimeWithFloat:((PythagorasFVector *) NIL_CHK(v0)).y_ withFloat:y1 withFloat:base withFloat:dt];
}

+ (float)distanceWithFloat:(float)x1
                 withFloat:(float)y1
                 withFloat:(float)x2
                 withFloat:(float)y2 {
  float dx = x2 - x1;
  float dy = y2 - y1;
  return [PythagorasFFloatMath sqrtWithFloat:dx * dx + dy * dy];
}

+ (float)distanceWithId:(id)o1
                 withId:(id)o2 {
  return [TBPlayNObject distanceWithFloat:[TBPlayNObject getXWithId:o1] withFloat:[TBPlayNObject getYWithId:o1] withFloat:[TBPlayNObject getXWithId:o2] withFloat:[TBPlayNObject getYWithId:o2]];
}

+ (float)distanceWithId:(id)o1
              withFloat:(float)x2
              withFloat:(float)y2 {
  return [TBPlayNObject distanceWithFloat:[TBPlayNObject getXWithId:o1] withFloat:[TBPlayNObject getYWithId:o1] withFloat:x2 withFloat:y2];
}

+ (float)getXWithId:(id)o {
  if ([o conformsToProtocol: @protocol(PythagorasIIPoint)]) {
    return [((id<PythagorasIIPoint>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PythagorasFIVector)]) {
    return [((id<PythagorasFIVector>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCorePointer_Event)]) {
    return [((id<PlaynCorePointer_Event>) o) x];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCoreLayer)]) {
    return [((id<PlaynCoreLayer>) o) tx];
  }
  else if ([o conformsToProtocol: @protocol(TBPositioned)]) {
    return [((id<TBPositioned>) o) x];
  }
  return 0;
}

+ (float)getYWithId:(id)o {
  if ([o conformsToProtocol: @protocol(PythagorasIIPoint)]) {
    return [((id<PythagorasIIPoint>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PythagorasFIVector)]) {
    return [((id<PythagorasFIVector>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCorePointer_Event)]) {
    return [((id<PlaynCorePointer_Event>) o) y];
  }
  else if ([o conformsToProtocol: @protocol(PlaynCoreLayer)]) {
    return [((id<PlaynCoreLayer>) o) ty];
  }
  else if ([o conformsToProtocol: @protocol(TBPositioned)]) {
    return [((id<TBPositioned>) o) y];
  }
  return 0;
}

+ (void)centerImageLayerWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)layer {
  if ([((id<PlaynCoreImageLayer>) NIL_CHK(layer)) image] != nil) {
    [((id<PlaynCoreImage>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) image]) addCallbackWithPlaynCoreUtilCallback:[[[TBPlayNObject_$1 alloc] initWithPlaynCoreImageLayer:layer] autorelease]];
  }
}

+ (void)centerImageLayerWithTBImageLayerTintable:(TBImageLayerTintable *)layer {
  if ([((TBImageLayerTintable *) NIL_CHK(layer)) image] != nil) {
    [((id<PlaynCoreImage>) [((TBImageLayerTintable *) NIL_CHK(layer)) image]) addCallbackWithPlaynCoreUtilCallback:[[[TBPlayNObject_$2 alloc] initWithTBImageLayerTintable:layer] autorelease]];
  }
}

+ (float)getGlobalTxWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  id<PlaynCoreLayer> parent = layer;
  float tx = 0;
  while (parent != nil) {
    tx += [((id<PlaynCoreLayer>) NIL_CHK(parent)) tx];
    parent = [((id<PlaynCoreLayer>) NIL_CHK(parent)) parent];
  }
  return tx;
}

+ (float)getGlobalTyWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer {
  id<PlaynCoreLayer> parent = layer;
  float ty = 0;
  while (parent != nil) {
    ty += [((id<PlaynCoreLayer>) NIL_CHK(parent)) ty];
    parent = [((id<PlaynCoreLayer>) NIL_CHK(parent)) parent];
  }
  return ty;
}

- (id)init {
  if ((self = [super init])) {
    if ([self conformsToProtocol: @protocol(TBHashCode_Hashable)]) JreOperatorRetainedAssign(&hashCode__, self, [[[TBHashCode alloc] initWithTBHashCode_Hashable:(id<TBHashCode_Hashable>) self] autorelease]);
  }
  return self;
}

- (NSUInteger)hash {
  if (hashCode__ == nil) return (int) [super hash];
  return [((TBHashCode *) NIL_CHK(hashCode__)) hash];
}

- (BOOL)isEqual:(id)obj {
  if (hashCode__ == nil) return (BOOL) [super isEqual:obj];
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [NIL_CHK(obj) getClass]) return NO;
  return [((TBHashCode *) NIL_CHK(hashCode__)) equalsWithTBHashCode:((TBPlayNObject *) obj).hashCode_];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&hashCode__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBPlayNObject *typedCopy = (TBPlayNObject *) copy;
  typedCopy.hashCode_ = hashCode__;
}

@end
@implementation TBPlayNObject_$1

- (id<PlaynCoreImageLayer>)val$layer {
  return val$layer_;
}
- (void)setVal$layer:(id<PlaynCoreImageLayer>)val$layer {
  JreOperatorRetainedAssign(&val$layer_, self, val$layer);
}
@synthesize val$layer = val$layer_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(val$layer_)) setOriginWithFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) width] / 2 withFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) height] / 2];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithPlaynCoreImageLayer:(id<PlaynCoreImageLayer>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$layer_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$layer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBPlayNObject_$1 *typedCopy = (TBPlayNObject_$1 *) copy;
  typedCopy.val$layer = val$layer_;
}

@end
@implementation TBPlayNObject_$2

- (TBImageLayerTintable *)val$layer {
  return val$layer_;
}
- (void)setVal$layer:(TBImageLayerTintable *)val$layer {
  JreOperatorRetainedAssign(&val$layer_, self, val$layer);
}
@synthesize val$layer = val$layer_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  [((TBImageLayerTintable *) NIL_CHK(val$layer_)) setOriginWithFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) width] / 2 withFloat:[((id<PlaynCoreImage>) NIL_CHK(result)) height] / 2];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithTBImageLayerTintable:(TBImageLayerTintable *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$layer_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$layer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBPlayNObject_$2 *typedCopy = (TBPlayNObject_$2 *) copy;
  typedCopy.val$layer = val$layer_;
}

@end
