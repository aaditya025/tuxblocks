//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\EquationSprite.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "java/lang/Math.h"
#import "playn/core/Canvas.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Color.h"
#import "playn/core/Font.h"
#import "playn/core/Graphics.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/solve/EquationSprite.h"
#import "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#import "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"

@implementation TBEquationSprite

static PlaynCoreTextFormat * TBEquationSprite_textFormat_;

- (id<PlaynCoreImageLayer>)layer_ {
  return layer__;
}
- (void)setLayer_:(id<PlaynCoreImageLayer>)layer_ {
  JreOperatorRetainedAssign(&layer__, self, layer_);
}
@synthesize layer_ = layer__;
- (TBBaseBlock *)rightHandSide {
  return rightHandSide_;
}
- (void)setRightHandSide:(TBBaseBlock *)rightHandSide {
  JreOperatorRetainedAssign(&rightHandSide_, self, rightHandSide);
}
@synthesize rightHandSide = rightHandSide_;
- (TBBaseBlock *)leftHandSide {
  return leftHandSide_;
}
- (void)setLeftHandSide:(TBBaseBlock *)leftHandSide {
  JreOperatorRetainedAssign(&leftHandSide_, self, leftHandSide);
}
@synthesize leftHandSide = leftHandSide_;

+ (PlaynCoreTextFormat *)textFormat {
  return TBEquationSprite_textFormat_;
}

+ (void)setTextFormat:(PlaynCoreTextFormat *)textFormat {
  JreOperatorRetainedAssign(&TBEquationSprite_textFormat_, self, textFormat);
}

- (id<PlaynCoreImageLayer>)layer {
  return layer__;
}

- (id)initWithTBBaseBlock:(TBBaseBlock *)leftHandSide
          withTBBaseBlock:(TBBaseBlock *)rightHandSide {
  if ((self = [super init])) {
    self.leftHandSide = leftHandSide;
    self.rightHandSide = rightHandSide;
    if (TBEquationSprite_textFormat_ == nil) {
      id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createFontWithNSString:[TBConstant FONT_NAME] withPlaynCoreFont_StyleEnum:[PlaynCoreFont_StyleEnum PLAIN] withFloat:20];
      JreOperatorRetainedAssign(&TBEquationSprite_textFormat_, self, [((PlaynCoreTextFormat *) [[[PlaynCoreTextFormat alloc] init] autorelease]) withFontWithPlaynCoreFont:font]);
    }
    [self refreshWithTBModifierBlock:nil withTBBaseBlock:nil withBOOL:NO];
  }
  return self;
}

- (void)refreshWithTBModifierBlock:(TBModifierBlock *)dragging
                   withTBBaseBlock:(TBBaseBlock *)highlight
                          withBOOL:(BOOL)flipModifier {
  if (layer__ != nil) [layer__ destroy];
  TBExpression *leftExpression = [((TBBaseBlock *) NIL_CHK(leftHandSide_)) topLevelExpression];
  TBExpression *rightExpression = [((TBBaseBlock *) NIL_CHK(rightHandSide_)) topLevelExpression];
  TBBaseBlock *toModify = nil;
  if (dragging != nil) {
    toModify = highlight;
    TBModificationOperation *modOp = flipModifier ? [dragging getModifier] : [dragging getOriginalModifier];
    if (leftHandSide_ == toModify) {
      [((TBModificationOperation *) NIL_CHK(modOp)) setOperandWithTBExpression:leftExpression];
      leftExpression = modOp;
    }
    else {
      [((TBModificationOperation *) NIL_CHK(modOp)) setOperandWithTBExpression:rightExpression];
      rightExpression = modOp;
    }
  }
  TBExpressionWriter *leftEW = [((TBExpression *) NIL_CHK(leftExpression)) getExpressionWriterWithPlaynCoreTextFormat:TBEquationSprite_textFormat_];
  TBExpressionWriter *rightEW = [((TBExpression *) NIL_CHK(rightExpression)) getExpressionWriterWithPlaynCoreTextFormat:TBEquationSprite_textFormat_];
  id<PlaynCoreTextLayout> eqLayout = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:@"=" withPlaynCoreTextFormat:TBEquationSprite_textFormat_];
  float width = [((TBExpressionWriter *) NIL_CHK(leftEW)) width] + [((id<PlaynCoreTextLayout>) NIL_CHK(eqLayout)) width] + [((TBExpressionWriter *) NIL_CHK(rightEW)) width] + TBExpressionWriter_SPACING * 2;
  float height = [JavaLangMath maxWithFloat:[((TBExpressionWriter *) NIL_CHK(leftEW)) height] withFloat:[((TBExpressionWriter *) NIL_CHK(rightEW)) height]];
  id<PlaynCoreCanvasImage> canvasImage = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageWithFloat:width withFloat:height];
  id<PlaynCoreCanvas> canvas = [((id<PlaynCoreCanvasImage>) NIL_CHK(canvasImage)) canvas];
  int colorNormal = [PlaynCoreColor rgbWithInt:0 withInt:0 withInt:0];
  int colorHighlight = [PlaynCoreColor rgbWithInt:255 withInt:0 withInt:0];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  if (toModify == leftHandSide_) {
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:colorHighlight];
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:colorHighlight];
  }
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) translateWithFloat:0 withFloat:(height - [((TBExpressionWriter *) NIL_CHK(leftEW)) height]) / 2];
  [((TBExpressionWriter *) NIL_CHK(leftEW)) drawExpressionWithPlaynCoreCanvas:canvas withInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) translateWithFloat:[((TBExpressionWriter *) NIL_CHK(leftEW)) width] + TBExpressionWriter_SPACING withFloat:(height - [((id<PlaynCoreTextLayout>) NIL_CHK(eqLayout)) height]) / 2];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:eqLayout withFloat:0 withFloat:0];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  if (toModify == rightHandSide_) {
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:colorHighlight];
    (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:colorHighlight];
  }
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) translateWithFloat:[((TBExpressionWriter *) NIL_CHK(leftEW)) width] + TBExpressionWriter_SPACING * 2 + [((id<PlaynCoreTextLayout>) NIL_CHK(eqLayout)) width] withFloat:(height - [((TBExpressionWriter *) NIL_CHK(rightEW)) height]) / 2];
  [((TBExpressionWriter *) NIL_CHK(rightEW)) drawExpressionWithPlaynCoreCanvas:canvas withInt:colorNormal];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  JreOperatorRetainedAssign(&layer__, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createImageLayerWithPlaynCoreImage:canvasImage]);
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setOriginWithFloat:[((TBExpressionWriter *) NIL_CHK(leftEW)) width] + TBExpressionWriter_SPACING + [((id<PlaynCoreTextLayout>) NIL_CHK(eqLayout)) width] / 2 withFloat:0];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&leftHandSide_, self, nil);
  JreOperatorRetainedAssign(&rightHandSide_, self, nil);
  JreOperatorRetainedAssign(&layer__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBEquationSprite *typedCopy = (TBEquationSprite *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.rightHandSide = rightHandSide_;
  typedCopy.leftHandSide = leftHandSide_;
}

@end
