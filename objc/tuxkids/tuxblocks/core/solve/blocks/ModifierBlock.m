//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\blocks\ModifierBlock.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#import "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TBModifierBlock

- (TBModificationOperation *)modifier {
  return modifier_;
}
- (void)setModifier:(TBModificationOperation *)modifier {
  JreOperatorRetainedAssign(&modifier_, self, modifier);
}
@synthesize modifier = modifier_;
- (TBModificationOperation *)inverseModifier {
  return inverseModifier_;
}
- (void)setInverseModifier:(TBModificationOperation *)inverseModifier {
  JreOperatorRetainedAssign(&inverseModifier_, self, inverseModifier);
}
@synthesize inverseModifier = inverseModifier_;
@synthesize isInverted_ = isInverted__;
- (id<PlaynCoreImageLayer>)inverseSprite {
  return inverseSprite_;
}
- (void)setInverseSprite:(id<PlaynCoreImageLayer>)inverseSprite {
  JreOperatorRetainedAssign(&inverseSprite_, self, inverseSprite);
}
@synthesize inverseSprite = inverseSprite_;

- (TBModificationOperation *)getModifier {
  return isInverted__ ? inverseModifier_ : modifier_;
}

- (TBModificationOperation *)getOriginalModifier {
  return modifier_;
}

- (id<PlaynCoreImageLayer>)layer {
  return isInverted__ ? inverseSprite_ : layer__;
}

- (BOOL)isInverted {
  return isInverted__;
}

- (void)setInvertedWithBOOL:(BOOL)inverted {
  if (isInverted__ != inverted) {
    [self invert];
  }
}

- (id)initWithTBModificationOperation:(TBModificationOperation *)op
                              withInt:(int)width
                              withInt:(int)height {
  if ((self = [super init])) {
    self.modifier = op;
    JreOperatorRetainedAssign(&inverseModifier_, self, [((TBModificationOperation *) NIL_CHK(op)) getInverse]);
    JreOperatorRetainedAssign(&layer__, self, [self generateSpriteWithInt:width withInt:height withNSString:[TBFormatter formatWithNSString:@"%s%d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, [((TBModificationOperation *) NIL_CHK(op)) getSymbol], [JavaLangInteger valueOfWithInt:[((TBModificationOperation *) NIL_CHK(op)) getValue]] ]] withInt:[((TBModificationOperation *) NIL_CHK(op)) getColor]]);
    JreOperatorRetainedAssign(&inverseSprite_, self, [self generateSpriteWithInt:width withInt:height withNSString:[TBFormatter formatWithNSString:@"%s%d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, [((TBModificationOperation *) NIL_CHK(inverseModifier_)) getSymbol], [JavaLangInteger valueOfWithInt:[((TBModificationOperation *) NIL_CHK(inverseModifier_)) getValue]] ]] withInt:[((TBModificationOperation *) NIL_CHK(inverseModifier_)) getColor]]);
  }
  return self;
}

- (void)invert {
  isInverted__ = !isInverted__;
  if (isInverted__) {
    [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) parent]) addWithPlaynCoreLayer:inverseSprite_];
    [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) parent]) removeWithPlaynCoreLayer:layer__];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(inverseSprite_)) setTranslationWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) tx] withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) ty]];
  }
  else {
    [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreImageLayer>) NIL_CHK(inverseSprite_)) parent]) addWithPlaynCoreLayer:layer__];
    [((id<PlaynCoreGroupLayer>) [((id<PlaynCoreImageLayer>) NIL_CHK(inverseSprite_)) parent]) removeWithPlaynCoreLayer:inverseSprite_];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) setTranslationWithFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(inverseSprite_)) tx] withFloat:[((id<PlaynCoreImageLayer>) NIL_CHK(inverseSprite_)) ty]];
  }
}

- (NSString *)description {
  return [TBFormatter formatWithNSString:@"%s%d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, [((TBModificationOperation *) NIL_CHK(modifier_)) getSymbol], [JavaLangInteger valueOfWithInt:[((TBModificationOperation *) NIL_CHK(modifier_)) getValue]] ]];
}

- (int)getColor {
  return [((TBModificationOperation *) NIL_CHK(modifier_)) getColor];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&inverseSprite_, self, nil);
  JreOperatorRetainedAssign(&inverseModifier_, self, nil);
  JreOperatorRetainedAssign(&modifier_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBModifierBlock *typedCopy = (TBModifierBlock *) copy;
  typedCopy.modifier = modifier_;
  typedCopy.inverseModifier = inverseModifier_;
  typedCopy.isInverted_ = isInverted__;
  typedCopy.inverseSprite = inverseSprite_;
}

@end
