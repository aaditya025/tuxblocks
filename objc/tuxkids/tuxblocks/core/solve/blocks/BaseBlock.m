//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\blocks\BaseBlock.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "playn/core/CanvasImage.h"
#import "playn/core/Connection.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "pythagoras/f/Point.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#import "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#import "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#import "tuxkids/tuxblocks/core/solve/blocks/NumberBlock.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#import "tuxkids/tuxblocks/core/solve/expression/NonevaluatableException.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TBBaseBlock

- (id<PlaynCoreGroupLayer>)groupLayer {
  return groupLayer_;
}
- (void)setGroupLayer:(id<PlaynCoreGroupLayer>)groupLayer {
  JreOperatorRetainedAssign(&groupLayer_, self, groupLayer);
}
@synthesize groupLayer = groupLayer_;
- (id<JavaUtilList>)modifiers {
  return modifiers_;
}
- (void)setModifiers:(id<JavaUtilList>)modifiers {
  JreOperatorRetainedAssign(&modifiers_, self, modifiers);
}
@synthesize modifiers = modifiers_;
- (TBExpression *)baseExpression {
  return baseExpression_;
}
- (void)setBaseExpression:(TBExpression *)baseExpression {
  JreOperatorRetainedAssign(&baseExpression_, self, baseExpression);
}
@synthesize baseExpression = baseExpression_;
- (TBModifierBlock *)previewBlock {
  return previewBlock_;
}
- (void)setPreviewBlock:(TBModifierBlock *)previewBlock {
  JreOperatorRetainedAssign(&previewBlock_, self, previewBlock);
}
@synthesize previewBlock = previewBlock_;
- (id<PlaynCoreImageLayer>)simplifyCircle {
  return simplifyCircle_;
}
- (void)setSimplifyCircle:(id<PlaynCoreImageLayer>)simplifyCircle {
  JreOperatorRetainedAssign(&simplifyCircle_, self, simplifyCircle);
}
@synthesize simplifyCircle = simplifyCircle_;
- (id<TBBaseBlock_OnSimplifyListener>)simplifyListener {
  return simplifyListener_;
}
- (void)setSimplifyListener:(id<TBBaseBlock_OnSimplifyListener>)simplifyListener {
  JreOperatorRetainedAssign(&simplifyListener_, self, simplifyListener);
}
@synthesize simplifyListener = simplifyListener_;
- (PythagorasFPoint *)nextBlockPos {
  return nextBlockPos_;
}
- (void)setNextBlockPos:(PythagorasFPoint *)nextBlockPos {
  JreOperatorRetainedAssign(&nextBlockPos_, self, nextBlockPos);
}
@synthesize nextBlockPos = nextBlockPos_;

- (BOOL)isShowingPreview {
  return previewBlock_ != nil;
}

- (void)setSimplifyListenerWithTBBaseBlock_OnSimplifyListener:(id<TBBaseBlock_OnSimplifyListener>)simplifyListener {
  self.simplifyListener = simplifyListener;
}

- (TBModifierBlock *)lastModifier {
  if ([((id<JavaUtilList>) NIL_CHK(modifiers_)) isEmpty]) return nil;
  return ((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(modifiers_)) getWithInt:[((id<JavaUtilList>) NIL_CHK(modifiers_)) size] - 1]);
}

- (TBExpression *)topLevelExpression {
  if ([((id<JavaUtilList>) NIL_CHK(modifiers_)) isEmpty]) return baseExpression_;
  return [[self lastModifier] getModifier];
}

- (BOOL)hasModifier {
  return ![((id<JavaUtilList>) NIL_CHK(modifiers_)) isEmpty];
}

- (float)groupWidth {
  TBBlock *lastModifier = [self lastModifier];
  if (lastModifier == nil) return [self width];
  return [((TBBlock *) NIL_CHK(lastModifier)) width] + [((id<PlaynCoreImageLayer>) NIL_CHK(lastModifier.layer_)) tx];
}

- (float)groupHeight {
  TBBlock *lastModifier = [self lastModifier];
  if (lastModifier == nil) return [self height];
  return -[((id<PlaynCoreImageLayer>) NIL_CHK(lastModifier.layer_)) ty];
}

- (id<PlaynCoreGroupLayer>)layer {
  return groupLayer_;
}

- (id)initWithTBExpression:(TBExpression *)baseExpression {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&modifiers_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&nextBlockPos_, self, [[[PythagorasFPoint alloc] init] autorelease]);
    self.baseExpression = baseExpression;
    JreOperatorRetainedAssign(&groupLayer_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createGroupLayer]);
    int rad = TBBlock_MOD_SIZE / 4, padding = TBBlock_MOD_SIZE / 4;
    id<PlaynCoreCanvasImage> simplifyImage = [TBCanvasUtils createCircleWithFloat:rad withInt:[self getColor] withFloat:1 withInt:[TripleplayUtilColors DARK_GRAY]];
    JreOperatorRetainedAssign(&simplifyCircle_, self, [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) createImageLayerWithPlaynCoreImage:simplifyImage]);
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setOriginWithFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(simplifyImage)) width] / 2 withFloat:[((id<PlaynCoreCanvasImage>) NIL_CHK(simplifyImage)) height] / 2];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setDepthWithFloat:5];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setTintWithInt:[self getColor]];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setAlphaWithFloat:0.8f];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) addListenerWithPlaynCorePointer_Listener:[[[TBBaseBlock_SimplifyListener alloc] initWithTBBaseBlock:self] autorelease]];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setHitTesterWithPlaynCoreLayer_HitTester:[[[TBBaseBlock_$1 alloc] init] autorelease]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:simplifyCircle_];
    [self updateSimplify];
  }
  return self;
}

- (BOOL)canSimplify {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)destroy {
  [super destroy];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) destroy];
}

- (void)updateSimplify {
  if (![self canSimplify] || [((id<JavaUtilList>) NIL_CHK(modifiers_)) isEmpty]) {
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setVisibleWithBOOL:NO];
  }
  else {
    TBModifierBlock *block = ((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(modifiers_)) getWithInt:0]);
    if ([[((TBModifierBlock *) NIL_CHK(block)) getModifier] getPrecedence] == TBExpression_PREC_ADD) {
      (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setTranslationWithFloat:[self width] withFloat:-[self height] / 2];
    }
    else {
      (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setTranslationWithFloat:[self width] / 2 withFloat:-[self height]];
    }
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(simplifyCircle_)) setVisibleWithBOOL:YES];
  }
}

- (id<PlaynCoreImageLayer>)generateSpriteWithInt:(int)width
                                         withInt:(int)height
                                    withNSString:(NSString *)text
                                         withInt:(int)color {
  id<PlaynCoreImageLayer> l = [super generateSpriteWithInt:width withInt:height withNSString:text withInt:color];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(l)) setTyWithFloat:-[((id<PlaynCoreImageLayer>) NIL_CHK(l)) height]];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:l];
  return l;
}

- (void)addModifierWithTBModificationOperation:(TBModificationOperation *)mod {
  [self addModifierWithTBModificationOperation:mod withBOOL:NO];
}

- (void)addModifierWithTBModificationOperation:(TBModificationOperation *)mod
                                      withBOOL:(BOOL)isPreview {
  TBModifierBlock *modBlock;
  if ([((TBModificationOperation *) NIL_CHK(mod)) getPrecedence] == TBExpression_PREC_ADD) {
    modBlock = [[[TBModifierBlock alloc] initWithTBModificationOperation:mod withInt:TBBlock_MOD_SIZE withInt:(int) [self groupHeight]] autorelease];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(modBlock.layer_)) setTxWithFloat:[self groupWidth]];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(modBlock.layer_)) setTyWithFloat:-[self groupHeight]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:((TBModifierBlock *) NIL_CHK(modBlock)).layer_];
  }
  else {
    modBlock = [[[TBModifierBlock alloc] initWithTBModificationOperation:mod withInt:(int) [self groupWidth] withInt:TBBlock_MOD_SIZE] autorelease];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(modBlock.layer_)) setTyWithFloat:-[self groupHeight] - [((TBModifierBlock *) NIL_CHK(modBlock)) height]];
  }
  [((TBModificationOperation *) NIL_CHK(mod)) setOperandWithTBExpression:[self topLevelExpression]];
  if (isPreview) {
    if (previewBlock_ != nil) {
      [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) removeWithPlaynCoreLayer:[previewBlock_ layer]];
    }
    JreOperatorRetainedAssign(&previewBlock_, self, modBlock);
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(previewBlock_.layer_)) setAlphaWithFloat:0.5f];
  }
  else {
    [((id<JavaUtilList>) NIL_CHK(modifiers_)) addWithId:modBlock];
  }
  [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) addWithPlaynCoreLayer:((TBModifierBlock *) NIL_CHK(modBlock)).layer_];
  [self updateSimplify];
}

- (TBModifierBlock *)pop {
  if ([((id<JavaUtilList>) NIL_CHK(modifiers_)) size] == 0) return nil;
  TBModifierBlock *modBlock = ((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(modifiers_)) removeWithInt:[((id<JavaUtilList>) NIL_CHK(modifiers_)) size] - 1]);
  [[((TBModifierBlock *) NIL_CHK(modBlock)) getModifier] setOperandWithTBExpression:nil];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) removeWithPlaynCoreLayer:((TBModifierBlock *) NIL_CHK(modBlock)).layer_];
  [self updateSimplify];
  return modBlock;
}

- (PythagorasFPoint *)getNextBlockPosWithInt:(int)precidence {
  if (precidence == TBExpression_PREC_ADD) {
    return [((PythagorasFPoint *) NIL_CHK(nextBlockPos_)) setWithFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) tx] + [self groupWidth] + TBBlock_MOD_SIZE / 2 withFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) ty] - [self groupHeight] / 2];
  }
  else {
    return [((PythagorasFPoint *) NIL_CHK(nextBlockPos_)) setWithFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) tx] + [self groupWidth] / 2 withFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) ty] - [self groupHeight] - TBBlock_MOD_SIZE / 2];
  }
}

- (void)updateShowPreviewWithFloat:(float)cx
                         withFloat:(float)cy
       withTBModificationOperation:(TBModificationOperation *)mod {
  PythagorasFPoint *nextPos = [self getNextBlockPosWithInt:[((TBModificationOperation *) NIL_CHK(mod)) getPrecedence]];
  BOOL showPreview = [((PythagorasFPoint *) NIL_CHK(nextPos)) distanceWithFloat:cx withFloat:cy] < TBBlock_MOD_SIZE * 2;
  if (!showPreview) {
    [self stopShowingPreview];
  }
  else if (previewBlock_ == nil || [((TBModifierBlock *) NIL_CHK(previewBlock_)) getModifier] != mod) {
    [self addModifierWithTBModificationOperation:mod withBOOL:YES];
  }
}

- (void)stopShowingPreview {
  if (previewBlock_ != nil) [((id<PlaynCoreGroupLayer>) NIL_CHK(groupLayer_)) removeWithPlaynCoreLayer:[previewBlock_ layer]];
  JreOperatorRetainedAssign(&previewBlock_, self, nil);
}

- (NSString *)description {
  return [((id<JavaUtilList>) NIL_CHK(modifiers_)) description];
}

- (id)toMathString {
  return [[self topLevelExpression] toMathString];
}

- (void)simplfyWithInt:(int)to {
  TBModifierBlock *remove = ((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(modifiers_)) removeWithInt:0]);
  if (![((id<JavaUtilList>) NIL_CHK(modifiers_)) isEmpty]) {
    [[((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(modifiers_)) getWithInt:0]) getModifier] setOperandWithTBExpression:baseExpression_];
  }
  float width = [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) width], height = [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) height];
  if ([[((TBModifierBlock *) NIL_CHK(remove)) getModifier] getPrecedence] == TBExpression_PREC_ADD) {
    width += TBBlock_MOD_SIZE;
  }
  else {
    height += TBBlock_MOD_SIZE;
  }
  [((TBNumberBlock *) self) setValueWithInt:to];
  [((id<PlaynCoreImageLayer>) NIL_CHK(layer__)) destroy];
  [((id<PlaynCoreImageLayer>) [((TBModifierBlock *) NIL_CHK(remove)) layer]) destroy];
  JreOperatorRetainedAssign(&layer__, self, [self generateSpriteWithInt:(int) width withInt:(int) height withNSString:[self getText] withInt:[self getColor]]);
  [self updateSimplify];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&nextBlockPos_, self, nil);
  JreOperatorRetainedAssign(&simplifyListener_, self, nil);
  JreOperatorRetainedAssign(&simplifyCircle_, self, nil);
  JreOperatorRetainedAssign(&previewBlock_, self, nil);
  JreOperatorRetainedAssign(&baseExpression_, self, nil);
  JreOperatorRetainedAssign(&modifiers_, self, nil);
  JreOperatorRetainedAssign(&groupLayer_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBBaseBlock *typedCopy = (TBBaseBlock *) copy;
  typedCopy.groupLayer = groupLayer_;
  typedCopy.modifiers = modifiers_;
  typedCopy.baseExpression = baseExpression_;
  typedCopy.previewBlock = previewBlock_;
  typedCopy.simplifyCircle = simplifyCircle_;
  typedCopy.simplifyListener = simplifyListener_;
  typedCopy.nextBlockPos = nextBlockPos_;
}

@end
@implementation TBBaseBlock_SimplifyListener

- (TBBaseBlock *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBBaseBlock *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float dx = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) width] / 2 - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) localX];
  float dy = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) height] / 2 - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) localY];
  float rad = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) width] / 2;
  if (dx * dx + dy * dy > rad * rad) {
  }
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  float dx = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) width] / 2 - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) localX];
  float dy = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) height] / 2 - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) localY];
  float rad = [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.simplifyCircle)) width] * 2;
  if (dx * dx + dy * dy < rad * rad) {
    if (this$0_.simplifyListener != nil && ![((id<JavaUtilList>) NIL_CHK(this$0_.modifiers)) isEmpty]) {
      NSString *exp = [[((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(this$0_.modifiers)) getWithInt:0]) getModifier] toMathString];
      int answer = 0;
      int start = 0;
      @try {
        answer = [[((TBModifierBlock *) [((id<JavaUtilList>) NIL_CHK(this$0_.modifiers)) getWithInt:0]) getModifier] evaluate];
        start = [((TBExpression *) NIL_CHK(this$0_.baseExpression)) evaluate];
      }
      @catch (TBNonevaluatableException *e) {
        [((TBNonevaluatableException *) NIL_CHK(e)) printStackTrace];
      }
      [((id<TBBaseBlock_OnSimplifyListener>) NIL_CHK(this$0_.simplifyListener)) onSimplifyWithTBBaseBlock:this$0_ withNSString:[NSString stringWithFormat:@"%@ = %%", exp] withInt:answer withInt:start];
    }
  }
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (id)initWithTBBaseBlock:(TBBaseBlock *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBBaseBlock_SimplifyListener *typedCopy = (TBBaseBlock_SimplifyListener *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation TBBaseBlock_$1

- (id<PlaynCoreLayer>)hitTestWithPlaynCoreLayer:(id<PlaynCoreLayer>)layer
                           withPythagorasFPoint:(PythagorasFPoint *)p {
  float r = 12;
  r += 12;
  float dx = ((PythagorasFPoint *) NIL_CHK(p)).x_ - 12;
  float dy = ((PythagorasFPoint *) NIL_CHK(p)).y_ - 12;
  if (dx * dx + dy * dy < r * r) {
    return layer;
  }
  return nil;
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
