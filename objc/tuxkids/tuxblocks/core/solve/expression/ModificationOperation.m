//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\expression\ModificationOperation.java
//
//  Created by Thomas on 7/1/13.
//

#import "playn/core/Canvas.h"
#import "playn/core/Graphics.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#import "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TBModificationOperation

@synthesize value = value_;
- (TBExpression *)operand {
  return operand_;
}
- (void)setOperand:(TBExpression *)operand {
  JreOperatorRetainedAssign(&operand_, self, operand);
}
@synthesize operand = operand_;

- (int)getValue {
  return value_;
}

- (TBExpression *)getOperand {
  return operand_;
}

- (void)setOperandWithTBExpression:(TBExpression *)operand {
  self.operand = operand;
}

- (id)initWithTBExpression:(TBExpression *)operand
                   withInt:(int)value {
  if ((self = [super init])) {
    self.value = value;
    self.operand = operand;
  }
  return self;
}

- (BOOL)hasVariable {
  return [((TBExpression *) NIL_CHK(operand_)) hasVariable];
}

- (TBExpression *)getSimplified {
  return self;
}

- (TBExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  TBExpressionWriter *childWriter = [((TBExpression *) NIL_CHK(operand_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[[TBModificationOperation_$1 alloc] initWithTBModificationOperation:self withPlaynCoreTextFormat:textFormat withTBExpressionWriter:childWriter] autorelease];
}

- (NSString *)getSymbol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isCommutative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getColor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TBModificationOperation *)getInverse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addFieldsWithTBHashCode:(TBHashCode *)hashCode {
  [((TBHashCode *) NIL_CHK(hashCode)) addFieldWithId:operand_];
  [((TBHashCode *) NIL_CHK(hashCode)) addFieldWithInt:value_];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&operand_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBModificationOperation *typedCopy = (TBModificationOperation *) copy;
  typedCopy.value = value_;
  typedCopy.operand = operand_;
}

@end
@implementation TBModificationOperation_$1

- (TBModificationOperation *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBModificationOperation *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreTextLayout>)opLayout {
  return opLayout_;
}
- (void)setOpLayout:(id<PlaynCoreTextLayout>)opLayout {
  JreOperatorRetainedAssign(&opLayout_, self, opLayout);
}
@synthesize opLayout = opLayout_;
- (TBExpressionWriter *)val$childWriter {
  return val$childWriter_;
}
- (void)setVal$childWriter:(TBExpressionWriter *)val$childWriter {
  JreOperatorRetainedAssign(&val$childWriter_, self, val$childWriter);
}
@synthesize val$childWriter = val$childWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  JreOperatorRetainedAssign(&opLayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString stringWithFormat:@" %@ %d", [this$0_ getSymbol], this$0_.value] withPlaynCoreTextFormat:textFormat]);
  return [[[PythagorasFVector alloc] initWithFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) width] + [((id<PlaynCoreTextLayout>) NIL_CHK(opLayout_)) width] withFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) height]] autorelease];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                                  withInt:(int)childColor {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:childColor];
  [((TBExpressionWriter *) NIL_CHK(val$childWriter_)) drawExpressionWithPlaynCoreCanvas:canvas withInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:opLayout_ withFloat:[self width] - [((id<PlaynCoreTextLayout>) NIL_CHK(opLayout_)) width] withFloat:([self height] - [((id<PlaynCoreTextLayout>) NIL_CHK(opLayout_)) height]) / 2];
}

- (id)initWithTBModificationOperation:(TBModificationOperation *)outer$
              withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
               withTBExpressionWriter:(TBExpressionWriter *)capture$0 {
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$childWriter_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$childWriter_, self, nil);
  JreOperatorRetainedAssign(&opLayout_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBModificationOperation_$1 *typedCopy = (TBModificationOperation_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.opLayout = opLayout_;
  typedCopy.val$childWriter = val$childWriter_;
}

@end
