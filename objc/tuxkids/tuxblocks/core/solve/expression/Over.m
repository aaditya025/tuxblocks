//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\expression\Over.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "playn/core/Canvas.h"
#import "playn/core/Color.h"
#import "playn/core/Graphics.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#import "tuxkids/tuxblocks/core/solve/expression/Over.h"
#import "tuxkids/tuxblocks/core/solve/expression/Times.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TBOver

- (id)initWithTBExpression:(TBExpression *)base
                   withInt:(int)value {
  return [super initWithTBExpression:base withInt:value];
}

- (NSString *)toMathString {
  if ([((TBExpression *) NIL_CHK(operand_)) getPrecedence] < [self getPrecedence]) {
    return [TBFormatter formatWithNSString:@"(%s) %s %d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, [((TBExpression *) NIL_CHK(operand_)) toMathString], [self getSymbol], [JavaLangInteger valueOfWithInt:value_] ]];
  }
  else {
    return [TBFormatter formatWithNSString:@"%s %s %d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, [((TBExpression *) NIL_CHK(operand_)) toMathString], [self getSymbol], [JavaLangInteger valueOfWithInt:value_] ]];
  }
}

- (int)evaluate {
  return [((TBExpression *) NIL_CHK(operand_)) evaluate] / value_;
}

- (int)getPrecedence {
  return TBExpression_PREC_MULT;
}

- (NSString *)getSymbol {
  return @"/";
}

- (BOOL)isCommutative {
  return NO;
}

- (int)getColor {
  return [PlaynCoreColor rgbWithInt:0 withInt:204 withInt:0];
}

- (TBModificationOperation *)getInverse {
  return [[[TBTimes alloc] initWithTBExpression:operand_ withInt:value_] autorelease];
}

- (TBExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  TBExpressionWriter *childWriter = [((TBExpression *) NIL_CHK(operand_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[[TBOver_$1 alloc] initWithTBOver:self withPlaynCoreTextFormat:textFormat withTBExpressionWriter:childWriter] autorelease];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TBOver_$1

- (TBOver *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBOver *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreTextLayout>)divisorLayout {
  return divisorLayout_;
}
- (void)setDivisorLayout:(id<PlaynCoreTextLayout>)divisorLayout {
  JreOperatorRetainedAssign(&divisorLayout_, self, divisorLayout);
}
@synthesize divisorLayout = divisorLayout_;
- (TBExpressionWriter *)val$childWriter {
  return val$childWriter_;
}
- (void)setVal$childWriter:(TBExpressionWriter *)val$childWriter {
  JreOperatorRetainedAssign(&val$childWriter_, self, val$childWriter);
}
@synthesize val$childWriter = val$childWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  JreOperatorRetainedAssign(&divisorLayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString stringWithFormat:@"%d", this$0_.value] withPlaynCoreTextFormat:textFormat]);
  return [[[PythagorasFVector alloc] initWithFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) width] withFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) height] + [((id<PlaynCoreTextLayout>) NIL_CHK(divisorLayout_)) height] + TBExpressionWriter_SPACING * 2] autorelease];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                                  withInt:(int)childColor {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:childColor];
  [((TBExpressionWriter *) NIL_CHK(val$childWriter_)) drawExpressionWithPlaynCoreCanvas:canvas withInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  float y = [((TBExpressionWriter *) NIL_CHK(val$childWriter_)) height] + TBExpressionWriter_SPACING;
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) drawLineWithFloat:0 withFloat:y withFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) width] withFloat:y];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:divisorLayout_ withFloat:([self width] - [((id<PlaynCoreTextLayout>) NIL_CHK(divisorLayout_)) width]) / 2 withFloat:y + TBExpressionWriter_SPACING];
}

- (id)initWithTBOver:(TBOver *)outer$
withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
withTBExpressionWriter:(TBExpressionWriter *)capture$0 {
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$childWriter_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$childWriter_, self, nil);
  JreOperatorRetainedAssign(&divisorLayout_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBOver_$1 *typedCopy = (TBOver_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.divisorLayout = divisorLayout_;
  typedCopy.val$childWriter = val$childWriter_;
}

@end
