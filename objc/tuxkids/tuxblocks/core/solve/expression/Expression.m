//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\expression\Expression.java
//
//  Created by Thomas on 7/1/13.
//

#import "playn/core/Canvas.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#import "tuxkids/tuxblocks/core/solve/expression/Minus.h"
#import "tuxkids/tuxblocks/core/solve/expression/Over.h"
#import "tuxkids/tuxblocks/core/solve/expression/Plus.h"
#import "tuxkids/tuxblocks/core/solve/expression/Times.h"
#import "tuxkids/tuxblocks/core/utils/HashCode.h"

@implementation TBExpression

+ (int)PREC_ADD {
  return TBExpression_PREC_ADD;
}

+ (int)PREC_MULT {
  return TBExpression_PREC_MULT;
}

+ (int)PREC_NUM {
  return TBExpression_PREC_NUM;
}

- (NSString *)toMathString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)hasVariable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)evaluate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TBExpression *)getSimplified {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getPrecedence {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (TBExpression *)plusWithInt:(int)value {
  return [[[TBPlus alloc] initWithTBExpression:self withInt:value] autorelease];
}

- (TBExpression *)minusWithInt:(int)value {
  return [[[TBMinus alloc] initWithTBExpression:self withInt:value] autorelease];
}

- (TBExpression *)timesWithInt:(int)value {
  return [[[TBTimes alloc] initWithTBExpression:self withInt:value] autorelease];
}

- (TBExpression *)overWithInt:(int)value {
  return [[[TBOver alloc] initWithTBExpression:self withInt:value] autorelease];
}

- (TBExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  NSString *mathString = [self toMathString];
  return [[[TBExpression_$1 alloc] initWithPlaynCoreTextFormat:textFormat withNSString:mathString] autorelease];
}

- (NSString *)description {
  return [self toMathString];
}

- (void)addFieldsWithTBHashCode:(TBHashCode *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TBExpression_$1

- (id<PlaynCoreTextLayout>)layout {
  return layout_;
}
- (void)setLayout:(id<PlaynCoreTextLayout>)layout {
  JreOperatorRetainedAssign(&layout_, self, layout);
}
@synthesize layout = layout_;
- (NSString *)val$mathString {
  return val$mathString_;
}
- (void)setVal$mathString:(NSString *)val$mathString {
  JreOperatorRetainedAssign(&val$mathString_, self, val$mathString);
}
@synthesize val$mathString = val$mathString_;

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                                  withInt:(int)childColor {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:layout_ withFloat:0 withFloat:0];
}

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  JreOperatorRetainedAssign(&layout_, self, [self layoutWithNSString:val$mathString_ withPlaynCoreTextFormat:textFormat]);
  return [[[PythagorasFVector alloc] initWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout_)) width] withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(layout_)) height]] autorelease];
}

- (id)initWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
                     withNSString:(NSString *)capture$0 {
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    JreOperatorRetainedAssign(&val$mathString_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$mathString_, self, nil);
  JreOperatorRetainedAssign(&layout_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBExpression_$1 *typedCopy = (TBExpression_$1 *) copy;
  typedCopy.layout = layout_;
  typedCopy.val$mathString = val$mathString_;
}

@end
