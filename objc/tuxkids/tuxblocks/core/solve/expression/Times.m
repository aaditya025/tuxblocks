//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\expression\Times.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "playn/core/Canvas.h"
#import "playn/core/Color.h"
#import "playn/core/Font.h"
#import "playn/core/Graphics.h"
#import "playn/core/PlayN.h"
#import "playn/core/TextFormat.h"
#import "playn/core/TextLayout.h"
#import "pythagoras/f/Vector.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ExpressionWriter.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"
#import "tuxkids/tuxblocks/core/solve/expression/Over.h"
#import "tuxkids/tuxblocks/core/solve/expression/Times.h"
#import "tuxkids/tuxblocks/core/utils/Formatter.h"

@implementation TBTimes

- (id)initWithTBExpression:(TBExpression *)base
                   withInt:(int)value {
  return [super initWithTBExpression:base withInt:value];
}

- (NSString *)toMathString {
  if ([((TBExpression *) NIL_CHK(operand_)) getPrecedence] < [self getPrecedence]) {
    return [TBFormatter formatWithNSString:@"%d(%s)" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, [JavaLangInteger valueOfWithInt:value_], [((TBExpression *) NIL_CHK(operand_)) toMathString] ]];
  }
  else {
    return [TBFormatter formatWithNSString:@"%s %s %d" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, [((TBExpression *) NIL_CHK(operand_)) toMathString], [self getSymbol], [JavaLangInteger valueOfWithInt:value_] ]];
  }
}

- (int)evaluate {
  return value_ * [((TBExpression *) NIL_CHK(operand_)) evaluate];
}

- (int)getPrecedence {
  return TBExpression_PREC_MULT;
}

- (NSString *)getSymbol {
  return @"*";
}

- (BOOL)isCommutative {
  return YES;
}

- (int)getColor {
  return [PlaynCoreColor rgbWithInt:255 withInt:211 withInt:0];
}

- (TBModificationOperation *)getInverse {
  return [[[TBOver alloc] initWithTBExpression:operand_ withInt:value_] autorelease];
}

- (TBExpressionWriter *)getExpressionWriterWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  if ([((TBExpression *) NIL_CHK(operand_)) getPrecedence] >= [self getPrecedence]) return (TBExpressionWriter *) [super getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  TBExpressionWriter *childWriter = [((TBExpression *) NIL_CHK(operand_)) getExpressionWriterWithPlaynCoreTextFormat:textFormat];
  return [[[TBTimes_$1 alloc] initWithTBTimes:self withPlaynCoreTextFormat:textFormat withTBExpressionWriter:childWriter] autorelease];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation TBTimes_$1

- (TBTimes *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBTimes *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (id<PlaynCoreTextLayout>)leftParenLayout {
  return leftParenLayout_;
}
- (void)setLeftParenLayout:(id<PlaynCoreTextLayout>)leftParenLayout {
  JreOperatorRetainedAssign(&leftParenLayout_, self, leftParenLayout);
}
@synthesize leftParenLayout = leftParenLayout_;
- (id<PlaynCoreTextLayout>)rightParenLayout {
  return rightParenLayout_;
}
- (void)setRightParenLayout:(id<PlaynCoreTextLayout>)rightParenLayout {
  JreOperatorRetainedAssign(&rightParenLayout_, self, rightParenLayout);
}
@synthesize rightParenLayout = rightParenLayout_;
- (id<PlaynCoreTextLayout>)factorLayout {
  return factorLayout_;
}
- (void)setFactorLayout:(id<PlaynCoreTextLayout>)factorLayout {
  JreOperatorRetainedAssign(&factorLayout_, self, factorLayout);
}
@synthesize factorLayout = factorLayout_;
- (TBExpressionWriter *)val$childWriter {
  return val$childWriter_;
}
- (void)setVal$childWriter:(TBExpressionWriter *)val$childWriter {
  JreOperatorRetainedAssign(&val$childWriter_, self, val$childWriter);
}
@synthesize val$childWriter = val$childWriter_;

- (PythagorasFVector *)formatExpressionWithPlaynCoreTextFormat:(PlaynCoreTextFormat *)textFormat {
  id<PlaynCoreFont> font = [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) createFontWithNSString:[((id<PlaynCoreFont>) NIL_CHK(textFormat.font)) name] withPlaynCoreFont_StyleEnum:[((id<PlaynCoreFont>) NIL_CHK(textFormat.font)) style] withFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) height] * 1.0f];
  PlaynCoreTextFormat *bigFormat = [((PlaynCoreTextFormat *) [[[PlaynCoreTextFormat alloc] init] autorelease]) withFontWithPlaynCoreFont:font];
  JreOperatorRetainedAssign(&leftParenLayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:@"(" withPlaynCoreTextFormat:bigFormat]);
  JreOperatorRetainedAssign(&rightParenLayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:@")" withPlaynCoreTextFormat:bigFormat]);
  JreOperatorRetainedAssign(&factorLayout_, self, [((id<PlaynCoreGraphics>) [PlaynCorePlayN graphics]) layoutTextWithNSString:[NSString stringWithFormat:@"%d", this$0_.value] withPlaynCoreTextFormat:textFormat]);
  return [[[PythagorasFVector alloc] initWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(factorLayout_)) width] + [((id<PlaynCoreTextLayout>) NIL_CHK(leftParenLayout_)) width] + [((TBExpressionWriter *) NIL_CHK(val$childWriter_)) width] + [((id<PlaynCoreTextLayout>) NIL_CHK(rightParenLayout_)) width] + TBExpressionWriter_SPACING * 2 withFloat:[((TBExpressionWriter *) NIL_CHK(val$childWriter_)) height]] autorelease];
}

- (void)drawExpressionWithPlaynCoreCanvas:(id<PlaynCoreCanvas>)canvas
                                  withInt:(int)childColor {
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) save];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) translateWithFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(leftParenLayout_)) width] + [((id<PlaynCoreTextLayout>) NIL_CHK(factorLayout_)) width] + TBExpressionWriter_SPACING withFloat:0];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setFillColorWithInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) setStrokeColorWithInt:childColor];
  [((TBExpressionWriter *) NIL_CHK(val$childWriter_)) drawExpressionWithPlaynCoreCanvas:canvas withInt:childColor];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) restore];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:factorLayout_ withFloat:0 withFloat:([self height] - [((id<PlaynCoreTextLayout>) NIL_CHK(factorLayout_)) height]) / 2];
  float ph = [((id<PlaynCoreTextLayout>) NIL_CHK(leftParenLayout_)) height];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:leftParenLayout_ withFloat:[((id<PlaynCoreTextLayout>) NIL_CHK(factorLayout_)) width] withFloat:([self height] - ph) / 2];
  (void) [((id<PlaynCoreCanvas>) NIL_CHK(canvas)) fillTextWithPlaynCoreTextLayout:rightParenLayout_ withFloat:[self width] - [((id<PlaynCoreTextLayout>) NIL_CHK(rightParenLayout_)) width] withFloat:([self height] - ph) / 2];
}

- (id)initWithTBTimes:(TBTimes *)outer$
withPlaynCoreTextFormat:(PlaynCoreTextFormat *)arg$0
withTBExpressionWriter:(TBExpressionWriter *)capture$0 {
  if ((self = [super initWithPlaynCoreTextFormat:arg$0])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$childWriter_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$childWriter_, self, nil);
  JreOperatorRetainedAssign(&factorLayout_, self, nil);
  JreOperatorRetainedAssign(&rightParenLayout_, self, nil);
  JreOperatorRetainedAssign(&leftParenLayout_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBTimes_$1 *typedCopy = (TBTimes_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.leftParenLayout = leftParenLayout_;
  typedCopy.rightParenLayout = rightParenLayout_;
  typedCopy.factorLayout = factorLayout_;
  typedCopy.val$childWriter = val$childWriter_;
}

@end
