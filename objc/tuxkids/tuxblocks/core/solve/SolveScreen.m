//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\solve\SolveScreen.java
//
//  Created by Thomas on 7/1/13.
//

#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "playn/core/Assets.h"
#import "playn/core/Connection.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "playn/core/Pointer.h"
#import "playn/core/util/Clock.h"
#import "pythagoras/f/Point.h"
#import "tripleplay/game/Screen.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/Constant.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/MenuSprite.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"
#import "tuxkids/tuxblocks/core/solve/EquationSprite.h"
#import "tuxkids/tuxblocks/core/solve/NumberSelectScreen.h"
#import "tuxkids/tuxblocks/core/solve/SolveScreen.h"
#import "tuxkids/tuxblocks/core/solve/blocks/BaseBlock.h"
#import "tuxkids/tuxblocks/core/solve/blocks/Block.h"
#import "tuxkids/tuxblocks/core/solve/blocks/ModifierBlock.h"
#import "tuxkids/tuxblocks/core/solve/expression/Equation.h"
#import "tuxkids/tuxblocks/core/solve/expression/Expression.h"
#import "tuxkids/tuxblocks/core/solve/expression/ModificationOperation.h"

@implementation TBSolveScreen

- (TBEquation *)startEquation {
  return startEquation_;
}
- (void)setStartEquation:(TBEquation *)startEquation {
  JreOperatorRetainedAssign(&startEquation_, self, startEquation);
}
@synthesize startEquation = startEquation_;
- (id<JavaUtilList>)baseBlocks {
  return baseBlocks_;
}
- (void)setBaseBlocks:(id<JavaUtilList>)baseBlocks {
  JreOperatorRetainedAssign(&baseBlocks_, self, baseBlocks);
}
@synthesize baseBlocks = baseBlocks_;
- (id<JavaUtilList>)leftBaseBlocks {
  return leftBaseBlocks_;
}
- (void)setLeftBaseBlocks:(id<JavaUtilList>)leftBaseBlocks {
  JreOperatorRetainedAssign(&leftBaseBlocks_, self, leftBaseBlocks);
}
@synthesize leftBaseBlocks = leftBaseBlocks_;
- (id<JavaUtilList>)rightBaseBlocks {
  return rightBaseBlocks_;
}
- (void)setRightBaseBlocks:(id<JavaUtilList>)rightBaseBlocks {
  JreOperatorRetainedAssign(&rightBaseBlocks_, self, rightBaseBlocks);
}
@synthesize rightBaseBlocks = rightBaseBlocks_;
- (TBBaseBlock *)draggingFrom {
  return draggingFrom_;
}
- (void)setDraggingFrom:(TBBaseBlock *)draggingFrom {
  JreOperatorRetainedAssign(&draggingFrom_, self, draggingFrom);
}
@synthesize draggingFrom = draggingFrom_;
- (TBBaseBlock *)highlight {
  return highlight_;
}
- (void)setHighlight:(TBBaseBlock *)highlight {
  JreOperatorRetainedAssign(&highlight_, self, highlight);
}
@synthesize highlight = highlight_;
@synthesize flipModifierPreview = flipModifierPreview_;
- (TBModifierBlock *)dragging {
  return dragging_;
}
- (void)setDragging:(TBModifierBlock *)dragging {
  JreOperatorRetainedAssign(&dragging_, self, dragging);
}
@synthesize dragging = dragging_;
- (PythagorasFPoint *)dragOffset {
  return dragOffset_;
}
- (void)setDragOffset:(PythagorasFPoint *)dragOffset {
  JreOperatorRetainedAssign(&dragOffset_, self, dragOffset);
}
@synthesize dragOffset = dragOffset_;
- (TBEquationSprite *)equationSprite {
  return equationSprite_;
}
- (void)setEquationSprite:(TBEquationSprite *)equationSprite {
  JreOperatorRetainedAssign(&equationSprite_, self, equationSprite);
}
@synthesize equationSprite = equationSprite_;
- (TBBaseBlock *)simplyfyResult {
  return simplyfyResult_;
}
- (void)setSimplyfyResult:(TBBaseBlock *)simplyfyResult {
  JreOperatorRetainedAssign(&simplyfyResult_, self, simplyfyResult);
}
@synthesize simplyfyResult = simplyfyResult_;
- (TBButton *)buttonBack {
  return buttonBack_;
}
- (void)setButtonBack:(TBButton *)buttonBack {
  JreOperatorRetainedAssign(&buttonBack_, self, buttonBack);
}
@synthesize buttonBack = buttonBack_;
- (id<PlaynCoreImage>)buttonImageOk {
  return buttonImageOk_;
}
- (void)setButtonImageOk:(id<PlaynCoreImage>)buttonImageOk {
  JreOperatorRetainedAssign(&buttonImageOk_, self, buttonImageOk);
}
@synthesize buttonImageOk = buttonImageOk_;
- (id<PlaynCoreImage>)buttonImageBack {
  return buttonImageBack_;
}
- (void)setButtonImageBack:(id<PlaynCoreImage>)buttonImageBack {
  JreOperatorRetainedAssign(&buttonImageBack_, self, buttonImageBack);
}
@synthesize buttonImageBack = buttonImageBack_;
- (TBMenuSprite *)menu {
  return menu_;
}
- (void)setMenu:(TBMenuSprite *)menu {
  JreOperatorRetainedAssign(&menu_, self, menu);
}
@synthesize menu = menu_;
@synthesize equalsX = equalsX_;
- (TBBaseBlock *)startDoubleClick {
  return startDoubleClick_;
}
- (void)setStartDoubleClick:(TBBaseBlock *)startDoubleClick {
  JreOperatorRetainedAssign(&startDoubleClick_, self, startDoubleClick);
}
@synthesize startDoubleClick = startDoubleClick_;
@synthesize startDoubleClickTime = startDoubleClickTime_;

- (void)setEquationWithTBEquation:(TBEquation *)equation {
  self.startEquation = equation;
}

- (BOOL)solved {
  if (dragging_ != nil) return NO;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TBBaseBlock *baseBlock = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((TBBaseBlock *) NIL_CHK(baseBlock)) hasModifier]) return NO;
    }
  }
  return YES;
}

- (TBEquation *)equation {
  return [[[TBEquation alloc] initWithTBExpression:[((TBBaseBlock *) [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) getWithInt:0]) topLevelExpression] withTBExpression:[((TBBaseBlock *) [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) getWithInt:0]) topLevelExpression] withInt:[((TBEquation *) NIL_CHK(startEquation_)) answer] withInt:[((TBEquation *) NIL_CHK(startEquation_)) difficulty]] autorelease];
}

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
                        withTBGameState:(TBGameState *)gameState {
  if ((self = [super initWithTripleplayGameScreenStack:screens withTBGameState:gameState])) {
    JreOperatorRetainedAssign(&baseBlocks_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&leftBaseBlocks_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&rightBaseBlocks_, self, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&dragOffset_, self, [[[PythagorasFPoint alloc] init] autorelease]);
    JreOperatorRetainedAssign(&menu_, self, [[[TBMenuSprite alloc] initWithFloat:[self width] withFloat:[TBGameScreen defaultButtonSize] * 1.2f] autorelease]);
    (void) [((id<PlaynCoreLayer>) [((TBMenuSprite *) NIL_CHK(menu_)) layer]) setDepthWithFloat:-1];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBMenuSprite *) NIL_CHK(menu_)) layer]];
    JreOperatorRetainedAssign(&buttonImageBack_, self, [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[TBConstant BUTTON_DOWN]]);
    JreOperatorRetainedAssign(&buttonImageOk_, self, [((id<PlaynCoreAssets>) [PlaynCorePlayN assets]) getImageWithNSString:[TBConstant BUTTON_OK]]);
    JreOperatorRetainedAssign(&buttonBack_, self, [self createMenuButtonWithNSString:[TBConstant BUTTON_DOWN]]);
    [((TBButton *) NIL_CHK(buttonBack_)) setPositionWithFloat:[((TBButton *) NIL_CHK(buttonBack_)) width] * 0.6f withFloat:[((TBButton *) NIL_CHK(buttonBack_)) height] * 0.6f];
    (void) [((id<PlaynCoreLayer>) [((TBButton *) NIL_CHK(buttonBack_)) layerAddable]) setDepthWithFloat:10];
    [((TBButton *) NIL_CHK(buttonBack_)) setOnReleasedListenerWithTBButton_OnReleasedListener:[[[TBSolveScreen_$1 alloc] initWithTBSolveScreen:self] autorelease]];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBButton *) NIL_CHK(buttonBack_)) layerAddable]];
  }
  return self;
}

- (void)popThis {
  [self popThisWithTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] up]];
}

- (void)wasAdded {
  [super wasAdded];
  TBBaseBlock *leftHandSide = [TBBlock createBlockWithTBExpression:[((TBEquation *) NIL_CHK(startEquation_)) leftHandSide]];
  TBBaseBlock *rightHandSide = [TBBlock createBlockWithTBExpression:[((TBEquation *) NIL_CHK(startEquation_)) rightHandSide]];
  float blockHeight = [JavaLangMath maxWithFloat:[((TBBaseBlock *) NIL_CHK(leftHandSide)) groupHeight] withFloat:[((TBBaseBlock *) NIL_CHK(rightHandSide)) groupHeight]];
  (void) [((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(leftHandSide)) layer]) setTyWithFloat:([((id<PlaynCoreGraphics>) [TBGameScreen graphics]) height] + blockHeight + [((TBMenuSprite *) NIL_CHK(menu_)) height]) / 2];
  (void) [((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(leftHandSide)) layer]) setTxWithFloat:[((id<PlaynCoreGraphics>) [TBGameScreen graphics]) width] / 4 - [((TBBaseBlock *) NIL_CHK(leftHandSide)) groupWidth] / 2];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBBaseBlock *) NIL_CHK(leftHandSide)) layer]];
  if ([((TBBaseBlock *) NIL_CHK(leftHandSide)) hasModifier]) (void) [((id<PlaynCoreImageLayer>) [[((TBBaseBlock *) NIL_CHK(leftHandSide)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
  [((TBBaseBlock *) NIL_CHK(leftHandSide)) setSimplifyListenerWithTBBaseBlock_OnSimplifyListener:self];
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) addWithId:leftHandSide];
  [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) addWithId:leftHandSide];
  (void) [((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(rightHandSide)) layer]) setTyWithFloat:([((id<PlaynCoreGraphics>) [TBGameScreen graphics]) height] + blockHeight + [((TBMenuSprite *) NIL_CHK(menu_)) height]) / 2];
  (void) [((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(rightHandSide)) layer]) setTxWithFloat:3 * [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) width] / 4 - [((TBBaseBlock *) NIL_CHK(rightHandSide)) groupWidth] / 2];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBBaseBlock *) NIL_CHK(rightHandSide)) layer]];
  if ([((TBBaseBlock *) NIL_CHK(rightHandSide)) hasModifier]) (void) [((id<PlaynCoreImageLayer>) [[((TBBaseBlock *) NIL_CHK(rightHandSide)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
  [((TBBaseBlock *) NIL_CHK(rightHandSide)) setSimplifyListenerWithTBBaseBlock_OnSimplifyListener:self];
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) addWithId:rightHandSide];
  [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) addWithId:rightHandSide];
  equalsX_ = [self width] / 2;
  JreOperatorRetainedAssign(&equationSprite_, self, [[[TBEquationSprite alloc] initWithTBBaseBlock:leftHandSide withTBBaseBlock:rightHandSide] autorelease]);
  [self refreshEquationSprite];
}

- (void)wasRemoved {
  [super wasRemoved];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TBBaseBlock *block = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((TBBaseBlock *) NIL_CHK(block)) destroy];
    }
  }
  [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) clear];
  [((id<JavaUtilList>) NIL_CHK(leftBaseBlocks_)) clear];
  [((id<JavaUtilList>) NIL_CHK(rightBaseBlocks_)) clear];
  [((id<PlaynCoreImageLayer>) [((TBEquationSprite *) NIL_CHK(equationSprite_)) layer]) destroy];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      TBBaseBlock *baseBlock = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(baseBlock)) layer]) destroy];
    }
  }
}

- (void)refreshEquationSprite {
  [((TBEquationSprite *) NIL_CHK(equationSprite_)) refreshWithTBModifierBlock:dragging_ withTBBaseBlock:highlight_ withBOOL:flipModifierPreview_];
  id<PlaynCoreImageLayer> layer = [((TBEquationSprite *) NIL_CHK(equationSprite_)) layer];
  [((id<PlaynCoreGroupLayer>) NIL_CHK(self.layer)) addWithPlaynCoreLayer:layer];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setTyWithFloat:10];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(layer)) setTxWithFloat:[((id<PlaynCoreGraphics>) [TBGameScreen graphics]) width] / 2];
  [((TBButton *) NIL_CHK(buttonBack_)) setImageWithPlaynCoreImage:[self solved] ? buttonImageOk_ : buttonImageBack_];
}

- (void)updateWithInt:(int)delta {
  [super updateWithInt:delta];
}

- (void)paintWithPlaynCoreUtilClock:(id<PlaynCoreUtilClock>)clock {
  [super paintWithPlaynCoreUtilClock:clock];
}

- (void)onPointerStartWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) return;
  JreOperatorRetainedAssign(&dragging_, self, nil);
  JreOperatorRetainedAssign(&draggingFrom_, self, nil);
  if ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) hit] != nil) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TBBaseBlock *baseBlock = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        if ([((TBBaseBlock *) NIL_CHK(baseBlock)) hasModifier] && [[((TBBaseBlock *) NIL_CHK(baseBlock)) lastModifier] layer] == [((id<PlaynCorePointer_Event>) NIL_CHK(event)) hit]) {
          if ([[[((TBBaseBlock *) NIL_CHK(baseBlock)) lastModifier] getModifier] getPrecedence] == TBExpression_PREC_MULT && [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) size] > 2) {
            if (startDoubleClick_ != nil && startDoubleClickTime_ + TBSolveScreen_DOUBLE_CLICK_TIME > [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time]) {
              TBModificationOperation *toFlip = [[((TBBaseBlock *) NIL_CHK(baseBlock)) lastModifier] getModifier];
              {
                id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
                while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
                  TBBaseBlock *baseBlock2 = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
                  [((TBBaseBlock *) NIL_CHK(baseBlock2)) addModifierWithTBModificationOperation:[((TBModificationOperation *) NIL_CHK(toFlip)) getInverse]];
                  (void) [((id<PlaynCoreImageLayer>) [[((TBBaseBlock *) NIL_CHK(baseBlock2)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
                }
              }
              [self refreshEquationSprite];
            }
            else {
              JreOperatorRetainedAssign(&startDoubleClick_, self, baseBlock);
              startDoubleClickTime_ = [((id<PlaynCorePointer_Event>) NIL_CHK(event)) time];
            }
            continue;
          }
          JreOperatorRetainedAssign(&draggingFrom_, self, baseBlock);
          break;
        }
      }
    }
    if (draggingFrom_ != nil) {
      JreOperatorRetainedAssign(&dragging_, self, [draggingFrom_ pop]);
      if ([draggingFrom_ hasModifier]) {
        (void) [((id<PlaynCoreImageLayer>) [[draggingFrom_ lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
      }
      (void) [((PythagorasFPoint *) NIL_CHK(dragOffset_)) setWithFloat:[((id<PlaynCoreGroupLayer>) [draggingFrom_ layer]) tx] + [((id<PlaynCoreImageLayer>) [((TBModifierBlock *) NIL_CHK(dragging_)) layer]) tx] - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] withFloat:[((id<PlaynCoreGroupLayer>) [draggingFrom_ layer]) ty] + [((id<PlaynCoreImageLayer>) [((TBModifierBlock *) NIL_CHK(dragging_)) layer]) ty] - [((id<PlaynCorePointer_Event>) NIL_CHK(event)) y]];
      (void) [((id<PlaynCoreImageLayer>) [((TBModifierBlock *) NIL_CHK(dragging_)) layer]) setTranslationWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).x_ withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).y_];
      [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) addWithPlaynCoreLayer:[((TBModifierBlock *) NIL_CHK(dragging_)) layer]];
      (void) [((id<PlaynCoreImageLayer>) [((TBModifierBlock *) NIL_CHK(dragging_)) layer]) setDepthWithFloat:2];
      [self refreshEquationSprite];
    }
  }
}

- (void)onPointerEndWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TBBaseBlock *baseBlock = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((TBBaseBlock *) NIL_CHK(baseBlock)) stopShowingPreview];
      }
    }
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) removeWithPlaynCoreLayer:[dragging_ layer]];
    TBBaseBlock *dragStop = highlight_;
    if (flipModifierPreview_) {
      [((TBBaseBlock *) NIL_CHK(dragStop)) addModifierWithTBModificationOperation:[dragging_ getModifier]];
    }
    else {
      [((TBBaseBlock *) NIL_CHK(dragStop)) addModifierWithTBModificationOperation:[dragging_ getOriginalModifier]];
    }
    (void) [((id<PlaynCoreImageLayer>) [[((TBBaseBlock *) NIL_CHK(dragStop)) lastModifier] layer]) addListenerWithPlaynCorePointer_Listener:self];
    JreOperatorRetainedAssign(&dragging_, self, nil);
    [self refreshEquationSprite];
  }
  JreOperatorRetainedAssign(&dragging_, self, nil);
}

- (void)onPointerDragWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
  if (dragging_ != nil) {
    (void) [((id<PlaynCoreImageLayer>) [dragging_ layer]) setTranslationWithFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).x_ withFloat:[((id<PlaynCorePointer_Event>) NIL_CHK(event)) y] + ((PythagorasFPoint *) NIL_CHK(dragOffset_)).y_];
    BOOL invert = ([((id<PlaynCoreGroupLayer>) [((TBBaseBlock *) NIL_CHK(draggingFrom_)) layer]) tx] < equalsX_) != ([((id<PlaynCorePointer_Event>) NIL_CHK(event)) x] < equalsX_);
    [dragging_ setInvertedWithBOOL:invert];
    [self refreshEquationSprite];
    float blockCX = [((id<PlaynCoreImageLayer>) [dragging_ layer]) tx] + [dragging_ width] / 2;
    float blockCY = [((id<PlaynCoreImageLayer>) [dragging_ layer]) ty] + [dragging_ height] / 2;
    JreOperatorRetainedAssign(&highlight_, self, draggingFrom_);
    flipModifierPreview_ = NO;
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(baseBlocks_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        TBBaseBlock *baseBlock = ((TBBaseBlock *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((TBBaseBlock *) NIL_CHK(baseBlock)) updateShowPreviewWithFloat:blockCX withFloat:blockCY withTBModificationOperation:[dragging_ getModifier]];
        if (baseBlock != draggingFrom_ && [((TBBaseBlock *) NIL_CHK(baseBlock)) isShowingPreview]) {
          JreOperatorRetainedAssign(&highlight_, self, baseBlock);
          flipModifierPreview_ = YES;
        }
      }
    }
  }
}

- (void)onPointerCancelWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event {
}

- (void)onSimplifyWithTBBaseBlock:(TBBaseBlock *)baseBlock
                     withNSString:(NSString *)expression
                          withInt:(int)answer
                          withInt:(int)start {
  JreOperatorRetainedAssign(&simplyfyResult_, self, baseBlock);
  TBNumberSelectScreen *nss = [[[TBNumberSelectScreen alloc] initWithTripleplayGameScreenStack:screens_ withTBGameState:state__ withNSString:expression withInt:answer] autorelease];
  [((TBNumberSelectScreen *) NIL_CHK(nss)) setFocusedNumberWithInt:start];
  [self pushScreenWithTBGameScreen:nss];
}

- (void)onChildScreenFinishedWithTBGameScreen:(TBGameScreen *)screen {
  [super onChildScreenFinishedWithTBGameScreen:screen];
  if ([screen isKindOfClass:[TBNumberSelectScreen class]]) {
    if ([((TBNumberSelectScreen *) screen) hasCorrectAnswer]) {
      JavaLangInteger *answer = [((TBNumberSelectScreen *) screen) selectedAnswer];
      [((TBBaseBlock *) NIL_CHK(simplyfyResult_)) simplfyWithInt:[((JavaLangInteger *) NIL_CHK(answer)) intValue]];
      [self refreshEquationSprite];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&startDoubleClick_, self, nil);
  JreOperatorRetainedAssign(&menu_, self, nil);
  JreOperatorRetainedAssign(&buttonImageBack_, self, nil);
  JreOperatorRetainedAssign(&buttonImageOk_, self, nil);
  JreOperatorRetainedAssign(&buttonBack_, self, nil);
  JreOperatorRetainedAssign(&simplyfyResult_, self, nil);
  JreOperatorRetainedAssign(&equationSprite_, self, nil);
  JreOperatorRetainedAssign(&dragOffset_, self, nil);
  JreOperatorRetainedAssign(&dragging_, self, nil);
  JreOperatorRetainedAssign(&highlight_, self, nil);
  JreOperatorRetainedAssign(&draggingFrom_, self, nil);
  JreOperatorRetainedAssign(&rightBaseBlocks_, self, nil);
  JreOperatorRetainedAssign(&leftBaseBlocks_, self, nil);
  JreOperatorRetainedAssign(&baseBlocks_, self, nil);
  JreOperatorRetainedAssign(&startEquation_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSolveScreen *typedCopy = (TBSolveScreen *) copy;
  typedCopy.startEquation = startEquation_;
  typedCopy.baseBlocks = baseBlocks_;
  typedCopy.leftBaseBlocks = leftBaseBlocks_;
  typedCopy.rightBaseBlocks = rightBaseBlocks_;
  typedCopy.draggingFrom = draggingFrom_;
  typedCopy.highlight = highlight_;
  typedCopy.flipModifierPreview = flipModifierPreview_;
  typedCopy.dragging = dragging_;
  typedCopy.dragOffset = dragOffset_;
  typedCopy.equationSprite = equationSprite_;
  typedCopy.simplyfyResult = simplyfyResult_;
  typedCopy.buttonBack = buttonBack_;
  typedCopy.buttonImageOk = buttonImageOk_;
  typedCopy.buttonImageBack = buttonImageBack_;
  typedCopy.menu = menu_;
  typedCopy.equalsX = equalsX_;
  typedCopy.startDoubleClick = startDoubleClick_;
  typedCopy.startDoubleClickTime = startDoubleClickTime_;
}

@end
@implementation TBSolveScreen_$1

- (TBSolveScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBSolveScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;

- (void)onReleaseWithPlaynCorePointer_Event:(id<PlaynCorePointer_Event>)event
                                   withBOOL:(BOOL)inButton {
  if (inButton) [this$0_ popThis];
}

- (id)initWithTBSolveScreen:(TBSolveScreen *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBSolveScreen_$1 *typedCopy = (TBSolveScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
