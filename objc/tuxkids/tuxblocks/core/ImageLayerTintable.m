//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\ImageLayerTintable.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "java/lang/Integer.h"
#import "java/lang/Throwable.h"
#import "java/util/HashMap.h"
#import "playn/core/Connection.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Image.h"
#import "playn/core/ImageLayer.h"
#import "playn/core/Layer.h"
#import "playn/core/Pointer.h"
#import "playn/core/gl/GLContext.h"
#import "tripleplay/particle/GLStatus.h"
#import "tripleplay/util/Colors.h"
#import "tuxkids/tuxblocks/core/ImageLayerTintable.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/utils/CanvasUtils.h"

@implementation TBImageLayerTintable

static BOOL TBImageLayerTintable_DISABLE_GL_;

- (id<PlaynCoreGroupLayer>)layer_ {
  return layer__;
}
- (void)setLayer_:(id<PlaynCoreGroupLayer>)layer_ {
  JreOperatorRetainedAssign(&layer__, self, layer_);
}
@synthesize layer_ = layer__;
- (id<PlaynCoreImage>)baseImage {
  return baseImage_;
}
- (void)setBaseImage:(id<PlaynCoreImage>)baseImage {
  JreOperatorRetainedAssign(&baseImage_, self, baseImage);
}
@synthesize baseImage = baseImage_;
- (id<PlaynCoreImageLayer>)base {
  return base_;
}
- (void)setBase:(id<PlaynCoreImageLayer>)base {
  JreOperatorRetainedAssign(&base_, self, base);
}
@synthesize base = base_;
- (id<PlaynCoreImageLayer>)top {
  return top_;
}
- (void)setTop:(id<PlaynCoreImageLayer>)top {
  JreOperatorRetainedAssign(&top_, self, top);
}
@synthesize top = top_;
@synthesize tint_ = tint__;
- (JavaUtilHashMap *)tintMap {
  return tintMap_;
}
- (void)setTintMap:(JavaUtilHashMap *)tintMap {
  JreOperatorRetainedAssign(&tintMap_, self, tintMap);
}
@synthesize tintMap = tintMap_;

+ (BOOL)DISABLE_GL {
  return TBImageLayerTintable_DISABLE_GL_;
}

- (BOOL)useGL {
  return !TBImageLayerTintable_DISABLE_GL_ && [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) ctx] != nil;
}

- (float)width {
  return [((id<PlaynCoreImageLayer>) NIL_CHK(base_)) width];
}

- (float)height {
  return [((id<PlaynCoreImageLayer>) NIL_CHK(base_)) height];
}

- (id<PlaynCoreLayer>)layer {
  return layer__;
}

- (id<PlaynCoreImage>)image {
  return baseImage_;
}

- (float)tx {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) tx];
}

- (float)ty {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) ty];
}

- (int)tint {
  return tint__;
}

- (float)depth {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) depth];
}

- (float)alpha {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) alpha];
}

- (BOOL)visible {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) visible];
}

- (float)originX {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) originX];
}

- (float)originY {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) originY];
}

- (float)rotation {
  return [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) rotation];
}

- (void)setTxWithFloat:(float)tx {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setTxWithFloat:tx];
}

- (void)setTyWithFloat:(float)ty {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setTyWithFloat:ty];
}

- (void)setTranslationWithFloat:(float)x
                      withFloat:(float)y {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setTranslationWithFloat:x withFloat:y];
}

- (void)setOriginWithFloat:(float)x
                 withFloat:(float)y {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setOriginWithFloat:x withFloat:y];
}

- (void)setImageWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  if (baseImage_ == image) return;
  self.baseImage = image;
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(base_)) setImageWithPlaynCoreImage:image];
  [((JavaUtilHashMap *) NIL_CHK(tintMap_)) clear];
  (void) [((JavaUtilHashMap *) NIL_CHK(tintMap_)) putWithId:[JavaLangInteger valueOfWithInt:[TripleplayUtilColors WHITE]] withId:image];
  [self setTintWithInt:tint__];
}

- (void)setScaleWithFloat:(float)scale_ {
  [self setScaleWithFloat:scale_ withFloat:scale_];
}

- (void)setScaleWithFloat:(float)scaleX
                withFloat:(float)scaleY {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setScaleWithFloat:scaleX withFloat:scaleY];
}

- (void)setDepthWithFloat:(float)depth {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setDepthWithFloat:depth];
}

- (void)setVisibleWithBOOL:(BOOL)visible {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setVisibleWithBOOL:visible];
}

- (void)setAlphaWithFloat:(float)alpha {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setAlphaWithFloat:alpha];
}

- (void)setRotationWithFloat:(float)angle {
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setRotationWithFloat:angle];
}

- (id)init {
  return [self initTBImageLayerTintableWithPlaynCoreImage:nil];
}

- (id)initTBImageLayerTintableWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&tintMap_, self, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&layer__, self, [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) createGroupLayer]);
    JreOperatorRetainedAssign(&base_, self, [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) createImageLayerWithPlaynCoreImage:image]);
    JreOperatorRetainedAssign(&top_, self, [((id<PlaynCoreGraphics>) [TBPlayNObject graphics]) createImageLayer]);
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(top_)) setInteractiveWithBOOL:NO];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) addWithPlaynCoreLayer:base_];
    [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) addWithPlaynCoreLayer:top_];
    JreOperatorRetainedAssign(&baseImage_, self, image);
    (void) [((JavaUtilHashMap *) NIL_CHK(tintMap_)) putWithId:[JavaLangInteger valueOfWithInt:[TripleplayUtilColors WHITE]] withId:baseImage_];
    tint__ = [TripleplayUtilColors WHITE];
  }
  return self;
}

- (id)initWithPlaynCoreImage:(id<PlaynCoreImage>)image {
  return [self initTBImageLayerTintableWithPlaynCoreImage:image];
}

- (void)setTintWithInt:(int)color {
  tint__ = color;
  if (![self useGL]) {
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(top_)) setImageWithPlaynCoreImage:nil];
    if (baseImage_ == nil) return;
    [((id<PlaynCoreImage>) NIL_CHK(baseImage_)) addCallbackWithPlaynCoreUtilCallback:[[[TBImageLayerTintable_$1 alloc] initWithTBImageLayerTintable:self withInt:color] autorelease]];
  }
  else {
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setTintWithInt:color];
  }
}

- (void)setTintWithInt:(int)baseColor
               withInt:(int)tintColor
             withFloat:(float)perc {
  tint__ = [TripleplayUtilColors blendWithInt:baseColor withInt:tintColor withFloat:perc];
  if (![self useGL]) {
    [((id<PlaynCoreImage>) NIL_CHK(baseImage_)) addCallbackWithPlaynCoreUtilCallback:[[[TBImageLayerTintable_$2 alloc] initWithTBImageLayerTintable:self withInt:baseColor withInt:tintColor] autorelease]];
    (void) [((id<PlaynCoreImageLayer>) NIL_CHK(top_)) setAlphaWithFloat:1 - perc];
  }
  else {
    (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) setTintWithInt:[TripleplayUtilColors blendWithInt:baseColor withInt:tintColor withFloat:perc]];
  }
}

- (id<PlaynCoreImage>)getTintedImageWithJavaLangInteger:(JavaLangInteger *)color {
  id<PlaynCoreImage> mapped = ((id<PlaynCoreImage>) [((JavaUtilHashMap *) NIL_CHK(tintMap_)) getWithId:color]);
  if (mapped == nil) {
    mapped = [TBCanvasUtils tintImageWithPlaynCoreImage:baseImage_ withInt:[((JavaLangInteger *) NIL_CHK(color)) intValue] withFloat:1];
    (void) [((JavaUtilHashMap *) NIL_CHK(tintMap_)) putWithId:color withId:mapped];
  }
  return mapped;
}

- (void)destroy {
  [((id<PlaynCoreGroupLayer>) NIL_CHK(layer__)) destroy];
}

- (void)addListenerWithPlaynCorePointer_Listener:(id<PlaynCorePointer_Listener>)pointerListener {
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(base_)) addListenerWithPlaynCorePointer_Listener:pointerListener];
}

+ (void)initialize {
  if (self == [TBImageLayerTintable class]) {
    TBImageLayerTintable_DISABLE_GL_ = ![TPGLStatus enabled];
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&tintMap_, self, nil);
  JreOperatorRetainedAssign(&top_, self, nil);
  JreOperatorRetainedAssign(&base_, self, nil);
  JreOperatorRetainedAssign(&baseImage_, self, nil);
  JreOperatorRetainedAssign(&layer__, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBImageLayerTintable *typedCopy = (TBImageLayerTintable *) copy;
  typedCopy.layer_ = layer__;
  typedCopy.baseImage = baseImage_;
  typedCopy.base = base_;
  typedCopy.top = top_;
  typedCopy.tint_ = tint__;
  typedCopy.tintMap = tintMap_;
}

@end
@implementation TBImageLayerTintable_$1

- (TBImageLayerTintable *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBImageLayerTintable *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$color = val$color_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.base)) setImageWithPlaynCoreImage:[this$0_ getTintedImageWithJavaLangInteger:[JavaLangInteger valueOfWithInt:val$color_]]];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithTBImageLayerTintable:(TBImageLayerTintable *)outer$
                           withInt:(int)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$color_ = capture$0;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBImageLayerTintable_$1 *typedCopy = (TBImageLayerTintable_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$color = val$color_;
}

@end
@implementation TBImageLayerTintable_$2

- (TBImageLayerTintable *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBImageLayerTintable *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
@synthesize val$baseColor = val$baseColor_;
@synthesize val$tintColor = val$tintColor_;

- (void)onSuccessWithId:(id<PlaynCoreImage>)result {
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.base)) setImageWithPlaynCoreImage:[this$0_ getTintedImageWithJavaLangInteger:[JavaLangInteger valueOfWithInt:val$baseColor_]]];
  (void) [((id<PlaynCoreImageLayer>) NIL_CHK(this$0_.top)) setImageWithPlaynCoreImage:[this$0_ getTintedImageWithJavaLangInteger:[JavaLangInteger valueOfWithInt:val$tintColor_]]];
}

- (void)onFailureWithJavaLangThrowable:(JavaLangThrowable *)cause {
}

- (id)initWithTBImageLayerTintable:(TBImageLayerTintable *)outer$
                           withInt:(int)capture$0
                           withInt:(int)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    val$baseColor_ = capture$0;
    val$tintColor_ = capture$1;
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBImageLayerTintable_$2 *typedCopy = (TBImageLayerTintable_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$baseColor = val$baseColor_;
  typedCopy.val$tintColor = val$tintColor_;
}

@end
