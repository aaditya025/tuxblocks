//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: C:\Users\Thomas\Documents\Eclipse\Tux\tuxblocks\core\src\main\java\tuxkids\tuxblocks\core\screen\GameScreen.java
//
//  Created by Thomas on 7/1/13.
//

#import "IOSClass.h"
#import "playn/core/Graphics.h"
#import "playn/core/GroupLayer.h"
#import "playn/core/Key.h"
#import "playn/core/Keyboard.h"
#import "playn/core/Layer.h"
#import "playn/core/PlayN.h"
#import "pythagoras/f/Vector.h"
#import "tripleplay/game/ScreenStack.h"
#import "tripleplay/game/trans/SlideTransition.h"
#import "tuxkids/tuxblocks/core/Button.h"
#import "tuxkids/tuxblocks/core/GameBackgroundSprite.h"
#import "tuxkids/tuxblocks/core/GameState.h"
#import "tuxkids/tuxblocks/core/PlayNObject.h"
#import "tuxkids/tuxblocks/core/screen/GameScreen.h"

@implementation TBGameScreen

- (TripleplayGameScreenStack *)screens {
  return screens_;
}
- (void)setScreens:(TripleplayGameScreenStack *)screens {
  JreOperatorRetainedAssign(&screens_, self, screens);
}
@synthesize screens = screens_;
- (TBGameState *)state_ {
  return state__;
}
- (void)setState_:(TBGameState *)state_ {
  JreOperatorRetainedAssign(&state__, self, state_);
}
@synthesize state_ = state__;
- (TBGameScreen *)topActivity {
  return topActivity_;
}
- (void)setTopActivity:(TBGameScreen *)topActivity {
  JreOperatorRetainedAssign(&topActivity_, self, topActivity);
}
@synthesize topActivity = topActivity_;
- (id<TBGameScreen_OnScreenFinishedListener>)onScreenFinishedListener {
  return onScreenFinishedListener_;
}
- (void)setOnScreenFinishedListener:(id<TBGameScreen_OnScreenFinishedListener>)onScreenFinishedListener {
  JreOperatorRetainedAssign(&onScreenFinishedListener_, self, onScreenFinishedListener);
}
@synthesize onScreenFinishedListener = onScreenFinishedListener_;
@synthesize depth = depth_;
@synthesize entering_ = entering__;
@synthesize exiting_ = exiting__;
@synthesize lastTx = lastTx_;
@synthesize lastTy = lastTy_;

+ (float)defaultButtonSize {
  return [((id<PlaynCoreGraphics>) [TBGameScreen graphics]) height] * 0.15f;
}

- (TBButton *)createMenuButtonWithNSString:(NSString *)path {
  TBButton *button = [[[TBButton alloc] initWithNSString:path withFloat:[TBGameScreen defaultButtonSize] withFloat:[TBGameScreen defaultButtonSize] withBOOL:YES] autorelease];
  [((TBButton *) NIL_CHK(button)) setTintWithInt:[((TBGameState *) NIL_CHK(state__)) themeColor]];
  return button;
}

- (BOOL)exiting {
  return exiting__;
}

- (BOOL)entering {
  return entering__;
}

- (void)wasShown {
  [super wasShown];
  [((id<PlaynCoreKeyboard>) [PlaynCorePlayN keyboard]) setListenerWithPlaynCoreKeyboard_Listener:self];
  entering__ = YES;
}

- (void)showTransitionCompleted {
  [super showTransitionCompleted];
  lastTx_ = 0;
  lastTy_ = 0;
  entering__ = NO;
}

- (void)hideTransitionStarted {
  exiting__ = YES;
}

- (void)wasHidden {
  exiting__ = NO;
}

- (void)updateWithInt:(int)delta {
  if ([self exiting]) {
    [[((TBGameState *) NIL_CHK(state__)) background] scrollWithFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) tx] - lastTx_ withFloat:[((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) ty] - lastTy_];
    lastTx_ = [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) tx];
    lastTy_ = [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) ty];
  }
}

- (void)wasRemoved {
}

- (int)getDepth {
  return depth_;
}

- (TBGameState *)state {
  return state__;
}

- (id)initWithTripleplayGameScreenStack:(TripleplayGameScreenStack *)screens
                        withTBGameState:(TBGameState *)state {
  if ((self = [super init])) {
    self.screens = screens;
    self.state_ = state;
  }
  return self;
}

+ (id<PlaynCoreGraphics>)graphics {
  return [PlaynCorePlayN graphics];
}

+ (float)lerpWithFloat:(float)x0
             withFloat:(float)x1
             withFloat:(float)perc {
  return [TBPlayNObject lerpWithFloat:x0 withFloat:x1 withFloat:perc];
}

+ (void)lerpWithPythagorasFVector:(PythagorasFVector *)v0
                        withFloat:(float)x1
                        withFloat:(float)y1
                        withFloat:(float)perc {
  [TBPlayNObject lerpWithPythagorasFVector:v0 withFloat:x1 withFloat:y1 withFloat:perc];
}

- (void)pushScreenWithTBGameScreen:(TBGameScreen *)screen {
  [self pushScreenWithTBGameScreen:screen withTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] left]];
}

- (void)pushScreenWithTBGameScreen:(TBGameScreen *)screen
withTripleplayGameScreenStack_Transition:(id<TripleplayGameScreenStack_Transition>)transition {
  JreOperatorRetainedAssign(&topActivity_, self, screen);
  ((TBGameScreen *) NIL_CHK(screen)).onScreenFinishedListener = [[[TBGameScreen_$1 alloc] initWithTBGameScreen:self withTBGameScreen:screen] autorelease];
  ((TBGameScreen *) NIL_CHK(screen)).depth = depth_ + 1;
  [((TripleplayGameScreenStack *) NIL_CHK(screens_)) pushWithTripleplayGameScreen:screen withTripleplayGameScreenStack_Transition:transition];
}

- (void)popThisWithTripleplayGameScreenStack_Transition:(id<TripleplayGameScreenStack_Transition>)transition {
  [((id<PlaynCoreKeyboard>) [PlaynCorePlayN keyboard]) setListenerWithPlaynCoreKeyboard_Listener:nil];
  [((TripleplayGameScreenStack *) NIL_CHK(screens_)) removeWithTripleplayGameScreen:self withTripleplayGameScreenStack_Transition:transition];
  (void) [((id<PlaynCoreGroupLayer>) NIL_CHK(layer_)) setDepthWithFloat:-1];
  if (onScreenFinishedListener_ != nil) [onScreenFinishedListener_ onScreenFinished];
}

- (void)popThis {
  [self popThisWithTripleplayGameScreenStack_Transition:[[((TripleplayGameScreenStack *) NIL_CHK(screens_)) slide] right]];
}

- (void)onChildScreenFinishedWithTBGameScreen:(TBGameScreen *)screen {
}

- (void)onKeyDownWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
  if ([((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key] == [PlaynCoreKeyEnum BACK] || [((id<PlaynCoreKeyboard_Event>) NIL_CHK(event)) key] == [PlaynCoreKeyEnum ESCAPE]) {
    [self popThis];
  }
}

- (void)onKeyTypedWithPlaynCoreKeyboard_TypedEvent:(id<PlaynCoreKeyboard_TypedEvent>)event {
}

- (void)onKeyUpWithPlaynCoreKeyboard_Event:(id<PlaynCoreKeyboard_Event>)event {
}

- (void)dealloc {
  JreOperatorRetainedAssign(&onScreenFinishedListener_, self, nil);
  JreOperatorRetainedAssign(&topActivity_, self, nil);
  JreOperatorRetainedAssign(&state__, self, nil);
  JreOperatorRetainedAssign(&screens_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBGameScreen *typedCopy = (TBGameScreen *) copy;
  typedCopy.screens = screens_;
  typedCopy.state_ = state__;
  typedCopy.topActivity = topActivity_;
  typedCopy.onScreenFinishedListener = onScreenFinishedListener_;
  typedCopy.depth = depth_;
  typedCopy.entering_ = entering__;
  typedCopy.exiting_ = exiting__;
  typedCopy.lastTx = lastTx_;
  typedCopy.lastTy = lastTy_;
}

@end
@implementation TBGameScreen_$1

- (TBGameScreen *)this$0 {
  return this$0_;
}
- (void)setThis$0:(TBGameScreen *)this$0 {
  JreOperatorRetainedAssign(&this$0_, self, this$0);
}
@synthesize this$0 = this$0_;
- (TBGameScreen *)val$screen {
  return val$screen_;
}
- (void)setVal$screen:(TBGameScreen *)val$screen {
  JreOperatorRetainedAssign(&val$screen_, self, val$screen);
}
@synthesize val$screen = val$screen_;

- (void)onScreenFinished {
  [this$0_ onChildScreenFinishedWithTBGameScreen:val$screen_];
}

- (id)initWithTBGameScreen:(TBGameScreen *)outer$
          withTBGameScreen:(TBGameScreen *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, self, outer$);
    JreOperatorRetainedAssign(&val$screen_, self, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$screen_, self, nil);
  JreOperatorRetainedAssign(&this$0_, self, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TBGameScreen_$1 *typedCopy = (TBGameScreen_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$screen = val$screen_;
}

@end
